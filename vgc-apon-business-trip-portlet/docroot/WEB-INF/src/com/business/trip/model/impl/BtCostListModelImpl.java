/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.business.trip.model.impl;

import com.business.trip.model.BtCostList;
import com.business.trip.model.BtCostListModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BtCostList service. Represents a row in the &quot;vgcapon_BtCostList&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.business.trip.model.BtCostListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BtCostListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BtCostListImpl
 * @see com.business.trip.model.BtCostList
 * @see com.business.trip.model.BtCostListModel
 * @generated
 */
public class BtCostListModelImpl extends BaseModelImpl<BtCostList>
	implements BtCostListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bt cost list model instance should use the {@link com.business.trip.model.BtCostList} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_BtCostList";
	public static final Object[][] TABLE_COLUMNS = {
			{ "btCostListId", Types.BIGINT },
			{ "businessTripPkId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "item", Types.VARCHAR },
			{ "invoiceCurrency", Types.VARCHAR },
			{ "paymentAmount", Types.DOUBLE },
			{ "paymentCurrency", Types.VARCHAR },
			{ "countryCity", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "invoiceAmount", Types.DOUBLE },
			{ "taxRate", Types.DOUBLE },
			{ "netAmount", Types.DOUBLE },
			{ "taxAmount", Types.DOUBLE },
			{ "netAmountRmb", Types.DOUBLE },
			{ "entertainmentDate", Types.TIMESTAMP },
			{ "entertainmentPlace", Types.VARCHAR },
			{ "reasonesInfo", Types.VARCHAR },
			{ "attendeesTotal", Types.INTEGER },
			{ "averageSpend", Types.DOUBLE },
			{ "mealCategory", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_BtCostList (btCostListId LONG not null primary key,businessTripPkId LONG,ticketNo VARCHAR(75) null,item VARCHAR(75) null,invoiceCurrency VARCHAR(75) null,paymentAmount DOUBLE,paymentCurrency VARCHAR(75) null,countryCity VARCHAR(75) null,type_ VARCHAR(75) null,invoiceAmount DOUBLE,taxRate DOUBLE,netAmount DOUBLE,taxAmount DOUBLE,netAmountRmb DOUBLE,entertainmentDate DATE null,entertainmentPlace VARCHAR(75) null,reasonesInfo VARCHAR(75) null,attendeesTotal INTEGER,averageSpend DOUBLE,mealCategory VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_BtCostList";
	public static final String ORDER_BY_JPQL = " ORDER BY btCostList.btCostListId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_BtCostList.btCostListId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.business.trip.model.BtCostList"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.business.trip.model.BtCostList"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.business.trip.model.BtCostList"),
			true);
	public static long BUSINESSTRIPPKID_COLUMN_BITMASK = 1L;
	public static long PAYMENTCURRENCY_COLUMN_BITMASK = 2L;
	public static long TICKETNO_COLUMN_BITMASK = 4L;
	public static long BTCOSTLISTID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.business.trip.model.BtCostList"));

	public BtCostListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _btCostListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBtCostListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _btCostListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BtCostList.class;
	}

	@Override
	public String getModelClassName() {
		return BtCostList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("btCostListId", getBtCostListId());
		attributes.put("businessTripPkId", getBusinessTripPkId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("item", getItem());
		attributes.put("invoiceCurrency", getInvoiceCurrency());
		attributes.put("paymentAmount", getPaymentAmount());
		attributes.put("paymentCurrency", getPaymentCurrency());
		attributes.put("countryCity", getCountryCity());
		attributes.put("type", getType());
		attributes.put("invoiceAmount", getInvoiceAmount());
		attributes.put("taxRate", getTaxRate());
		attributes.put("netAmount", getNetAmount());
		attributes.put("taxAmount", getTaxAmount());
		attributes.put("netAmountRmb", getNetAmountRmb());
		attributes.put("entertainmentDate", getEntertainmentDate());
		attributes.put("entertainmentPlace", getEntertainmentPlace());
		attributes.put("reasonesInfo", getReasonesInfo());
		attributes.put("attendeesTotal", getAttendeesTotal());
		attributes.put("averageSpend", getAverageSpend());
		attributes.put("mealCategory", getMealCategory());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long btCostListId = (Long)attributes.get("btCostListId");

		if (btCostListId != null) {
			setBtCostListId(btCostListId);
		}

		Long businessTripPkId = (Long)attributes.get("businessTripPkId");

		if (businessTripPkId != null) {
			setBusinessTripPkId(businessTripPkId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String item = (String)attributes.get("item");

		if (item != null) {
			setItem(item);
		}

		String invoiceCurrency = (String)attributes.get("invoiceCurrency");

		if (invoiceCurrency != null) {
			setInvoiceCurrency(invoiceCurrency);
		}

		Double paymentAmount = (Double)attributes.get("paymentAmount");

		if (paymentAmount != null) {
			setPaymentAmount(paymentAmount);
		}

		String paymentCurrency = (String)attributes.get("paymentCurrency");

		if (paymentCurrency != null) {
			setPaymentCurrency(paymentCurrency);
		}

		String countryCity = (String)attributes.get("countryCity");

		if (countryCity != null) {
			setCountryCity(countryCity);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Double invoiceAmount = (Double)attributes.get("invoiceAmount");

		if (invoiceAmount != null) {
			setInvoiceAmount(invoiceAmount);
		}

		Double taxRate = (Double)attributes.get("taxRate");

		if (taxRate != null) {
			setTaxRate(taxRate);
		}

		Double netAmount = (Double)attributes.get("netAmount");

		if (netAmount != null) {
			setNetAmount(netAmount);
		}

		Double taxAmount = (Double)attributes.get("taxAmount");

		if (taxAmount != null) {
			setTaxAmount(taxAmount);
		}

		Double netAmountRmb = (Double)attributes.get("netAmountRmb");

		if (netAmountRmb != null) {
			setNetAmountRmb(netAmountRmb);
		}

		Date entertainmentDate = (Date)attributes.get("entertainmentDate");

		if (entertainmentDate != null) {
			setEntertainmentDate(entertainmentDate);
		}

		String entertainmentPlace = (String)attributes.get("entertainmentPlace");

		if (entertainmentPlace != null) {
			setEntertainmentPlace(entertainmentPlace);
		}

		String reasonesInfo = (String)attributes.get("reasonesInfo");

		if (reasonesInfo != null) {
			setReasonesInfo(reasonesInfo);
		}

		Integer attendeesTotal = (Integer)attributes.get("attendeesTotal");

		if (attendeesTotal != null) {
			setAttendeesTotal(attendeesTotal);
		}

		Double averageSpend = (Double)attributes.get("averageSpend");

		if (averageSpend != null) {
			setAverageSpend(averageSpend);
		}

		String mealCategory = (String)attributes.get("mealCategory");

		if (mealCategory != null) {
			setMealCategory(mealCategory);
		}
	}

	@Override
	public long getBtCostListId() {
		return _btCostListId;
	}

	@Override
	public void setBtCostListId(long btCostListId) {
		_btCostListId = btCostListId;
	}

	@Override
	public long getBusinessTripPkId() {
		return _businessTripPkId;
	}

	@Override
	public void setBusinessTripPkId(long businessTripPkId) {
		_columnBitmask |= BUSINESSTRIPPKID_COLUMN_BITMASK;

		if (!_setOriginalBusinessTripPkId) {
			_setOriginalBusinessTripPkId = true;

			_originalBusinessTripPkId = _businessTripPkId;
		}

		_businessTripPkId = businessTripPkId;
	}

	public long getOriginalBusinessTripPkId() {
		return _originalBusinessTripPkId;
	}

	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_columnBitmask |= TICKETNO_COLUMN_BITMASK;

		if (_originalTicketNo == null) {
			_originalTicketNo = _ticketNo;
		}

		_ticketNo = ticketNo;
	}

	public String getOriginalTicketNo() {
		return GetterUtil.getString(_originalTicketNo);
	}

	@Override
	public String getItem() {
		if (_item == null) {
			return StringPool.BLANK;
		}
		else {
			return _item;
		}
	}

	@Override
	public void setItem(String item) {
		_item = item;
	}

	@Override
	public String getInvoiceCurrency() {
		if (_invoiceCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _invoiceCurrency;
		}
	}

	@Override
	public void setInvoiceCurrency(String invoiceCurrency) {
		_invoiceCurrency = invoiceCurrency;
	}

	@Override
	public double getPaymentAmount() {
		return _paymentAmount;
	}

	@Override
	public void setPaymentAmount(double paymentAmount) {
		_paymentAmount = paymentAmount;
	}

	@Override
	public String getPaymentCurrency() {
		if (_paymentCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentCurrency;
		}
	}

	@Override
	public void setPaymentCurrency(String paymentCurrency) {
		_columnBitmask |= PAYMENTCURRENCY_COLUMN_BITMASK;

		if (_originalPaymentCurrency == null) {
			_originalPaymentCurrency = _paymentCurrency;
		}

		_paymentCurrency = paymentCurrency;
	}

	public String getOriginalPaymentCurrency() {
		return GetterUtil.getString(_originalPaymentCurrency);
	}

	@Override
	public String getCountryCity() {
		if (_countryCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCity;
		}
	}

	@Override
	public void setCountryCity(String countryCity) {
		_countryCity = countryCity;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public double getInvoiceAmount() {
		return _invoiceAmount;
	}

	@Override
	public void setInvoiceAmount(double invoiceAmount) {
		_invoiceAmount = invoiceAmount;
	}

	@Override
	public double getTaxRate() {
		return _taxRate;
	}

	@Override
	public void setTaxRate(double taxRate) {
		_taxRate = taxRate;
	}

	@Override
	public double getNetAmount() {
		return _netAmount;
	}

	@Override
	public void setNetAmount(double netAmount) {
		_netAmount = netAmount;
	}

	@Override
	public double getTaxAmount() {
		return _taxAmount;
	}

	@Override
	public void setTaxAmount(double taxAmount) {
		_taxAmount = taxAmount;
	}

	@Override
	public double getNetAmountRmb() {
		return _netAmountRmb;
	}

	@Override
	public void setNetAmountRmb(double netAmountRmb) {
		_netAmountRmb = netAmountRmb;
	}

	@Override
	public Date getEntertainmentDate() {
		return _entertainmentDate;
	}

	@Override
	public void setEntertainmentDate(Date entertainmentDate) {
		_entertainmentDate = entertainmentDate;
	}

	@Override
	public String getEntertainmentPlace() {
		if (_entertainmentPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _entertainmentPlace;
		}
	}

	@Override
	public void setEntertainmentPlace(String entertainmentPlace) {
		_entertainmentPlace = entertainmentPlace;
	}

	@Override
	public String getReasonesInfo() {
		if (_reasonesInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonesInfo;
		}
	}

	@Override
	public void setReasonesInfo(String reasonesInfo) {
		_reasonesInfo = reasonesInfo;
	}

	@Override
	public int getAttendeesTotal() {
		return _attendeesTotal;
	}

	@Override
	public void setAttendeesTotal(int attendeesTotal) {
		_attendeesTotal = attendeesTotal;
	}

	@Override
	public double getAverageSpend() {
		return _averageSpend;
	}

	@Override
	public void setAverageSpend(double averageSpend) {
		_averageSpend = averageSpend;
	}

	@Override
	public String getMealCategory() {
		if (_mealCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _mealCategory;
		}
	}

	@Override
	public void setMealCategory(String mealCategory) {
		_mealCategory = mealCategory;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BtCostList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BtCostList toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BtCostList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BtCostListImpl btCostListImpl = new BtCostListImpl();

		btCostListImpl.setBtCostListId(getBtCostListId());
		btCostListImpl.setBusinessTripPkId(getBusinessTripPkId());
		btCostListImpl.setTicketNo(getTicketNo());
		btCostListImpl.setItem(getItem());
		btCostListImpl.setInvoiceCurrency(getInvoiceCurrency());
		btCostListImpl.setPaymentAmount(getPaymentAmount());
		btCostListImpl.setPaymentCurrency(getPaymentCurrency());
		btCostListImpl.setCountryCity(getCountryCity());
		btCostListImpl.setType(getType());
		btCostListImpl.setInvoiceAmount(getInvoiceAmount());
		btCostListImpl.setTaxRate(getTaxRate());
		btCostListImpl.setNetAmount(getNetAmount());
		btCostListImpl.setTaxAmount(getTaxAmount());
		btCostListImpl.setNetAmountRmb(getNetAmountRmb());
		btCostListImpl.setEntertainmentDate(getEntertainmentDate());
		btCostListImpl.setEntertainmentPlace(getEntertainmentPlace());
		btCostListImpl.setReasonesInfo(getReasonesInfo());
		btCostListImpl.setAttendeesTotal(getAttendeesTotal());
		btCostListImpl.setAverageSpend(getAverageSpend());
		btCostListImpl.setMealCategory(getMealCategory());

		btCostListImpl.resetOriginalValues();

		return btCostListImpl;
	}

	@Override
	public int compareTo(BtCostList btCostList) {
		long primaryKey = btCostList.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BtCostList)) {
			return false;
		}

		BtCostList btCostList = (BtCostList)obj;

		long primaryKey = btCostList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BtCostListModelImpl btCostListModelImpl = this;

		btCostListModelImpl._originalBusinessTripPkId = btCostListModelImpl._businessTripPkId;

		btCostListModelImpl._setOriginalBusinessTripPkId = false;

		btCostListModelImpl._originalTicketNo = btCostListModelImpl._ticketNo;

		btCostListModelImpl._originalPaymentCurrency = btCostListModelImpl._paymentCurrency;

		btCostListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BtCostList> toCacheModel() {
		BtCostListCacheModel btCostListCacheModel = new BtCostListCacheModel();

		btCostListCacheModel.btCostListId = getBtCostListId();

		btCostListCacheModel.businessTripPkId = getBusinessTripPkId();

		btCostListCacheModel.ticketNo = getTicketNo();

		String ticketNo = btCostListCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			btCostListCacheModel.ticketNo = null;
		}

		btCostListCacheModel.item = getItem();

		String item = btCostListCacheModel.item;

		if ((item != null) && (item.length() == 0)) {
			btCostListCacheModel.item = null;
		}

		btCostListCacheModel.invoiceCurrency = getInvoiceCurrency();

		String invoiceCurrency = btCostListCacheModel.invoiceCurrency;

		if ((invoiceCurrency != null) && (invoiceCurrency.length() == 0)) {
			btCostListCacheModel.invoiceCurrency = null;
		}

		btCostListCacheModel.paymentAmount = getPaymentAmount();

		btCostListCacheModel.paymentCurrency = getPaymentCurrency();

		String paymentCurrency = btCostListCacheModel.paymentCurrency;

		if ((paymentCurrency != null) && (paymentCurrency.length() == 0)) {
			btCostListCacheModel.paymentCurrency = null;
		}

		btCostListCacheModel.countryCity = getCountryCity();

		String countryCity = btCostListCacheModel.countryCity;

		if ((countryCity != null) && (countryCity.length() == 0)) {
			btCostListCacheModel.countryCity = null;
		}

		btCostListCacheModel.type = getType();

		String type = btCostListCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			btCostListCacheModel.type = null;
		}

		btCostListCacheModel.invoiceAmount = getInvoiceAmount();

		btCostListCacheModel.taxRate = getTaxRate();

		btCostListCacheModel.netAmount = getNetAmount();

		btCostListCacheModel.taxAmount = getTaxAmount();

		btCostListCacheModel.netAmountRmb = getNetAmountRmb();

		Date entertainmentDate = getEntertainmentDate();

		if (entertainmentDate != null) {
			btCostListCacheModel.entertainmentDate = entertainmentDate.getTime();
		}
		else {
			btCostListCacheModel.entertainmentDate = Long.MIN_VALUE;
		}

		btCostListCacheModel.entertainmentPlace = getEntertainmentPlace();

		String entertainmentPlace = btCostListCacheModel.entertainmentPlace;

		if ((entertainmentPlace != null) && (entertainmentPlace.length() == 0)) {
			btCostListCacheModel.entertainmentPlace = null;
		}

		btCostListCacheModel.reasonesInfo = getReasonesInfo();

		String reasonesInfo = btCostListCacheModel.reasonesInfo;

		if ((reasonesInfo != null) && (reasonesInfo.length() == 0)) {
			btCostListCacheModel.reasonesInfo = null;
		}

		btCostListCacheModel.attendeesTotal = getAttendeesTotal();

		btCostListCacheModel.averageSpend = getAverageSpend();

		btCostListCacheModel.mealCategory = getMealCategory();

		String mealCategory = btCostListCacheModel.mealCategory;

		if ((mealCategory != null) && (mealCategory.length() == 0)) {
			btCostListCacheModel.mealCategory = null;
		}

		return btCostListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{btCostListId=");
		sb.append(getBtCostListId());
		sb.append(", businessTripPkId=");
		sb.append(getBusinessTripPkId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", item=");
		sb.append(getItem());
		sb.append(", invoiceCurrency=");
		sb.append(getInvoiceCurrency());
		sb.append(", paymentAmount=");
		sb.append(getPaymentAmount());
		sb.append(", paymentCurrency=");
		sb.append(getPaymentCurrency());
		sb.append(", countryCity=");
		sb.append(getCountryCity());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", invoiceAmount=");
		sb.append(getInvoiceAmount());
		sb.append(", taxRate=");
		sb.append(getTaxRate());
		sb.append(", netAmount=");
		sb.append(getNetAmount());
		sb.append(", taxAmount=");
		sb.append(getTaxAmount());
		sb.append(", netAmountRmb=");
		sb.append(getNetAmountRmb());
		sb.append(", entertainmentDate=");
		sb.append(getEntertainmentDate());
		sb.append(", entertainmentPlace=");
		sb.append(getEntertainmentPlace());
		sb.append(", reasonesInfo=");
		sb.append(getReasonesInfo());
		sb.append(", attendeesTotal=");
		sb.append(getAttendeesTotal());
		sb.append(", averageSpend=");
		sb.append(getAverageSpend());
		sb.append(", mealCategory=");
		sb.append(getMealCategory());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.business.trip.model.BtCostList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>btCostListId</column-name><column-value><![CDATA[");
		sb.append(getBtCostListId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTripPkId</column-name><column-value><![CDATA[");
		sb.append(getBusinessTripPkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>item</column-name><column-value><![CDATA[");
		sb.append(getItem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceCurrency</column-name><column-value><![CDATA[");
		sb.append(getInvoiceCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentAmount</column-name><column-value><![CDATA[");
		sb.append(getPaymentAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentCurrency</column-name><column-value><![CDATA[");
		sb.append(getPaymentCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCity</column-name><column-value><![CDATA[");
		sb.append(getCountryCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invoiceAmount</column-name><column-value><![CDATA[");
		sb.append(getInvoiceAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxRate</column-name><column-value><![CDATA[");
		sb.append(getTaxRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netAmount</column-name><column-value><![CDATA[");
		sb.append(getNetAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxAmount</column-name><column-value><![CDATA[");
		sb.append(getTaxAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netAmountRmb</column-name><column-value><![CDATA[");
		sb.append(getNetAmountRmb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entertainmentDate</column-name><column-value><![CDATA[");
		sb.append(getEntertainmentDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entertainmentPlace</column-name><column-value><![CDATA[");
		sb.append(getEntertainmentPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonesInfo</column-name><column-value><![CDATA[");
		sb.append(getReasonesInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attendeesTotal</column-name><column-value><![CDATA[");
		sb.append(getAttendeesTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageSpend</column-name><column-value><![CDATA[");
		sb.append(getAverageSpend());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mealCategory</column-name><column-value><![CDATA[");
		sb.append(getMealCategory());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BtCostList.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BtCostList.class
		};
	private long _btCostListId;
	private long _businessTripPkId;
	private long _originalBusinessTripPkId;
	private boolean _setOriginalBusinessTripPkId;
	private String _ticketNo;
	private String _originalTicketNo;
	private String _item;
	private String _invoiceCurrency;
	private double _paymentAmount;
	private String _paymentCurrency;
	private String _originalPaymentCurrency;
	private String _countryCity;
	private String _type;
	private double _invoiceAmount;
	private double _taxRate;
	private double _netAmount;
	private double _taxAmount;
	private double _netAmountRmb;
	private Date _entertainmentDate;
	private String _entertainmentPlace;
	private String _reasonesInfo;
	private int _attendeesTotal;
	private double _averageSpend;
	private String _mealCategory;
	private long _columnBitmask;
	private BtCostList _escapedModel;
}