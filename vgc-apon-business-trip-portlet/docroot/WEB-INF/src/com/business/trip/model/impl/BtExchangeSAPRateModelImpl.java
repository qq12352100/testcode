/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.business.trip.model.impl;

import com.business.trip.model.BtExchangeSAPRate;
import com.business.trip.model.BtExchangeSAPRateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BtExchangeSAPRate service. Represents a row in the &quot;vgcapon_BtExchangeSAPRate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.business.trip.model.BtExchangeSAPRateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BtExchangeSAPRateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BtExchangeSAPRateImpl
 * @see com.business.trip.model.BtExchangeSAPRate
 * @see com.business.trip.model.BtExchangeSAPRateModel
 * @generated
 */
public class BtExchangeSAPRateModelImpl extends BaseModelImpl<BtExchangeSAPRate>
	implements BtExchangeSAPRateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bt exchange s a p rate model instance should use the {@link com.business.trip.model.BtExchangeSAPRate} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_BtExchangeSAPRate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "btExchangeSAPRateId", Types.BIGINT },
			{ "fromCurrency", Types.VARCHAR },
			{ "toCurrency", Types.VARCHAR },
			{ "currencyRate", Types.DOUBLE },
			{ "rateType", Types.VARCHAR },
			{ "sapDate", Types.TIMESTAMP },
			{ "importDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_BtExchangeSAPRate (btExchangeSAPRateId LONG not null primary key,fromCurrency VARCHAR(75) null,toCurrency VARCHAR(75) null,currencyRate DOUBLE,rateType VARCHAR(75) null,sapDate DATE null,importDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_BtExchangeSAPRate";
	public static final String ORDER_BY_JPQL = " ORDER BY btExchangeSAPRate.btExchangeSAPRateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_BtExchangeSAPRate.btExchangeSAPRateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.business.trip.model.BtExchangeSAPRate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.business.trip.model.BtExchangeSAPRate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.business.trip.model.BtExchangeSAPRate"));

	public BtExchangeSAPRateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _btExchangeSAPRateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBtExchangeSAPRateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _btExchangeSAPRateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BtExchangeSAPRate.class;
	}

	@Override
	public String getModelClassName() {
		return BtExchangeSAPRate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("btExchangeSAPRateId", getBtExchangeSAPRateId());
		attributes.put("fromCurrency", getFromCurrency());
		attributes.put("toCurrency", getToCurrency());
		attributes.put("currencyRate", getCurrencyRate());
		attributes.put("rateType", getRateType());
		attributes.put("sapDate", getSapDate());
		attributes.put("importDate", getImportDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long btExchangeSAPRateId = (Long)attributes.get("btExchangeSAPRateId");

		if (btExchangeSAPRateId != null) {
			setBtExchangeSAPRateId(btExchangeSAPRateId);
		}

		String fromCurrency = (String)attributes.get("fromCurrency");

		if (fromCurrency != null) {
			setFromCurrency(fromCurrency);
		}

		String toCurrency = (String)attributes.get("toCurrency");

		if (toCurrency != null) {
			setToCurrency(toCurrency);
		}

		Double currencyRate = (Double)attributes.get("currencyRate");

		if (currencyRate != null) {
			setCurrencyRate(currencyRate);
		}

		String rateType = (String)attributes.get("rateType");

		if (rateType != null) {
			setRateType(rateType);
		}

		Date sapDate = (Date)attributes.get("sapDate");

		if (sapDate != null) {
			setSapDate(sapDate);
		}

		Date importDate = (Date)attributes.get("importDate");

		if (importDate != null) {
			setImportDate(importDate);
		}
	}

	@Override
	public long getBtExchangeSAPRateId() {
		return _btExchangeSAPRateId;
	}

	@Override
	public void setBtExchangeSAPRateId(long btExchangeSAPRateId) {
		_btExchangeSAPRateId = btExchangeSAPRateId;
	}

	@Override
	public String getFromCurrency() {
		if (_fromCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromCurrency;
		}
	}

	@Override
	public void setFromCurrency(String fromCurrency) {
		_fromCurrency = fromCurrency;
	}

	@Override
	public String getToCurrency() {
		if (_toCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _toCurrency;
		}
	}

	@Override
	public void setToCurrency(String toCurrency) {
		_toCurrency = toCurrency;
	}

	@Override
	public double getCurrencyRate() {
		return _currencyRate;
	}

	@Override
	public void setCurrencyRate(double currencyRate) {
		_currencyRate = currencyRate;
	}

	@Override
	public String getRateType() {
		if (_rateType == null) {
			return StringPool.BLANK;
		}
		else {
			return _rateType;
		}
	}

	@Override
	public void setRateType(String rateType) {
		_rateType = rateType;
	}

	@Override
	public Date getSapDate() {
		return _sapDate;
	}

	@Override
	public void setSapDate(Date sapDate) {
		_sapDate = sapDate;
	}

	@Override
	public Date getImportDate() {
		return _importDate;
	}

	@Override
	public void setImportDate(Date importDate) {
		_importDate = importDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BtExchangeSAPRate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BtExchangeSAPRate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BtExchangeSAPRate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BtExchangeSAPRateImpl btExchangeSAPRateImpl = new BtExchangeSAPRateImpl();

		btExchangeSAPRateImpl.setBtExchangeSAPRateId(getBtExchangeSAPRateId());
		btExchangeSAPRateImpl.setFromCurrency(getFromCurrency());
		btExchangeSAPRateImpl.setToCurrency(getToCurrency());
		btExchangeSAPRateImpl.setCurrencyRate(getCurrencyRate());
		btExchangeSAPRateImpl.setRateType(getRateType());
		btExchangeSAPRateImpl.setSapDate(getSapDate());
		btExchangeSAPRateImpl.setImportDate(getImportDate());

		btExchangeSAPRateImpl.resetOriginalValues();

		return btExchangeSAPRateImpl;
	}

	@Override
	public int compareTo(BtExchangeSAPRate btExchangeSAPRate) {
		long primaryKey = btExchangeSAPRate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BtExchangeSAPRate)) {
			return false;
		}

		BtExchangeSAPRate btExchangeSAPRate = (BtExchangeSAPRate)obj;

		long primaryKey = btExchangeSAPRate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BtExchangeSAPRate> toCacheModel() {
		BtExchangeSAPRateCacheModel btExchangeSAPRateCacheModel = new BtExchangeSAPRateCacheModel();

		btExchangeSAPRateCacheModel.btExchangeSAPRateId = getBtExchangeSAPRateId();

		btExchangeSAPRateCacheModel.fromCurrency = getFromCurrency();

		String fromCurrency = btExchangeSAPRateCacheModel.fromCurrency;

		if ((fromCurrency != null) && (fromCurrency.length() == 0)) {
			btExchangeSAPRateCacheModel.fromCurrency = null;
		}

		btExchangeSAPRateCacheModel.toCurrency = getToCurrency();

		String toCurrency = btExchangeSAPRateCacheModel.toCurrency;

		if ((toCurrency != null) && (toCurrency.length() == 0)) {
			btExchangeSAPRateCacheModel.toCurrency = null;
		}

		btExchangeSAPRateCacheModel.currencyRate = getCurrencyRate();

		btExchangeSAPRateCacheModel.rateType = getRateType();

		String rateType = btExchangeSAPRateCacheModel.rateType;

		if ((rateType != null) && (rateType.length() == 0)) {
			btExchangeSAPRateCacheModel.rateType = null;
		}

		Date sapDate = getSapDate();

		if (sapDate != null) {
			btExchangeSAPRateCacheModel.sapDate = sapDate.getTime();
		}
		else {
			btExchangeSAPRateCacheModel.sapDate = Long.MIN_VALUE;
		}

		Date importDate = getImportDate();

		if (importDate != null) {
			btExchangeSAPRateCacheModel.importDate = importDate.getTime();
		}
		else {
			btExchangeSAPRateCacheModel.importDate = Long.MIN_VALUE;
		}

		return btExchangeSAPRateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{btExchangeSAPRateId=");
		sb.append(getBtExchangeSAPRateId());
		sb.append(", fromCurrency=");
		sb.append(getFromCurrency());
		sb.append(", toCurrency=");
		sb.append(getToCurrency());
		sb.append(", currencyRate=");
		sb.append(getCurrencyRate());
		sb.append(", rateType=");
		sb.append(getRateType());
		sb.append(", sapDate=");
		sb.append(getSapDate());
		sb.append(", importDate=");
		sb.append(getImportDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.business.trip.model.BtExchangeSAPRate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>btExchangeSAPRateId</column-name><column-value><![CDATA[");
		sb.append(getBtExchangeSAPRateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromCurrency</column-name><column-value><![CDATA[");
		sb.append(getFromCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toCurrency</column-name><column-value><![CDATA[");
		sb.append(getToCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyRate</column-name><column-value><![CDATA[");
		sb.append(getCurrencyRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rateType</column-name><column-value><![CDATA[");
		sb.append(getRateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapDate</column-name><column-value><![CDATA[");
		sb.append(getSapDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importDate</column-name><column-value><![CDATA[");
		sb.append(getImportDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BtExchangeSAPRate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BtExchangeSAPRate.class
		};
	private long _btExchangeSAPRateId;
	private String _fromCurrency;
	private String _toCurrency;
	private double _currencyRate;
	private String _rateType;
	private Date _sapDate;
	private Date _importDate;
	private BtExchangeSAPRate _escapedModel;
}