/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.business.trip.model.impl;

import com.business.trip.model.BtHotelInfo;
import com.business.trip.model.BtHotelInfoModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BtHotelInfo service. Represents a row in the &quot;vgcapon_BtHotelInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.business.trip.model.BtHotelInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BtHotelInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BtHotelInfoImpl
 * @see com.business.trip.model.BtHotelInfo
 * @see com.business.trip.model.BtHotelInfoModel
 * @generated
 */
public class BtHotelInfoModelImpl extends BaseModelImpl<BtHotelInfo>
	implements BtHotelInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bt hotel info model instance should use the {@link com.business.trip.model.BtHotelInfo} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_BtHotelInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "btHotelInfoId", Types.BIGINT },
			{ "businessTripPkId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "cityType", Types.VARCHAR },
			{ "hotel", Types.VARCHAR },
			{ "checkIn", Types.TIMESTAMP },
			{ "checkOut", Types.TIMESTAMP },
			{ "roomCategory", Types.VARCHAR },
			{ "price", Types.DOUBLE },
			{ "currency_", Types.VARCHAR },
			{ "otherReasonInfo", Types.VARCHAR },
			{ "isNotBookedFromTA", Types.BOOLEAN },
			{ "isOverBudget", Types.INTEGER },
			{ "othersSpecify", Types.VARCHAR },
			{ "tripType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_BtHotelInfo (btHotelInfoId LONG not null primary key,businessTripPkId LONG,ticketNo VARCHAR(75) null,city VARCHAR(75) null,cityType VARCHAR(75) null,hotel VARCHAR(75) null,checkIn DATE null,checkOut DATE null,roomCategory VARCHAR(75) null,price DOUBLE,currency_ VARCHAR(75) null,otherReasonInfo VARCHAR(512) null,isNotBookedFromTA BOOLEAN,isOverBudget INTEGER,othersSpecify VARCHAR(512) null,tripType VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_BtHotelInfo";
	public static final String ORDER_BY_JPQL = " ORDER BY btHotelInfo.btHotelInfoId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_BtHotelInfo.btHotelInfoId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.business.trip.model.BtHotelInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.business.trip.model.BtHotelInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.business.trip.model.BtHotelInfo"),
			true);
	public static long BUSINESSTRIPPKID_COLUMN_BITMASK = 1L;
	public static long TICKETNO_COLUMN_BITMASK = 2L;
	public static long TRIPTYPE_COLUMN_BITMASK = 4L;
	public static long BTHOTELINFOID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.business.trip.model.BtHotelInfo"));

	public BtHotelInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _btHotelInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBtHotelInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _btHotelInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BtHotelInfo.class;
	}

	@Override
	public String getModelClassName() {
		return BtHotelInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("btHotelInfoId", getBtHotelInfoId());
		attributes.put("businessTripPkId", getBusinessTripPkId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("city", getCity());
		attributes.put("cityType", getCityType());
		attributes.put("hotel", getHotel());
		attributes.put("checkIn", getCheckIn());
		attributes.put("checkOut", getCheckOut());
		attributes.put("roomCategory", getRoomCategory());
		attributes.put("price", getPrice());
		attributes.put("currency", getCurrency());
		attributes.put("otherReasonInfo", getOtherReasonInfo());
		attributes.put("isNotBookedFromTA", getIsNotBookedFromTA());
		attributes.put("isOverBudget", getIsOverBudget());
		attributes.put("othersSpecify", getOthersSpecify());
		attributes.put("tripType", getTripType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long btHotelInfoId = (Long)attributes.get("btHotelInfoId");

		if (btHotelInfoId != null) {
			setBtHotelInfoId(btHotelInfoId);
		}

		Long businessTripPkId = (Long)attributes.get("businessTripPkId");

		if (businessTripPkId != null) {
			setBusinessTripPkId(businessTripPkId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String cityType = (String)attributes.get("cityType");

		if (cityType != null) {
			setCityType(cityType);
		}

		String hotel = (String)attributes.get("hotel");

		if (hotel != null) {
			setHotel(hotel);
		}

		Date checkIn = (Date)attributes.get("checkIn");

		if (checkIn != null) {
			setCheckIn(checkIn);
		}

		Date checkOut = (Date)attributes.get("checkOut");

		if (checkOut != null) {
			setCheckOut(checkOut);
		}

		String roomCategory = (String)attributes.get("roomCategory");

		if (roomCategory != null) {
			setRoomCategory(roomCategory);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String otherReasonInfo = (String)attributes.get("otherReasonInfo");

		if (otherReasonInfo != null) {
			setOtherReasonInfo(otherReasonInfo);
		}

		Boolean isNotBookedFromTA = (Boolean)attributes.get("isNotBookedFromTA");

		if (isNotBookedFromTA != null) {
			setIsNotBookedFromTA(isNotBookedFromTA);
		}

		Integer isOverBudget = (Integer)attributes.get("isOverBudget");

		if (isOverBudget != null) {
			setIsOverBudget(isOverBudget);
		}

		String othersSpecify = (String)attributes.get("othersSpecify");

		if (othersSpecify != null) {
			setOthersSpecify(othersSpecify);
		}

		String tripType = (String)attributes.get("tripType");

		if (tripType != null) {
			setTripType(tripType);
		}
	}

	@Override
	public long getBtHotelInfoId() {
		return _btHotelInfoId;
	}

	@Override
	public void setBtHotelInfoId(long btHotelInfoId) {
		_btHotelInfoId = btHotelInfoId;
	}

	@Override
	public long getBusinessTripPkId() {
		return _businessTripPkId;
	}

	@Override
	public void setBusinessTripPkId(long businessTripPkId) {
		_columnBitmask |= BUSINESSTRIPPKID_COLUMN_BITMASK;

		if (!_setOriginalBusinessTripPkId) {
			_setOriginalBusinessTripPkId = true;

			_originalBusinessTripPkId = _businessTripPkId;
		}

		_businessTripPkId = businessTripPkId;
	}

	public long getOriginalBusinessTripPkId() {
		return _originalBusinessTripPkId;
	}

	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_columnBitmask |= TICKETNO_COLUMN_BITMASK;

		if (_originalTicketNo == null) {
			_originalTicketNo = _ticketNo;
		}

		_ticketNo = ticketNo;
	}

	public String getOriginalTicketNo() {
		return GetterUtil.getString(_originalTicketNo);
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getCityType() {
		if (_cityType == null) {
			return StringPool.BLANK;
		}
		else {
			return _cityType;
		}
	}

	@Override
	public void setCityType(String cityType) {
		_cityType = cityType;
	}

	@Override
	public String getHotel() {
		if (_hotel == null) {
			return StringPool.BLANK;
		}
		else {
			return _hotel;
		}
	}

	@Override
	public void setHotel(String hotel) {
		_hotel = hotel;
	}

	@Override
	public Date getCheckIn() {
		return _checkIn;
	}

	@Override
	public void setCheckIn(Date checkIn) {
		_checkIn = checkIn;
	}

	@Override
	public Date getCheckOut() {
		return _checkOut;
	}

	@Override
	public void setCheckOut(Date checkOut) {
		_checkOut = checkOut;
	}

	@Override
	public String getRoomCategory() {
		if (_roomCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _roomCategory;
		}
	}

	@Override
	public void setRoomCategory(String roomCategory) {
		_roomCategory = roomCategory;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public String getOtherReasonInfo() {
		if (_otherReasonInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherReasonInfo;
		}
	}

	@Override
	public void setOtherReasonInfo(String otherReasonInfo) {
		_otherReasonInfo = otherReasonInfo;
	}

	@Override
	public boolean getIsNotBookedFromTA() {
		return _isNotBookedFromTA;
	}

	@Override
	public boolean isIsNotBookedFromTA() {
		return _isNotBookedFromTA;
	}

	@Override
	public void setIsNotBookedFromTA(boolean isNotBookedFromTA) {
		_isNotBookedFromTA = isNotBookedFromTA;
	}

	@Override
	public int getIsOverBudget() {
		return _isOverBudget;
	}

	@Override
	public void setIsOverBudget(int isOverBudget) {
		_isOverBudget = isOverBudget;
	}

	@Override
	public String getOthersSpecify() {
		if (_othersSpecify == null) {
			return StringPool.BLANK;
		}
		else {
			return _othersSpecify;
		}
	}

	@Override
	public void setOthersSpecify(String othersSpecify) {
		_othersSpecify = othersSpecify;
	}

	@Override
	public String getTripType() {
		if (_tripType == null) {
			return StringPool.BLANK;
		}
		else {
			return _tripType;
		}
	}

	@Override
	public void setTripType(String tripType) {
		_columnBitmask |= TRIPTYPE_COLUMN_BITMASK;

		if (_originalTripType == null) {
			_originalTripType = _tripType;
		}

		_tripType = tripType;
	}

	public String getOriginalTripType() {
		return GetterUtil.getString(_originalTripType);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BtHotelInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BtHotelInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BtHotelInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BtHotelInfoImpl btHotelInfoImpl = new BtHotelInfoImpl();

		btHotelInfoImpl.setBtHotelInfoId(getBtHotelInfoId());
		btHotelInfoImpl.setBusinessTripPkId(getBusinessTripPkId());
		btHotelInfoImpl.setTicketNo(getTicketNo());
		btHotelInfoImpl.setCity(getCity());
		btHotelInfoImpl.setCityType(getCityType());
		btHotelInfoImpl.setHotel(getHotel());
		btHotelInfoImpl.setCheckIn(getCheckIn());
		btHotelInfoImpl.setCheckOut(getCheckOut());
		btHotelInfoImpl.setRoomCategory(getRoomCategory());
		btHotelInfoImpl.setPrice(getPrice());
		btHotelInfoImpl.setCurrency(getCurrency());
		btHotelInfoImpl.setOtherReasonInfo(getOtherReasonInfo());
		btHotelInfoImpl.setIsNotBookedFromTA(getIsNotBookedFromTA());
		btHotelInfoImpl.setIsOverBudget(getIsOverBudget());
		btHotelInfoImpl.setOthersSpecify(getOthersSpecify());
		btHotelInfoImpl.setTripType(getTripType());

		btHotelInfoImpl.resetOriginalValues();

		return btHotelInfoImpl;
	}

	@Override
	public int compareTo(BtHotelInfo btHotelInfo) {
		long primaryKey = btHotelInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BtHotelInfo)) {
			return false;
		}

		BtHotelInfo btHotelInfo = (BtHotelInfo)obj;

		long primaryKey = btHotelInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BtHotelInfoModelImpl btHotelInfoModelImpl = this;

		btHotelInfoModelImpl._originalBusinessTripPkId = btHotelInfoModelImpl._businessTripPkId;

		btHotelInfoModelImpl._setOriginalBusinessTripPkId = false;

		btHotelInfoModelImpl._originalTicketNo = btHotelInfoModelImpl._ticketNo;

		btHotelInfoModelImpl._originalTripType = btHotelInfoModelImpl._tripType;

		btHotelInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BtHotelInfo> toCacheModel() {
		BtHotelInfoCacheModel btHotelInfoCacheModel = new BtHotelInfoCacheModel();

		btHotelInfoCacheModel.btHotelInfoId = getBtHotelInfoId();

		btHotelInfoCacheModel.businessTripPkId = getBusinessTripPkId();

		btHotelInfoCacheModel.ticketNo = getTicketNo();

		String ticketNo = btHotelInfoCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			btHotelInfoCacheModel.ticketNo = null;
		}

		btHotelInfoCacheModel.city = getCity();

		String city = btHotelInfoCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			btHotelInfoCacheModel.city = null;
		}

		btHotelInfoCacheModel.cityType = getCityType();

		String cityType = btHotelInfoCacheModel.cityType;

		if ((cityType != null) && (cityType.length() == 0)) {
			btHotelInfoCacheModel.cityType = null;
		}

		btHotelInfoCacheModel.hotel = getHotel();

		String hotel = btHotelInfoCacheModel.hotel;

		if ((hotel != null) && (hotel.length() == 0)) {
			btHotelInfoCacheModel.hotel = null;
		}

		Date checkIn = getCheckIn();

		if (checkIn != null) {
			btHotelInfoCacheModel.checkIn = checkIn.getTime();
		}
		else {
			btHotelInfoCacheModel.checkIn = Long.MIN_VALUE;
		}

		Date checkOut = getCheckOut();

		if (checkOut != null) {
			btHotelInfoCacheModel.checkOut = checkOut.getTime();
		}
		else {
			btHotelInfoCacheModel.checkOut = Long.MIN_VALUE;
		}

		btHotelInfoCacheModel.roomCategory = getRoomCategory();

		String roomCategory = btHotelInfoCacheModel.roomCategory;

		if ((roomCategory != null) && (roomCategory.length() == 0)) {
			btHotelInfoCacheModel.roomCategory = null;
		}

		btHotelInfoCacheModel.price = getPrice();

		btHotelInfoCacheModel.currency = getCurrency();

		String currency = btHotelInfoCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			btHotelInfoCacheModel.currency = null;
		}

		btHotelInfoCacheModel.otherReasonInfo = getOtherReasonInfo();

		String otherReasonInfo = btHotelInfoCacheModel.otherReasonInfo;

		if ((otherReasonInfo != null) && (otherReasonInfo.length() == 0)) {
			btHotelInfoCacheModel.otherReasonInfo = null;
		}

		btHotelInfoCacheModel.isNotBookedFromTA = getIsNotBookedFromTA();

		btHotelInfoCacheModel.isOverBudget = getIsOverBudget();

		btHotelInfoCacheModel.othersSpecify = getOthersSpecify();

		String othersSpecify = btHotelInfoCacheModel.othersSpecify;

		if ((othersSpecify != null) && (othersSpecify.length() == 0)) {
			btHotelInfoCacheModel.othersSpecify = null;
		}

		btHotelInfoCacheModel.tripType = getTripType();

		String tripType = btHotelInfoCacheModel.tripType;

		if ((tripType != null) && (tripType.length() == 0)) {
			btHotelInfoCacheModel.tripType = null;
		}

		return btHotelInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{btHotelInfoId=");
		sb.append(getBtHotelInfoId());
		sb.append(", businessTripPkId=");
		sb.append(getBusinessTripPkId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", cityType=");
		sb.append(getCityType());
		sb.append(", hotel=");
		sb.append(getHotel());
		sb.append(", checkIn=");
		sb.append(getCheckIn());
		sb.append(", checkOut=");
		sb.append(getCheckOut());
		sb.append(", roomCategory=");
		sb.append(getRoomCategory());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", otherReasonInfo=");
		sb.append(getOtherReasonInfo());
		sb.append(", isNotBookedFromTA=");
		sb.append(getIsNotBookedFromTA());
		sb.append(", isOverBudget=");
		sb.append(getIsOverBudget());
		sb.append(", othersSpecify=");
		sb.append(getOthersSpecify());
		sb.append(", tripType=");
		sb.append(getTripType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.business.trip.model.BtHotelInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>btHotelInfoId</column-name><column-value><![CDATA[");
		sb.append(getBtHotelInfoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTripPkId</column-name><column-value><![CDATA[");
		sb.append(getBusinessTripPkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityType</column-name><column-value><![CDATA[");
		sb.append(getCityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hotel</column-name><column-value><![CDATA[");
		sb.append(getHotel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkIn</column-name><column-value><![CDATA[");
		sb.append(getCheckIn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkOut</column-name><column-value><![CDATA[");
		sb.append(getCheckOut());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomCategory</column-name><column-value><![CDATA[");
		sb.append(getRoomCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherReasonInfo</column-name><column-value><![CDATA[");
		sb.append(getOtherReasonInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isNotBookedFromTA</column-name><column-value><![CDATA[");
		sb.append(getIsNotBookedFromTA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isOverBudget</column-name><column-value><![CDATA[");
		sb.append(getIsOverBudget());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>othersSpecify</column-name><column-value><![CDATA[");
		sb.append(getOthersSpecify());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tripType</column-name><column-value><![CDATA[");
		sb.append(getTripType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BtHotelInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BtHotelInfo.class
		};
	private long _btHotelInfoId;
	private long _businessTripPkId;
	private long _originalBusinessTripPkId;
	private boolean _setOriginalBusinessTripPkId;
	private String _ticketNo;
	private String _originalTicketNo;
	private String _city;
	private String _cityType;
	private String _hotel;
	private Date _checkIn;
	private Date _checkOut;
	private String _roomCategory;
	private double _price;
	private String _currency;
	private String _otherReasonInfo;
	private boolean _isNotBookedFromTA;
	private int _isOverBudget;
	private String _othersSpecify;
	private String _tripType;
	private String _originalTripType;
	private long _columnBitmask;
	private BtHotelInfo _escapedModel;
}