/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.business.trip.model.impl;

import com.business.trip.model.BtTravelExpense;
import com.business.trip.model.BtTravelExpenseModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BtTravelExpense service. Represents a row in the &quot;vgcapon_BtTravelExpense&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.business.trip.model.BtTravelExpenseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BtTravelExpenseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BtTravelExpenseImpl
 * @see com.business.trip.model.BtTravelExpense
 * @see com.business.trip.model.BtTravelExpenseModel
 * @generated
 */
public class BtTravelExpenseModelImpl extends BaseModelImpl<BtTravelExpense>
	implements BtTravelExpenseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bt travel expense model instance should use the {@link com.business.trip.model.BtTravelExpense} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_BtTravelExpense";
	public static final Object[][] TABLE_COLUMNS = {
			{ "btTravelExpenseId", Types.BIGINT },
			{ "businessTripPkId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "travelDate", Types.VARCHAR },
			{ "departure", Types.VARCHAR },
			{ "arrival", Types.VARCHAR },
			{ "fromCity", Types.VARCHAR },
			{ "toCity", Types.VARCHAR },
			{ "isHasBreakfast", Types.BOOLEAN },
			{ "isHasLunch", Types.BOOLEAN },
			{ "isHasDinner", Types.BOOLEAN },
			{ "country", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "rateOfDma", Types.DOUBLE },
			{ "currency_", Types.VARCHAR },
			{ "allowance", Types.DOUBLE },
			{ "comments", Types.VARCHAR },
			{ "tripType", Types.VARCHAR },
			{ "allowanceRmb", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_BtTravelExpense (btTravelExpenseId LONG not null primary key,businessTripPkId LONG,ticketNo VARCHAR(75) null,travelDate VARCHAR(75) null,departure VARCHAR(75) null,arrival VARCHAR(75) null,fromCity VARCHAR(75) null,toCity VARCHAR(75) null,isHasBreakfast BOOLEAN,isHasLunch BOOLEAN,isHasDinner BOOLEAN,country VARCHAR(75) null,city VARCHAR(75) null,rateOfDma DOUBLE,currency_ VARCHAR(75) null,allowance DOUBLE,comments VARCHAR(512) null,tripType VARCHAR(75) null,allowanceRmb DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_BtTravelExpense";
	public static final String ORDER_BY_JPQL = " ORDER BY btTravelExpense.btTravelExpenseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_BtTravelExpense.btTravelExpenseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.business.trip.model.BtTravelExpense"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.business.trip.model.BtTravelExpense"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.business.trip.model.BtTravelExpense"),
			true);
	public static long BUSINESSTRIPPKID_COLUMN_BITMASK = 1L;
	public static long CURRENCY_COLUMN_BITMASK = 2L;
	public static long TICKETNO_COLUMN_BITMASK = 4L;
	public static long TRIPTYPE_COLUMN_BITMASK = 8L;
	public static long BTTRAVELEXPENSEID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.business.trip.model.BtTravelExpense"));

	public BtTravelExpenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _btTravelExpenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBtTravelExpenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _btTravelExpenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BtTravelExpense.class;
	}

	@Override
	public String getModelClassName() {
		return BtTravelExpense.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("btTravelExpenseId", getBtTravelExpenseId());
		attributes.put("businessTripPkId", getBusinessTripPkId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("travelDate", getTravelDate());
		attributes.put("departure", getDeparture());
		attributes.put("arrival", getArrival());
		attributes.put("fromCity", getFromCity());
		attributes.put("toCity", getToCity());
		attributes.put("isHasBreakfast", getIsHasBreakfast());
		attributes.put("isHasLunch", getIsHasLunch());
		attributes.put("isHasDinner", getIsHasDinner());
		attributes.put("country", getCountry());
		attributes.put("city", getCity());
		attributes.put("rateOfDma", getRateOfDma());
		attributes.put("currency", getCurrency());
		attributes.put("allowance", getAllowance());
		attributes.put("comments", getComments());
		attributes.put("tripType", getTripType());
		attributes.put("allowanceRmb", getAllowanceRmb());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long btTravelExpenseId = (Long)attributes.get("btTravelExpenseId");

		if (btTravelExpenseId != null) {
			setBtTravelExpenseId(btTravelExpenseId);
		}

		Long businessTripPkId = (Long)attributes.get("businessTripPkId");

		if (businessTripPkId != null) {
			setBusinessTripPkId(businessTripPkId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String travelDate = (String)attributes.get("travelDate");

		if (travelDate != null) {
			setTravelDate(travelDate);
		}

		String departure = (String)attributes.get("departure");

		if (departure != null) {
			setDeparture(departure);
		}

		String arrival = (String)attributes.get("arrival");

		if (arrival != null) {
			setArrival(arrival);
		}

		String fromCity = (String)attributes.get("fromCity");

		if (fromCity != null) {
			setFromCity(fromCity);
		}

		String toCity = (String)attributes.get("toCity");

		if (toCity != null) {
			setToCity(toCity);
		}

		Boolean isHasBreakfast = (Boolean)attributes.get("isHasBreakfast");

		if (isHasBreakfast != null) {
			setIsHasBreakfast(isHasBreakfast);
		}

		Boolean isHasLunch = (Boolean)attributes.get("isHasLunch");

		if (isHasLunch != null) {
			setIsHasLunch(isHasLunch);
		}

		Boolean isHasDinner = (Boolean)attributes.get("isHasDinner");

		if (isHasDinner != null) {
			setIsHasDinner(isHasDinner);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		Double rateOfDma = (Double)attributes.get("rateOfDma");

		if (rateOfDma != null) {
			setRateOfDma(rateOfDma);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		Double allowance = (Double)attributes.get("allowance");

		if (allowance != null) {
			setAllowance(allowance);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String tripType = (String)attributes.get("tripType");

		if (tripType != null) {
			setTripType(tripType);
		}

		Double allowanceRmb = (Double)attributes.get("allowanceRmb");

		if (allowanceRmb != null) {
			setAllowanceRmb(allowanceRmb);
		}
	}

	@Override
	public long getBtTravelExpenseId() {
		return _btTravelExpenseId;
	}

	@Override
	public void setBtTravelExpenseId(long btTravelExpenseId) {
		_btTravelExpenseId = btTravelExpenseId;
	}

	@Override
	public long getBusinessTripPkId() {
		return _businessTripPkId;
	}

	@Override
	public void setBusinessTripPkId(long businessTripPkId) {
		_columnBitmask |= BUSINESSTRIPPKID_COLUMN_BITMASK;

		if (!_setOriginalBusinessTripPkId) {
			_setOriginalBusinessTripPkId = true;

			_originalBusinessTripPkId = _businessTripPkId;
		}

		_businessTripPkId = businessTripPkId;
	}

	public long getOriginalBusinessTripPkId() {
		return _originalBusinessTripPkId;
	}

	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_columnBitmask |= TICKETNO_COLUMN_BITMASK;

		if (_originalTicketNo == null) {
			_originalTicketNo = _ticketNo;
		}

		_ticketNo = ticketNo;
	}

	public String getOriginalTicketNo() {
		return GetterUtil.getString(_originalTicketNo);
	}

	@Override
	public String getTravelDate() {
		if (_travelDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _travelDate;
		}
	}

	@Override
	public void setTravelDate(String travelDate) {
		_travelDate = travelDate;
	}

	@Override
	public String getDeparture() {
		if (_departure == null) {
			return StringPool.BLANK;
		}
		else {
			return _departure;
		}
	}

	@Override
	public void setDeparture(String departure) {
		_departure = departure;
	}

	@Override
	public String getArrival() {
		if (_arrival == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrival;
		}
	}

	@Override
	public void setArrival(String arrival) {
		_arrival = arrival;
	}

	@Override
	public String getFromCity() {
		if (_fromCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromCity;
		}
	}

	@Override
	public void setFromCity(String fromCity) {
		_fromCity = fromCity;
	}

	@Override
	public String getToCity() {
		if (_toCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _toCity;
		}
	}

	@Override
	public void setToCity(String toCity) {
		_toCity = toCity;
	}

	@Override
	public boolean getIsHasBreakfast() {
		return _isHasBreakfast;
	}

	@Override
	public boolean isIsHasBreakfast() {
		return _isHasBreakfast;
	}

	@Override
	public void setIsHasBreakfast(boolean isHasBreakfast) {
		_isHasBreakfast = isHasBreakfast;
	}

	@Override
	public boolean getIsHasLunch() {
		return _isHasLunch;
	}

	@Override
	public boolean isIsHasLunch() {
		return _isHasLunch;
	}

	@Override
	public void setIsHasLunch(boolean isHasLunch) {
		_isHasLunch = isHasLunch;
	}

	@Override
	public boolean getIsHasDinner() {
		return _isHasDinner;
	}

	@Override
	public boolean isIsHasDinner() {
		return _isHasDinner;
	}

	@Override
	public void setIsHasDinner(boolean isHasDinner) {
		_isHasDinner = isHasDinner;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public double getRateOfDma() {
		return _rateOfDma;
	}

	@Override
	public void setRateOfDma(double rateOfDma) {
		_rateOfDma = rateOfDma;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_columnBitmask |= CURRENCY_COLUMN_BITMASK;

		if (_originalCurrency == null) {
			_originalCurrency = _currency;
		}

		_currency = currency;
	}

	public String getOriginalCurrency() {
		return GetterUtil.getString(_originalCurrency);
	}

	@Override
	public double getAllowance() {
		return _allowance;
	}

	@Override
	public void setAllowance(double allowance) {
		_allowance = allowance;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public String getTripType() {
		if (_tripType == null) {
			return StringPool.BLANK;
		}
		else {
			return _tripType;
		}
	}

	@Override
	public void setTripType(String tripType) {
		_columnBitmask |= TRIPTYPE_COLUMN_BITMASK;

		if (_originalTripType == null) {
			_originalTripType = _tripType;
		}

		_tripType = tripType;
	}

	public String getOriginalTripType() {
		return GetterUtil.getString(_originalTripType);
	}

	@Override
	public double getAllowanceRmb() {
		return _allowanceRmb;
	}

	@Override
	public void setAllowanceRmb(double allowanceRmb) {
		_allowanceRmb = allowanceRmb;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BtTravelExpense.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BtTravelExpense toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BtTravelExpense)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BtTravelExpenseImpl btTravelExpenseImpl = new BtTravelExpenseImpl();

		btTravelExpenseImpl.setBtTravelExpenseId(getBtTravelExpenseId());
		btTravelExpenseImpl.setBusinessTripPkId(getBusinessTripPkId());
		btTravelExpenseImpl.setTicketNo(getTicketNo());
		btTravelExpenseImpl.setTravelDate(getTravelDate());
		btTravelExpenseImpl.setDeparture(getDeparture());
		btTravelExpenseImpl.setArrival(getArrival());
		btTravelExpenseImpl.setFromCity(getFromCity());
		btTravelExpenseImpl.setToCity(getToCity());
		btTravelExpenseImpl.setIsHasBreakfast(getIsHasBreakfast());
		btTravelExpenseImpl.setIsHasLunch(getIsHasLunch());
		btTravelExpenseImpl.setIsHasDinner(getIsHasDinner());
		btTravelExpenseImpl.setCountry(getCountry());
		btTravelExpenseImpl.setCity(getCity());
		btTravelExpenseImpl.setRateOfDma(getRateOfDma());
		btTravelExpenseImpl.setCurrency(getCurrency());
		btTravelExpenseImpl.setAllowance(getAllowance());
		btTravelExpenseImpl.setComments(getComments());
		btTravelExpenseImpl.setTripType(getTripType());
		btTravelExpenseImpl.setAllowanceRmb(getAllowanceRmb());

		btTravelExpenseImpl.resetOriginalValues();

		return btTravelExpenseImpl;
	}

	@Override
	public int compareTo(BtTravelExpense btTravelExpense) {
		long primaryKey = btTravelExpense.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BtTravelExpense)) {
			return false;
		}

		BtTravelExpense btTravelExpense = (BtTravelExpense)obj;

		long primaryKey = btTravelExpense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BtTravelExpenseModelImpl btTravelExpenseModelImpl = this;

		btTravelExpenseModelImpl._originalBusinessTripPkId = btTravelExpenseModelImpl._businessTripPkId;

		btTravelExpenseModelImpl._setOriginalBusinessTripPkId = false;

		btTravelExpenseModelImpl._originalTicketNo = btTravelExpenseModelImpl._ticketNo;

		btTravelExpenseModelImpl._originalCurrency = btTravelExpenseModelImpl._currency;

		btTravelExpenseModelImpl._originalTripType = btTravelExpenseModelImpl._tripType;

		btTravelExpenseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BtTravelExpense> toCacheModel() {
		BtTravelExpenseCacheModel btTravelExpenseCacheModel = new BtTravelExpenseCacheModel();

		btTravelExpenseCacheModel.btTravelExpenseId = getBtTravelExpenseId();

		btTravelExpenseCacheModel.businessTripPkId = getBusinessTripPkId();

		btTravelExpenseCacheModel.ticketNo = getTicketNo();

		String ticketNo = btTravelExpenseCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			btTravelExpenseCacheModel.ticketNo = null;
		}

		btTravelExpenseCacheModel.travelDate = getTravelDate();

		String travelDate = btTravelExpenseCacheModel.travelDate;

		if ((travelDate != null) && (travelDate.length() == 0)) {
			btTravelExpenseCacheModel.travelDate = null;
		}

		btTravelExpenseCacheModel.departure = getDeparture();

		String departure = btTravelExpenseCacheModel.departure;

		if ((departure != null) && (departure.length() == 0)) {
			btTravelExpenseCacheModel.departure = null;
		}

		btTravelExpenseCacheModel.arrival = getArrival();

		String arrival = btTravelExpenseCacheModel.arrival;

		if ((arrival != null) && (arrival.length() == 0)) {
			btTravelExpenseCacheModel.arrival = null;
		}

		btTravelExpenseCacheModel.fromCity = getFromCity();

		String fromCity = btTravelExpenseCacheModel.fromCity;

		if ((fromCity != null) && (fromCity.length() == 0)) {
			btTravelExpenseCacheModel.fromCity = null;
		}

		btTravelExpenseCacheModel.toCity = getToCity();

		String toCity = btTravelExpenseCacheModel.toCity;

		if ((toCity != null) && (toCity.length() == 0)) {
			btTravelExpenseCacheModel.toCity = null;
		}

		btTravelExpenseCacheModel.isHasBreakfast = getIsHasBreakfast();

		btTravelExpenseCacheModel.isHasLunch = getIsHasLunch();

		btTravelExpenseCacheModel.isHasDinner = getIsHasDinner();

		btTravelExpenseCacheModel.country = getCountry();

		String country = btTravelExpenseCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			btTravelExpenseCacheModel.country = null;
		}

		btTravelExpenseCacheModel.city = getCity();

		String city = btTravelExpenseCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			btTravelExpenseCacheModel.city = null;
		}

		btTravelExpenseCacheModel.rateOfDma = getRateOfDma();

		btTravelExpenseCacheModel.currency = getCurrency();

		String currency = btTravelExpenseCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			btTravelExpenseCacheModel.currency = null;
		}

		btTravelExpenseCacheModel.allowance = getAllowance();

		btTravelExpenseCacheModel.comments = getComments();

		String comments = btTravelExpenseCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			btTravelExpenseCacheModel.comments = null;
		}

		btTravelExpenseCacheModel.tripType = getTripType();

		String tripType = btTravelExpenseCacheModel.tripType;

		if ((tripType != null) && (tripType.length() == 0)) {
			btTravelExpenseCacheModel.tripType = null;
		}

		btTravelExpenseCacheModel.allowanceRmb = getAllowanceRmb();

		return btTravelExpenseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{btTravelExpenseId=");
		sb.append(getBtTravelExpenseId());
		sb.append(", businessTripPkId=");
		sb.append(getBusinessTripPkId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", travelDate=");
		sb.append(getTravelDate());
		sb.append(", departure=");
		sb.append(getDeparture());
		sb.append(", arrival=");
		sb.append(getArrival());
		sb.append(", fromCity=");
		sb.append(getFromCity());
		sb.append(", toCity=");
		sb.append(getToCity());
		sb.append(", isHasBreakfast=");
		sb.append(getIsHasBreakfast());
		sb.append(", isHasLunch=");
		sb.append(getIsHasLunch());
		sb.append(", isHasDinner=");
		sb.append(getIsHasDinner());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", rateOfDma=");
		sb.append(getRateOfDma());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", allowance=");
		sb.append(getAllowance());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", tripType=");
		sb.append(getTripType());
		sb.append(", allowanceRmb=");
		sb.append(getAllowanceRmb());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.business.trip.model.BtTravelExpense");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>btTravelExpenseId</column-name><column-value><![CDATA[");
		sb.append(getBtTravelExpenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTripPkId</column-name><column-value><![CDATA[");
		sb.append(getBusinessTripPkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>travelDate</column-name><column-value><![CDATA[");
		sb.append(getTravelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departure</column-name><column-value><![CDATA[");
		sb.append(getDeparture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrival</column-name><column-value><![CDATA[");
		sb.append(getArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromCity</column-name><column-value><![CDATA[");
		sb.append(getFromCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toCity</column-name><column-value><![CDATA[");
		sb.append(getToCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isHasBreakfast</column-name><column-value><![CDATA[");
		sb.append(getIsHasBreakfast());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isHasLunch</column-name><column-value><![CDATA[");
		sb.append(getIsHasLunch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isHasDinner</column-name><column-value><![CDATA[");
		sb.append(getIsHasDinner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rateOfDma</column-name><column-value><![CDATA[");
		sb.append(getRateOfDma());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowance</column-name><column-value><![CDATA[");
		sb.append(getAllowance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tripType</column-name><column-value><![CDATA[");
		sb.append(getTripType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowanceRmb</column-name><column-value><![CDATA[");
		sb.append(getAllowanceRmb());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BtTravelExpense.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BtTravelExpense.class
		};
	private long _btTravelExpenseId;
	private long _businessTripPkId;
	private long _originalBusinessTripPkId;
	private boolean _setOriginalBusinessTripPkId;
	private String _ticketNo;
	private String _originalTicketNo;
	private String _travelDate;
	private String _departure;
	private String _arrival;
	private String _fromCity;
	private String _toCity;
	private boolean _isHasBreakfast;
	private boolean _isHasLunch;
	private boolean _isHasDinner;
	private String _country;
	private String _city;
	private double _rateOfDma;
	private String _currency;
	private String _originalCurrency;
	private double _allowance;
	private String _comments;
	private String _tripType;
	private String _originalTripType;
	private double _allowanceRmb;
	private long _columnBitmask;
	private BtTravelExpense _escapedModel;
}