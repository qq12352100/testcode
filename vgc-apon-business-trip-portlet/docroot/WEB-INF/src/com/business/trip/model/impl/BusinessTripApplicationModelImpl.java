/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.business.trip.model.impl;

import com.business.trip.model.BusinessTripApplication;
import com.business.trip.model.BusinessTripApplicationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BusinessTripApplication service. Represents a row in the &quot;VgcApon_BtApplication&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.business.trip.model.BusinessTripApplicationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusinessTripApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BusinessTripApplicationImpl
 * @see com.business.trip.model.BusinessTripApplication
 * @see com.business.trip.model.BusinessTripApplicationModel
 * @generated
 */
public class BusinessTripApplicationModelImpl extends BaseModelImpl<BusinessTripApplication>
	implements BusinessTripApplicationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a business trip application model instance should use the {@link com.business.trip.model.BusinessTripApplication} interface instead.
	 */
	public static final String TABLE_NAME = "VgcApon_BtApplication";
	public static final Object[][] TABLE_COLUMNS = {
			{ "businessTripApplicationId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "processType", Types.VARCHAR },
			{ "subType", Types.VARCHAR },
			{ "printName", Types.VARCHAR },
			{ "staffCode", Types.BIGINT },
			{ "companyName", Types.VARCHAR },
			{ "division", Types.VARCHAR },
			{ "department", Types.VARCHAR },
			{ "costCenter", Types.VARCHAR },
			{ "personalID", Types.VARCHAR },
			{ "passportNo", Types.VARCHAR },
			{ "officePhone", Types.VARCHAR },
			{ "mobilePhone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "officeSite", Types.VARCHAR },
			{ "approverId", Types.BIGINT },
			{ "approverName", Types.VARCHAR },
			{ "evpId", Types.BIGINT },
			{ "evpName", Types.VARCHAR },
			{ "isCrossDepartment", Types.BOOLEAN },
			{ "targetDepartmentId", Types.BIGINT },
			{ "targetDepartmentName", Types.VARCHAR },
			{ "targetCostCenter", Types.VARCHAR },
			{ "targetDepartmentApproverId", Types.BIGINT },
			{ "targetDepartmentApproverName", Types.VARCHAR },
			{ "tripType", Types.INTEGER },
			{ "departureDate", Types.TIMESTAMP },
			{ "returnDate", Types.TIMESTAMP },
			{ "purposeOfTheTrip", Types.VARCHAR },
			{ "visitCountriesCities", Types.VARCHAR },
			{ "advancePayment", Types.DOUBLE },
			{ "currency_", Types.VARCHAR },
			{ "paymentMethods", Types.VARCHAR },
			{ "totalCostRmb", Types.DOUBLE },
			{ "totalCostEur", Types.DOUBLE },
			{ "hotelTotalCostRmb", Types.DOUBLE },
			{ "hotelTotalCostEur", Types.DOUBLE },
			{ "carRentalTotalCostRmb", Types.DOUBLE },
			{ "carRentalTotalCostEur", Types.DOUBLE },
			{ "remark", Types.VARCHAR },
			{ "otherEmails", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "sapStatus", Types.INTEGER },
			{ "sapComments", Types.VARCHAR },
			{ "sapDocumentId", Types.VARCHAR },
			{ "sapCertificateNo", Types.VARCHAR },
			{ "sapCompany", Types.VARCHAR },
			{ "sapYear", Types.VARCHAR },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "isApplicantAgent", Types.BOOLEAN },
			{ "isApproverAgent", Types.BOOLEAN },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "submittedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table VgcApon_BtApplication (businessTripApplicationId LONG not null primary key,ticketNo VARCHAR(75) null,processType VARCHAR(75) null,subType VARCHAR(75) null,printName VARCHAR(75) null,staffCode LONG,companyName VARCHAR(75) null,division VARCHAR(75) null,department VARCHAR(75) null,costCenter VARCHAR(75) null,personalID VARCHAR(75) null,passportNo VARCHAR(75) null,officePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,email VARCHAR(75) null,officeSite VARCHAR(75) null,approverId LONG,approverName VARCHAR(75) null,evpId LONG,evpName VARCHAR(75) null,isCrossDepartment BOOLEAN,targetDepartmentId LONG,targetDepartmentName VARCHAR(75) null,targetCostCenter VARCHAR(75) null,targetDepartmentApproverId LONG,targetDepartmentApproverName VARCHAR(75) null,tripType INTEGER,departureDate DATE null,returnDate DATE null,purposeOfTheTrip VARCHAR(512) null,visitCountriesCities VARCHAR(75) null,advancePayment DOUBLE,currency_ VARCHAR(75) null,paymentMethods VARCHAR(75) null,totalCostRmb DOUBLE,totalCostEur DOUBLE,hotelTotalCostRmb DOUBLE,hotelTotalCostEur DOUBLE,carRentalTotalCostRmb DOUBLE,carRentalTotalCostEur DOUBLE,remark VARCHAR(512) null,otherEmails VARCHAR(1024) null,status INTEGER,sapStatus INTEGER,sapComments VARCHAR(1024) null,sapDocumentId VARCHAR(512) null,sapCertificateNo VARCHAR(75) null,sapCompany VARCHAR(75) null,sapYear VARCHAR(75) null,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,isApplicantAgent BOOLEAN,isApproverAgent BOOLEAN,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,submittedDate DATE null,companyId LONG)";
	public static final String TABLE_SQL_DROP = "drop table VgcApon_BtApplication";
	public static final String ORDER_BY_JPQL = " ORDER BY businessTripApplication.businessTripApplicationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY VgcApon_BtApplication.businessTripApplicationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.business.trip.model.BusinessTripApplication"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.business.trip.model.BusinessTripApplication"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.business.trip.model.BusinessTripApplication"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long TICKETNO_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long BUSINESSTRIPAPPLICATIONID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.business.trip.model.BusinessTripApplication"));

	public BusinessTripApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _businessTripApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBusinessTripApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _businessTripApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BusinessTripApplication.class;
	}

	@Override
	public String getModelClassName() {
		return BusinessTripApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("businessTripApplicationId",
			getBusinessTripApplicationId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("processType", getProcessType());
		attributes.put("subType", getSubType());
		attributes.put("printName", getPrintName());
		attributes.put("staffCode", getStaffCode());
		attributes.put("companyName", getCompanyName());
		attributes.put("division", getDivision());
		attributes.put("department", getDepartment());
		attributes.put("costCenter", getCostCenter());
		attributes.put("personalID", getPersonalID());
		attributes.put("passportNo", getPassportNo());
		attributes.put("officePhone", getOfficePhone());
		attributes.put("mobilePhone", getMobilePhone());
		attributes.put("email", getEmail());
		attributes.put("officeSite", getOfficeSite());
		attributes.put("approverId", getApproverId());
		attributes.put("approverName", getApproverName());
		attributes.put("evpId", getEvpId());
		attributes.put("evpName", getEvpName());
		attributes.put("isCrossDepartment", getIsCrossDepartment());
		attributes.put("targetDepartmentId", getTargetDepartmentId());
		attributes.put("targetDepartmentName", getTargetDepartmentName());
		attributes.put("targetCostCenter", getTargetCostCenter());
		attributes.put("targetDepartmentApproverId",
			getTargetDepartmentApproverId());
		attributes.put("targetDepartmentApproverName",
			getTargetDepartmentApproverName());
		attributes.put("tripType", getTripType());
		attributes.put("departureDate", getDepartureDate());
		attributes.put("returnDate", getReturnDate());
		attributes.put("purposeOfTheTrip", getPurposeOfTheTrip());
		attributes.put("visitCountriesCities", getVisitCountriesCities());
		attributes.put("advancePayment", getAdvancePayment());
		attributes.put("currency", getCurrency());
		attributes.put("paymentMethods", getPaymentMethods());
		attributes.put("totalCostRmb", getTotalCostRmb());
		attributes.put("totalCostEur", getTotalCostEur());
		attributes.put("hotelTotalCostRmb", getHotelTotalCostRmb());
		attributes.put("hotelTotalCostEur", getHotelTotalCostEur());
		attributes.put("carRentalTotalCostRmb", getCarRentalTotalCostRmb());
		attributes.put("carRentalTotalCostEur", getCarRentalTotalCostEur());
		attributes.put("remark", getRemark());
		attributes.put("otherEmails", getOtherEmails());
		attributes.put("status", getStatus());
		attributes.put("sapStatus", getSapStatus());
		attributes.put("sapComments", getSapComments());
		attributes.put("sapDocumentId", getSapDocumentId());
		attributes.put("sapCertificateNo", getSapCertificateNo());
		attributes.put("sapCompany", getSapCompany());
		attributes.put("sapYear", getSapYear());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("isApplicantAgent", getIsApplicantAgent());
		attributes.put("isApproverAgent", getIsApproverAgent());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("submittedDate", getSubmittedDate());
		attributes.put("companyId", getCompanyId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long businessTripApplicationId = (Long)attributes.get(
				"businessTripApplicationId");

		if (businessTripApplicationId != null) {
			setBusinessTripApplicationId(businessTripApplicationId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		String subType = (String)attributes.get("subType");

		if (subType != null) {
			setSubType(subType);
		}

		String printName = (String)attributes.get("printName");

		if (printName != null) {
			setPrintName(printName);
		}

		Long staffCode = (Long)attributes.get("staffCode");

		if (staffCode != null) {
			setStaffCode(staffCode);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		String costCenter = (String)attributes.get("costCenter");

		if (costCenter != null) {
			setCostCenter(costCenter);
		}

		String personalID = (String)attributes.get("personalID");

		if (personalID != null) {
			setPersonalID(personalID);
		}

		String passportNo = (String)attributes.get("passportNo");

		if (passportNo != null) {
			setPassportNo(passportNo);
		}

		String officePhone = (String)attributes.get("officePhone");

		if (officePhone != null) {
			setOfficePhone(officePhone);
		}

		String mobilePhone = (String)attributes.get("mobilePhone");

		if (mobilePhone != null) {
			setMobilePhone(mobilePhone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String officeSite = (String)attributes.get("officeSite");

		if (officeSite != null) {
			setOfficeSite(officeSite);
		}

		Long approverId = (Long)attributes.get("approverId");

		if (approverId != null) {
			setApproverId(approverId);
		}

		String approverName = (String)attributes.get("approverName");

		if (approverName != null) {
			setApproverName(approverName);
		}

		Long evpId = (Long)attributes.get("evpId");

		if (evpId != null) {
			setEvpId(evpId);
		}

		String evpName = (String)attributes.get("evpName");

		if (evpName != null) {
			setEvpName(evpName);
		}

		Boolean isCrossDepartment = (Boolean)attributes.get("isCrossDepartment");

		if (isCrossDepartment != null) {
			setIsCrossDepartment(isCrossDepartment);
		}

		Long targetDepartmentId = (Long)attributes.get("targetDepartmentId");

		if (targetDepartmentId != null) {
			setTargetDepartmentId(targetDepartmentId);
		}

		String targetDepartmentName = (String)attributes.get(
				"targetDepartmentName");

		if (targetDepartmentName != null) {
			setTargetDepartmentName(targetDepartmentName);
		}

		String targetCostCenter = (String)attributes.get("targetCostCenter");

		if (targetCostCenter != null) {
			setTargetCostCenter(targetCostCenter);
		}

		Long targetDepartmentApproverId = (Long)attributes.get(
				"targetDepartmentApproverId");

		if (targetDepartmentApproverId != null) {
			setTargetDepartmentApproverId(targetDepartmentApproverId);
		}

		String targetDepartmentApproverName = (String)attributes.get(
				"targetDepartmentApproverName");

		if (targetDepartmentApproverName != null) {
			setTargetDepartmentApproverName(targetDepartmentApproverName);
		}

		Integer tripType = (Integer)attributes.get("tripType");

		if (tripType != null) {
			setTripType(tripType);
		}

		Date departureDate = (Date)attributes.get("departureDate");

		if (departureDate != null) {
			setDepartureDate(departureDate);
		}

		Date returnDate = (Date)attributes.get("returnDate");

		if (returnDate != null) {
			setReturnDate(returnDate);
		}

		String purposeOfTheTrip = (String)attributes.get("purposeOfTheTrip");

		if (purposeOfTheTrip != null) {
			setPurposeOfTheTrip(purposeOfTheTrip);
		}

		String visitCountriesCities = (String)attributes.get(
				"visitCountriesCities");

		if (visitCountriesCities != null) {
			setVisitCountriesCities(visitCountriesCities);
		}

		Double advancePayment = (Double)attributes.get("advancePayment");

		if (advancePayment != null) {
			setAdvancePayment(advancePayment);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String paymentMethods = (String)attributes.get("paymentMethods");

		if (paymentMethods != null) {
			setPaymentMethods(paymentMethods);
		}

		Double totalCostRmb = (Double)attributes.get("totalCostRmb");

		if (totalCostRmb != null) {
			setTotalCostRmb(totalCostRmb);
		}

		Double totalCostEur = (Double)attributes.get("totalCostEur");

		if (totalCostEur != null) {
			setTotalCostEur(totalCostEur);
		}

		Double hotelTotalCostRmb = (Double)attributes.get("hotelTotalCostRmb");

		if (hotelTotalCostRmb != null) {
			setHotelTotalCostRmb(hotelTotalCostRmb);
		}

		Double hotelTotalCostEur = (Double)attributes.get("hotelTotalCostEur");

		if (hotelTotalCostEur != null) {
			setHotelTotalCostEur(hotelTotalCostEur);
		}

		Double carRentalTotalCostRmb = (Double)attributes.get(
				"carRentalTotalCostRmb");

		if (carRentalTotalCostRmb != null) {
			setCarRentalTotalCostRmb(carRentalTotalCostRmb);
		}

		Double carRentalTotalCostEur = (Double)attributes.get(
				"carRentalTotalCostEur");

		if (carRentalTotalCostEur != null) {
			setCarRentalTotalCostEur(carRentalTotalCostEur);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}

		String otherEmails = (String)attributes.get("otherEmails");

		if (otherEmails != null) {
			setOtherEmails(otherEmails);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer sapStatus = (Integer)attributes.get("sapStatus");

		if (sapStatus != null) {
			setSapStatus(sapStatus);
		}

		String sapComments = (String)attributes.get("sapComments");

		if (sapComments != null) {
			setSapComments(sapComments);
		}

		String sapDocumentId = (String)attributes.get("sapDocumentId");

		if (sapDocumentId != null) {
			setSapDocumentId(sapDocumentId);
		}

		String sapCertificateNo = (String)attributes.get("sapCertificateNo");

		if (sapCertificateNo != null) {
			setSapCertificateNo(sapCertificateNo);
		}

		String sapCompany = (String)attributes.get("sapCompany");

		if (sapCompany != null) {
			setSapCompany(sapCompany);
		}

		String sapYear = (String)attributes.get("sapYear");

		if (sapYear != null) {
			setSapYear(sapYear);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Boolean isApplicantAgent = (Boolean)attributes.get("isApplicantAgent");

		if (isApplicantAgent != null) {
			setIsApplicantAgent(isApplicantAgent);
		}

		Boolean isApproverAgent = (Boolean)attributes.get("isApproverAgent");

		if (isApproverAgent != null) {
			setIsApproverAgent(isApproverAgent);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date submittedDate = (Date)attributes.get("submittedDate");

		if (submittedDate != null) {
			setSubmittedDate(submittedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}
	}

	@Override
	public long getBusinessTripApplicationId() {
		return _businessTripApplicationId;
	}

	@Override
	public void setBusinessTripApplicationId(long businessTripApplicationId) {
		_businessTripApplicationId = businessTripApplicationId;
	}

	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_columnBitmask |= TICKETNO_COLUMN_BITMASK;

		if (_originalTicketNo == null) {
			_originalTicketNo = _ticketNo;
		}

		_ticketNo = ticketNo;
	}

	public String getOriginalTicketNo() {
		return GetterUtil.getString(_originalTicketNo);
	}

	@Override
	public String getProcessType() {
		if (_processType == null) {
			return StringPool.BLANK;
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_processType = processType;
	}

	@Override
	public String getSubType() {
		if (_subType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subType;
		}
	}

	@Override
	public void setSubType(String subType) {
		_subType = subType;
	}

	@Override
	public String getPrintName() {
		if (_printName == null) {
			return StringPool.BLANK;
		}
		else {
			return _printName;
		}
	}

	@Override
	public void setPrintName(String printName) {
		_printName = printName;
	}

	@Override
	public long getStaffCode() {
		return _staffCode;
	}

	@Override
	public void setStaffCode(long staffCode) {
		_staffCode = staffCode;
	}

	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@Override
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@Override
	public String getCostCenter() {
		if (_costCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _costCenter;
		}
	}

	@Override
	public void setCostCenter(String costCenter) {
		_costCenter = costCenter;
	}

	@Override
	public String getPersonalID() {
		if (_personalID == null) {
			return StringPool.BLANK;
		}
		else {
			return _personalID;
		}
	}

	@Override
	public void setPersonalID(String personalID) {
		_personalID = personalID;
	}

	@Override
	public String getPassportNo() {
		if (_passportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _passportNo;
		}
	}

	@Override
	public void setPassportNo(String passportNo) {
		_passportNo = passportNo;
	}

	@Override
	public String getOfficePhone() {
		if (_officePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _officePhone;
		}
	}

	@Override
	public void setOfficePhone(String officePhone) {
		_officePhone = officePhone;
	}

	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getOfficeSite() {
		if (_officeSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _officeSite;
		}
	}

	@Override
	public void setOfficeSite(String officeSite) {
		_officeSite = officeSite;
	}

	@Override
	public long getApproverId() {
		return _approverId;
	}

	@Override
	public void setApproverId(long approverId) {
		_approverId = approverId;
	}

	@Override
	public String getApproverName() {
		if (_approverName == null) {
			return StringPool.BLANK;
		}
		else {
			return _approverName;
		}
	}

	@Override
	public void setApproverName(String approverName) {
		_approverName = approverName;
	}

	@Override
	public long getEvpId() {
		return _evpId;
	}

	@Override
	public void setEvpId(long evpId) {
		_evpId = evpId;
	}

	@Override
	public String getEvpName() {
		if (_evpName == null) {
			return StringPool.BLANK;
		}
		else {
			return _evpName;
		}
	}

	@Override
	public void setEvpName(String evpName) {
		_evpName = evpName;
	}

	@Override
	public boolean getIsCrossDepartment() {
		return _isCrossDepartment;
	}

	@Override
	public boolean isIsCrossDepartment() {
		return _isCrossDepartment;
	}

	@Override
	public void setIsCrossDepartment(boolean isCrossDepartment) {
		_isCrossDepartment = isCrossDepartment;
	}

	@Override
	public long getTargetDepartmentId() {
		return _targetDepartmentId;
	}

	@Override
	public void setTargetDepartmentId(long targetDepartmentId) {
		_targetDepartmentId = targetDepartmentId;
	}

	@Override
	public String getTargetDepartmentName() {
		if (_targetDepartmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetDepartmentName;
		}
	}

	@Override
	public void setTargetDepartmentName(String targetDepartmentName) {
		_targetDepartmentName = targetDepartmentName;
	}

	@Override
	public String getTargetCostCenter() {
		if (_targetCostCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetCostCenter;
		}
	}

	@Override
	public void setTargetCostCenter(String targetCostCenter) {
		_targetCostCenter = targetCostCenter;
	}

	@Override
	public long getTargetDepartmentApproverId() {
		return _targetDepartmentApproverId;
	}

	@Override
	public void setTargetDepartmentApproverId(long targetDepartmentApproverId) {
		_targetDepartmentApproverId = targetDepartmentApproverId;
	}

	@Override
	public String getTargetDepartmentApproverName() {
		if (_targetDepartmentApproverName == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetDepartmentApproverName;
		}
	}

	@Override
	public void setTargetDepartmentApproverName(
		String targetDepartmentApproverName) {
		_targetDepartmentApproverName = targetDepartmentApproverName;
	}

	@Override
	public int getTripType() {
		return _tripType;
	}

	@Override
	public void setTripType(int tripType) {
		_tripType = tripType;
	}

	@Override
	public Date getDepartureDate() {
		return _departureDate;
	}

	@Override
	public void setDepartureDate(Date departureDate) {
		_departureDate = departureDate;
	}

	@Override
	public Date getReturnDate() {
		return _returnDate;
	}

	@Override
	public void setReturnDate(Date returnDate) {
		_returnDate = returnDate;
	}

	@Override
	public String getPurposeOfTheTrip() {
		if (_purposeOfTheTrip == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeOfTheTrip;
		}
	}

	@Override
	public void setPurposeOfTheTrip(String purposeOfTheTrip) {
		_purposeOfTheTrip = purposeOfTheTrip;
	}

	@Override
	public String getVisitCountriesCities() {
		if (_visitCountriesCities == null) {
			return StringPool.BLANK;
		}
		else {
			return _visitCountriesCities;
		}
	}

	@Override
	public void setVisitCountriesCities(String visitCountriesCities) {
		_visitCountriesCities = visitCountriesCities;
	}

	@Override
	public double getAdvancePayment() {
		return _advancePayment;
	}

	@Override
	public void setAdvancePayment(double advancePayment) {
		_advancePayment = advancePayment;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public String getPaymentMethods() {
		if (_paymentMethods == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentMethods;
		}
	}

	@Override
	public void setPaymentMethods(String paymentMethods) {
		_paymentMethods = paymentMethods;
	}

	@Override
	public double getTotalCostRmb() {
		return _totalCostRmb;
	}

	@Override
	public void setTotalCostRmb(double totalCostRmb) {
		_totalCostRmb = totalCostRmb;
	}

	@Override
	public double getTotalCostEur() {
		return _totalCostEur;
	}

	@Override
	public void setTotalCostEur(double totalCostEur) {
		_totalCostEur = totalCostEur;
	}

	@Override
	public double getHotelTotalCostRmb() {
		return _hotelTotalCostRmb;
	}

	@Override
	public void setHotelTotalCostRmb(double hotelTotalCostRmb) {
		_hotelTotalCostRmb = hotelTotalCostRmb;
	}

	@Override
	public double getHotelTotalCostEur() {
		return _hotelTotalCostEur;
	}

	@Override
	public void setHotelTotalCostEur(double hotelTotalCostEur) {
		_hotelTotalCostEur = hotelTotalCostEur;
	}

	@Override
	public double getCarRentalTotalCostRmb() {
		return _carRentalTotalCostRmb;
	}

	@Override
	public void setCarRentalTotalCostRmb(double carRentalTotalCostRmb) {
		_carRentalTotalCostRmb = carRentalTotalCostRmb;
	}

	@Override
	public double getCarRentalTotalCostEur() {
		return _carRentalTotalCostEur;
	}

	@Override
	public void setCarRentalTotalCostEur(double carRentalTotalCostEur) {
		_carRentalTotalCostEur = carRentalTotalCostEur;
	}

	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	@Override
	public String getOtherEmails() {
		if (_otherEmails == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherEmails;
		}
	}

	@Override
	public void setOtherEmails(String otherEmails) {
		_otherEmails = otherEmails;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public int getSapStatus() {
		return _sapStatus;
	}

	@Override
	public void setSapStatus(int sapStatus) {
		_sapStatus = sapStatus;
	}

	@Override
	public String getSapComments() {
		if (_sapComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _sapComments;
		}
	}

	@Override
	public void setSapComments(String sapComments) {
		_sapComments = sapComments;
	}

	@Override
	public String getSapDocumentId() {
		if (_sapDocumentId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sapDocumentId;
		}
	}

	@Override
	public void setSapDocumentId(String sapDocumentId) {
		_sapDocumentId = sapDocumentId;
	}

	@Override
	public String getSapCertificateNo() {
		if (_sapCertificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sapCertificateNo;
		}
	}

	@Override
	public void setSapCertificateNo(String sapCertificateNo) {
		_sapCertificateNo = sapCertificateNo;
	}

	@Override
	public String getSapCompany() {
		if (_sapCompany == null) {
			return StringPool.BLANK;
		}
		else {
			return _sapCompany;
		}
	}

	@Override
	public void setSapCompany(String sapCompany) {
		_sapCompany = sapCompany;
	}

	@Override
	public String getSapYear() {
		if (_sapYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _sapYear;
		}
	}

	@Override
	public void setSapYear(String sapYear) {
		_sapYear = sapYear;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public boolean getIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public boolean isIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public void setIsApplicantAgent(boolean isApplicantAgent) {
		_isApplicantAgent = isApplicantAgent;
	}

	@Override
	public boolean getIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public boolean isIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public void setIsApproverAgent(boolean isApproverAgent) {
		_isApproverAgent = isApproverAgent;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BusinessTripApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BusinessTripApplication toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BusinessTripApplication)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BusinessTripApplicationImpl businessTripApplicationImpl = new BusinessTripApplicationImpl();

		businessTripApplicationImpl.setBusinessTripApplicationId(getBusinessTripApplicationId());
		businessTripApplicationImpl.setTicketNo(getTicketNo());
		businessTripApplicationImpl.setProcessType(getProcessType());
		businessTripApplicationImpl.setSubType(getSubType());
		businessTripApplicationImpl.setPrintName(getPrintName());
		businessTripApplicationImpl.setStaffCode(getStaffCode());
		businessTripApplicationImpl.setCompanyName(getCompanyName());
		businessTripApplicationImpl.setDivision(getDivision());
		businessTripApplicationImpl.setDepartment(getDepartment());
		businessTripApplicationImpl.setCostCenter(getCostCenter());
		businessTripApplicationImpl.setPersonalID(getPersonalID());
		businessTripApplicationImpl.setPassportNo(getPassportNo());
		businessTripApplicationImpl.setOfficePhone(getOfficePhone());
		businessTripApplicationImpl.setMobilePhone(getMobilePhone());
		businessTripApplicationImpl.setEmail(getEmail());
		businessTripApplicationImpl.setOfficeSite(getOfficeSite());
		businessTripApplicationImpl.setApproverId(getApproverId());
		businessTripApplicationImpl.setApproverName(getApproverName());
		businessTripApplicationImpl.setEvpId(getEvpId());
		businessTripApplicationImpl.setEvpName(getEvpName());
		businessTripApplicationImpl.setIsCrossDepartment(getIsCrossDepartment());
		businessTripApplicationImpl.setTargetDepartmentId(getTargetDepartmentId());
		businessTripApplicationImpl.setTargetDepartmentName(getTargetDepartmentName());
		businessTripApplicationImpl.setTargetCostCenter(getTargetCostCenter());
		businessTripApplicationImpl.setTargetDepartmentApproverId(getTargetDepartmentApproverId());
		businessTripApplicationImpl.setTargetDepartmentApproverName(getTargetDepartmentApproverName());
		businessTripApplicationImpl.setTripType(getTripType());
		businessTripApplicationImpl.setDepartureDate(getDepartureDate());
		businessTripApplicationImpl.setReturnDate(getReturnDate());
		businessTripApplicationImpl.setPurposeOfTheTrip(getPurposeOfTheTrip());
		businessTripApplicationImpl.setVisitCountriesCities(getVisitCountriesCities());
		businessTripApplicationImpl.setAdvancePayment(getAdvancePayment());
		businessTripApplicationImpl.setCurrency(getCurrency());
		businessTripApplicationImpl.setPaymentMethods(getPaymentMethods());
		businessTripApplicationImpl.setTotalCostRmb(getTotalCostRmb());
		businessTripApplicationImpl.setTotalCostEur(getTotalCostEur());
		businessTripApplicationImpl.setHotelTotalCostRmb(getHotelTotalCostRmb());
		businessTripApplicationImpl.setHotelTotalCostEur(getHotelTotalCostEur());
		businessTripApplicationImpl.setCarRentalTotalCostRmb(getCarRentalTotalCostRmb());
		businessTripApplicationImpl.setCarRentalTotalCostEur(getCarRentalTotalCostEur());
		businessTripApplicationImpl.setRemark(getRemark());
		businessTripApplicationImpl.setOtherEmails(getOtherEmails());
		businessTripApplicationImpl.setStatus(getStatus());
		businessTripApplicationImpl.setSapStatus(getSapStatus());
		businessTripApplicationImpl.setSapComments(getSapComments());
		businessTripApplicationImpl.setSapDocumentId(getSapDocumentId());
		businessTripApplicationImpl.setSapCertificateNo(getSapCertificateNo());
		businessTripApplicationImpl.setSapCompany(getSapCompany());
		businessTripApplicationImpl.setSapYear(getSapYear());
		businessTripApplicationImpl.setStatusByUserId(getStatusByUserId());
		businessTripApplicationImpl.setStatusByUserName(getStatusByUserName());
		businessTripApplicationImpl.setStatusDate(getStatusDate());
		businessTripApplicationImpl.setIsApplicantAgent(getIsApplicantAgent());
		businessTripApplicationImpl.setIsApproverAgent(getIsApproverAgent());
		businessTripApplicationImpl.setGroupId(getGroupId());
		businessTripApplicationImpl.setUserId(getUserId());
		businessTripApplicationImpl.setUserName(getUserName());
		businessTripApplicationImpl.setCreateDate(getCreateDate());
		businessTripApplicationImpl.setModifiedDate(getModifiedDate());
		businessTripApplicationImpl.setSubmittedDate(getSubmittedDate());
		businessTripApplicationImpl.setCompanyId(getCompanyId());

		businessTripApplicationImpl.resetOriginalValues();

		return businessTripApplicationImpl;
	}

	@Override
	public int compareTo(BusinessTripApplication businessTripApplication) {
		long primaryKey = businessTripApplication.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BusinessTripApplication)) {
			return false;
		}

		BusinessTripApplication businessTripApplication = (BusinessTripApplication)obj;

		long primaryKey = businessTripApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BusinessTripApplicationModelImpl businessTripApplicationModelImpl = this;

		businessTripApplicationModelImpl._originalTicketNo = businessTripApplicationModelImpl._ticketNo;

		businessTripApplicationModelImpl._originalStatus = businessTripApplicationModelImpl._status;

		businessTripApplicationModelImpl._setOriginalStatus = false;

		businessTripApplicationModelImpl._originalUserId = businessTripApplicationModelImpl._userId;

		businessTripApplicationModelImpl._setOriginalUserId = false;

		businessTripApplicationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BusinessTripApplication> toCacheModel() {
		BusinessTripApplicationCacheModel businessTripApplicationCacheModel = new BusinessTripApplicationCacheModel();

		businessTripApplicationCacheModel.businessTripApplicationId = getBusinessTripApplicationId();

		businessTripApplicationCacheModel.ticketNo = getTicketNo();

		String ticketNo = businessTripApplicationCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			businessTripApplicationCacheModel.ticketNo = null;
		}

		businessTripApplicationCacheModel.processType = getProcessType();

		String processType = businessTripApplicationCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			businessTripApplicationCacheModel.processType = null;
		}

		businessTripApplicationCacheModel.subType = getSubType();

		String subType = businessTripApplicationCacheModel.subType;

		if ((subType != null) && (subType.length() == 0)) {
			businessTripApplicationCacheModel.subType = null;
		}

		businessTripApplicationCacheModel.printName = getPrintName();

		String printName = businessTripApplicationCacheModel.printName;

		if ((printName != null) && (printName.length() == 0)) {
			businessTripApplicationCacheModel.printName = null;
		}

		businessTripApplicationCacheModel.staffCode = getStaffCode();

		businessTripApplicationCacheModel.companyName = getCompanyName();

		String companyName = businessTripApplicationCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			businessTripApplicationCacheModel.companyName = null;
		}

		businessTripApplicationCacheModel.division = getDivision();

		String division = businessTripApplicationCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			businessTripApplicationCacheModel.division = null;
		}

		businessTripApplicationCacheModel.department = getDepartment();

		String department = businessTripApplicationCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			businessTripApplicationCacheModel.department = null;
		}

		businessTripApplicationCacheModel.costCenter = getCostCenter();

		String costCenter = businessTripApplicationCacheModel.costCenter;

		if ((costCenter != null) && (costCenter.length() == 0)) {
			businessTripApplicationCacheModel.costCenter = null;
		}

		businessTripApplicationCacheModel.personalID = getPersonalID();

		String personalID = businessTripApplicationCacheModel.personalID;

		if ((personalID != null) && (personalID.length() == 0)) {
			businessTripApplicationCacheModel.personalID = null;
		}

		businessTripApplicationCacheModel.passportNo = getPassportNo();

		String passportNo = businessTripApplicationCacheModel.passportNo;

		if ((passportNo != null) && (passportNo.length() == 0)) {
			businessTripApplicationCacheModel.passportNo = null;
		}

		businessTripApplicationCacheModel.officePhone = getOfficePhone();

		String officePhone = businessTripApplicationCacheModel.officePhone;

		if ((officePhone != null) && (officePhone.length() == 0)) {
			businessTripApplicationCacheModel.officePhone = null;
		}

		businessTripApplicationCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = businessTripApplicationCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			businessTripApplicationCacheModel.mobilePhone = null;
		}

		businessTripApplicationCacheModel.email = getEmail();

		String email = businessTripApplicationCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			businessTripApplicationCacheModel.email = null;
		}

		businessTripApplicationCacheModel.officeSite = getOfficeSite();

		String officeSite = businessTripApplicationCacheModel.officeSite;

		if ((officeSite != null) && (officeSite.length() == 0)) {
			businessTripApplicationCacheModel.officeSite = null;
		}

		businessTripApplicationCacheModel.approverId = getApproverId();

		businessTripApplicationCacheModel.approverName = getApproverName();

		String approverName = businessTripApplicationCacheModel.approverName;

		if ((approverName != null) && (approverName.length() == 0)) {
			businessTripApplicationCacheModel.approverName = null;
		}

		businessTripApplicationCacheModel.evpId = getEvpId();

		businessTripApplicationCacheModel.evpName = getEvpName();

		String evpName = businessTripApplicationCacheModel.evpName;

		if ((evpName != null) && (evpName.length() == 0)) {
			businessTripApplicationCacheModel.evpName = null;
		}

		businessTripApplicationCacheModel.isCrossDepartment = getIsCrossDepartment();

		businessTripApplicationCacheModel.targetDepartmentId = getTargetDepartmentId();

		businessTripApplicationCacheModel.targetDepartmentName = getTargetDepartmentName();

		String targetDepartmentName = businessTripApplicationCacheModel.targetDepartmentName;

		if ((targetDepartmentName != null) &&
				(targetDepartmentName.length() == 0)) {
			businessTripApplicationCacheModel.targetDepartmentName = null;
		}

		businessTripApplicationCacheModel.targetCostCenter = getTargetCostCenter();

		String targetCostCenter = businessTripApplicationCacheModel.targetCostCenter;

		if ((targetCostCenter != null) && (targetCostCenter.length() == 0)) {
			businessTripApplicationCacheModel.targetCostCenter = null;
		}

		businessTripApplicationCacheModel.targetDepartmentApproverId = getTargetDepartmentApproverId();

		businessTripApplicationCacheModel.targetDepartmentApproverName = getTargetDepartmentApproverName();

		String targetDepartmentApproverName = businessTripApplicationCacheModel.targetDepartmentApproverName;

		if ((targetDepartmentApproverName != null) &&
				(targetDepartmentApproverName.length() == 0)) {
			businessTripApplicationCacheModel.targetDepartmentApproverName = null;
		}

		businessTripApplicationCacheModel.tripType = getTripType();

		Date departureDate = getDepartureDate();

		if (departureDate != null) {
			businessTripApplicationCacheModel.departureDate = departureDate.getTime();
		}
		else {
			businessTripApplicationCacheModel.departureDate = Long.MIN_VALUE;
		}

		Date returnDate = getReturnDate();

		if (returnDate != null) {
			businessTripApplicationCacheModel.returnDate = returnDate.getTime();
		}
		else {
			businessTripApplicationCacheModel.returnDate = Long.MIN_VALUE;
		}

		businessTripApplicationCacheModel.purposeOfTheTrip = getPurposeOfTheTrip();

		String purposeOfTheTrip = businessTripApplicationCacheModel.purposeOfTheTrip;

		if ((purposeOfTheTrip != null) && (purposeOfTheTrip.length() == 0)) {
			businessTripApplicationCacheModel.purposeOfTheTrip = null;
		}

		businessTripApplicationCacheModel.visitCountriesCities = getVisitCountriesCities();

		String visitCountriesCities = businessTripApplicationCacheModel.visitCountriesCities;

		if ((visitCountriesCities != null) &&
				(visitCountriesCities.length() == 0)) {
			businessTripApplicationCacheModel.visitCountriesCities = null;
		}

		businessTripApplicationCacheModel.advancePayment = getAdvancePayment();

		businessTripApplicationCacheModel.currency = getCurrency();

		String currency = businessTripApplicationCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			businessTripApplicationCacheModel.currency = null;
		}

		businessTripApplicationCacheModel.paymentMethods = getPaymentMethods();

		String paymentMethods = businessTripApplicationCacheModel.paymentMethods;

		if ((paymentMethods != null) && (paymentMethods.length() == 0)) {
			businessTripApplicationCacheModel.paymentMethods = null;
		}

		businessTripApplicationCacheModel.totalCostRmb = getTotalCostRmb();

		businessTripApplicationCacheModel.totalCostEur = getTotalCostEur();

		businessTripApplicationCacheModel.hotelTotalCostRmb = getHotelTotalCostRmb();

		businessTripApplicationCacheModel.hotelTotalCostEur = getHotelTotalCostEur();

		businessTripApplicationCacheModel.carRentalTotalCostRmb = getCarRentalTotalCostRmb();

		businessTripApplicationCacheModel.carRentalTotalCostEur = getCarRentalTotalCostEur();

		businessTripApplicationCacheModel.remark = getRemark();

		String remark = businessTripApplicationCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			businessTripApplicationCacheModel.remark = null;
		}

		businessTripApplicationCacheModel.otherEmails = getOtherEmails();

		String otherEmails = businessTripApplicationCacheModel.otherEmails;

		if ((otherEmails != null) && (otherEmails.length() == 0)) {
			businessTripApplicationCacheModel.otherEmails = null;
		}

		businessTripApplicationCacheModel.status = getStatus();

		businessTripApplicationCacheModel.sapStatus = getSapStatus();

		businessTripApplicationCacheModel.sapComments = getSapComments();

		String sapComments = businessTripApplicationCacheModel.sapComments;

		if ((sapComments != null) && (sapComments.length() == 0)) {
			businessTripApplicationCacheModel.sapComments = null;
		}

		businessTripApplicationCacheModel.sapDocumentId = getSapDocumentId();

		String sapDocumentId = businessTripApplicationCacheModel.sapDocumentId;

		if ((sapDocumentId != null) && (sapDocumentId.length() == 0)) {
			businessTripApplicationCacheModel.sapDocumentId = null;
		}

		businessTripApplicationCacheModel.sapCertificateNo = getSapCertificateNo();

		String sapCertificateNo = businessTripApplicationCacheModel.sapCertificateNo;

		if ((sapCertificateNo != null) && (sapCertificateNo.length() == 0)) {
			businessTripApplicationCacheModel.sapCertificateNo = null;
		}

		businessTripApplicationCacheModel.sapCompany = getSapCompany();

		String sapCompany = businessTripApplicationCacheModel.sapCompany;

		if ((sapCompany != null) && (sapCompany.length() == 0)) {
			businessTripApplicationCacheModel.sapCompany = null;
		}

		businessTripApplicationCacheModel.sapYear = getSapYear();

		String sapYear = businessTripApplicationCacheModel.sapYear;

		if ((sapYear != null) && (sapYear.length() == 0)) {
			businessTripApplicationCacheModel.sapYear = null;
		}

		businessTripApplicationCacheModel.statusByUserId = getStatusByUserId();

		businessTripApplicationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = businessTripApplicationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			businessTripApplicationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			businessTripApplicationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			businessTripApplicationCacheModel.statusDate = Long.MIN_VALUE;
		}

		businessTripApplicationCacheModel.isApplicantAgent = getIsApplicantAgent();

		businessTripApplicationCacheModel.isApproverAgent = getIsApproverAgent();

		businessTripApplicationCacheModel.groupId = getGroupId();

		businessTripApplicationCacheModel.userId = getUserId();

		businessTripApplicationCacheModel.userName = getUserName();

		String userName = businessTripApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			businessTripApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			businessTripApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			businessTripApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			businessTripApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			businessTripApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			businessTripApplicationCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			businessTripApplicationCacheModel.submittedDate = Long.MIN_VALUE;
		}

		businessTripApplicationCacheModel.companyId = getCompanyId();

		return businessTripApplicationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(123);

		sb.append("{businessTripApplicationId=");
		sb.append(getBusinessTripApplicationId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", subType=");
		sb.append(getSubType());
		sb.append(", printName=");
		sb.append(getPrintName());
		sb.append(", staffCode=");
		sb.append(getStaffCode());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", costCenter=");
		sb.append(getCostCenter());
		sb.append(", personalID=");
		sb.append(getPersonalID());
		sb.append(", passportNo=");
		sb.append(getPassportNo());
		sb.append(", officePhone=");
		sb.append(getOfficePhone());
		sb.append(", mobilePhone=");
		sb.append(getMobilePhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", officeSite=");
		sb.append(getOfficeSite());
		sb.append(", approverId=");
		sb.append(getApproverId());
		sb.append(", approverName=");
		sb.append(getApproverName());
		sb.append(", evpId=");
		sb.append(getEvpId());
		sb.append(", evpName=");
		sb.append(getEvpName());
		sb.append(", isCrossDepartment=");
		sb.append(getIsCrossDepartment());
		sb.append(", targetDepartmentId=");
		sb.append(getTargetDepartmentId());
		sb.append(", targetDepartmentName=");
		sb.append(getTargetDepartmentName());
		sb.append(", targetCostCenter=");
		sb.append(getTargetCostCenter());
		sb.append(", targetDepartmentApproverId=");
		sb.append(getTargetDepartmentApproverId());
		sb.append(", targetDepartmentApproverName=");
		sb.append(getTargetDepartmentApproverName());
		sb.append(", tripType=");
		sb.append(getTripType());
		sb.append(", departureDate=");
		sb.append(getDepartureDate());
		sb.append(", returnDate=");
		sb.append(getReturnDate());
		sb.append(", purposeOfTheTrip=");
		sb.append(getPurposeOfTheTrip());
		sb.append(", visitCountriesCities=");
		sb.append(getVisitCountriesCities());
		sb.append(", advancePayment=");
		sb.append(getAdvancePayment());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", paymentMethods=");
		sb.append(getPaymentMethods());
		sb.append(", totalCostRmb=");
		sb.append(getTotalCostRmb());
		sb.append(", totalCostEur=");
		sb.append(getTotalCostEur());
		sb.append(", hotelTotalCostRmb=");
		sb.append(getHotelTotalCostRmb());
		sb.append(", hotelTotalCostEur=");
		sb.append(getHotelTotalCostEur());
		sb.append(", carRentalTotalCostRmb=");
		sb.append(getCarRentalTotalCostRmb());
		sb.append(", carRentalTotalCostEur=");
		sb.append(getCarRentalTotalCostEur());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append(", otherEmails=");
		sb.append(getOtherEmails());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", sapStatus=");
		sb.append(getSapStatus());
		sb.append(", sapComments=");
		sb.append(getSapComments());
		sb.append(", sapDocumentId=");
		sb.append(getSapDocumentId());
		sb.append(", sapCertificateNo=");
		sb.append(getSapCertificateNo());
		sb.append(", sapCompany=");
		sb.append(getSapCompany());
		sb.append(", sapYear=");
		sb.append(getSapYear());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", isApplicantAgent=");
		sb.append(getIsApplicantAgent());
		sb.append(", isApproverAgent=");
		sb.append(getIsApproverAgent());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", submittedDate=");
		sb.append(getSubmittedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(187);

		sb.append("<model><model-name>");
		sb.append("com.business.trip.model.BusinessTripApplication");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>businessTripApplicationId</column-name><column-value><![CDATA[");
		sb.append(getBusinessTripApplicationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subType</column-name><column-value><![CDATA[");
		sb.append(getSubType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>printName</column-name><column-value><![CDATA[");
		sb.append(getPrintName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffCode</column-name><column-value><![CDATA[");
		sb.append(getStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costCenter</column-name><column-value><![CDATA[");
		sb.append(getCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personalID</column-name><column-value><![CDATA[");
		sb.append(getPersonalID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passportNo</column-name><column-value><![CDATA[");
		sb.append(getPassportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officePhone</column-name><column-value><![CDATA[");
		sb.append(getOfficePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobilePhone</column-name><column-value><![CDATA[");
		sb.append(getMobilePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officeSite</column-name><column-value><![CDATA[");
		sb.append(getOfficeSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverId</column-name><column-value><![CDATA[");
		sb.append(getApproverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverName</column-name><column-value><![CDATA[");
		sb.append(getApproverName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evpId</column-name><column-value><![CDATA[");
		sb.append(getEvpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evpName</column-name><column-value><![CDATA[");
		sb.append(getEvpName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCrossDepartment</column-name><column-value><![CDATA[");
		sb.append(getIsCrossDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getTargetDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetDepartmentName</column-name><column-value><![CDATA[");
		sb.append(getTargetDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetCostCenter</column-name><column-value><![CDATA[");
		sb.append(getTargetCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetDepartmentApproverId</column-name><column-value><![CDATA[");
		sb.append(getTargetDepartmentApproverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetDepartmentApproverName</column-name><column-value><![CDATA[");
		sb.append(getTargetDepartmentApproverName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tripType</column-name><column-value><![CDATA[");
		sb.append(getTripType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departureDate</column-name><column-value><![CDATA[");
		sb.append(getDepartureDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>returnDate</column-name><column-value><![CDATA[");
		sb.append(getReturnDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeOfTheTrip</column-name><column-value><![CDATA[");
		sb.append(getPurposeOfTheTrip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visitCountriesCities</column-name><column-value><![CDATA[");
		sb.append(getVisitCountriesCities());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>advancePayment</column-name><column-value><![CDATA[");
		sb.append(getAdvancePayment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentMethods</column-name><column-value><![CDATA[");
		sb.append(getPaymentMethods());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCostRmb</column-name><column-value><![CDATA[");
		sb.append(getTotalCostRmb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCostEur</column-name><column-value><![CDATA[");
		sb.append(getTotalCostEur());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hotelTotalCostRmb</column-name><column-value><![CDATA[");
		sb.append(getHotelTotalCostRmb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hotelTotalCostEur</column-name><column-value><![CDATA[");
		sb.append(getHotelTotalCostEur());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carRentalTotalCostRmb</column-name><column-value><![CDATA[");
		sb.append(getCarRentalTotalCostRmb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carRentalTotalCostEur</column-name><column-value><![CDATA[");
		sb.append(getCarRentalTotalCostEur());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherEmails</column-name><column-value><![CDATA[");
		sb.append(getOtherEmails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapStatus</column-name><column-value><![CDATA[");
		sb.append(getSapStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapComments</column-name><column-value><![CDATA[");
		sb.append(getSapComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapDocumentId</column-name><column-value><![CDATA[");
		sb.append(getSapDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapCertificateNo</column-name><column-value><![CDATA[");
		sb.append(getSapCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapCompany</column-name><column-value><![CDATA[");
		sb.append(getSapCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapYear</column-name><column-value><![CDATA[");
		sb.append(getSapYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApplicantAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApplicantAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproverAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApproverAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedDate</column-name><column-value><![CDATA[");
		sb.append(getSubmittedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BusinessTripApplication.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BusinessTripApplication.class
		};
	private long _businessTripApplicationId;
	private String _ticketNo;
	private String _originalTicketNo;
	private String _processType;
	private String _subType;
	private String _printName;
	private long _staffCode;
	private String _companyName;
	private String _division;
	private String _department;
	private String _costCenter;
	private String _personalID;
	private String _passportNo;
	private String _officePhone;
	private String _mobilePhone;
	private String _email;
	private String _officeSite;
	private long _approverId;
	private String _approverName;
	private long _evpId;
	private String _evpName;
	private boolean _isCrossDepartment;
	private long _targetDepartmentId;
	private String _targetDepartmentName;
	private String _targetCostCenter;
	private long _targetDepartmentApproverId;
	private String _targetDepartmentApproverName;
	private int _tripType;
	private Date _departureDate;
	private Date _returnDate;
	private String _purposeOfTheTrip;
	private String _visitCountriesCities;
	private double _advancePayment;
	private String _currency;
	private String _paymentMethods;
	private double _totalCostRmb;
	private double _totalCostEur;
	private double _hotelTotalCostRmb;
	private double _hotelTotalCostEur;
	private double _carRentalTotalCostRmb;
	private double _carRentalTotalCostEur;
	private String _remark;
	private String _otherEmails;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private int _sapStatus;
	private String _sapComments;
	private String _sapDocumentId;
	private String _sapCertificateNo;
	private String _sapCompany;
	private String _sapYear;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private boolean _isApplicantAgent;
	private boolean _isApproverAgent;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _submittedDate;
	private long _companyId;
	private long _columnBitmask;
	private BusinessTripApplication _escapedModel;
}