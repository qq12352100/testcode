/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.business.trip.model.impl;

import com.business.trip.model.RateCity;
import com.business.trip.model.RateCityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RateCity service. Represents a row in the &quot;vgcapon_RateCity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.business.trip.model.RateCityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RateCityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RateCityImpl
 * @see com.business.trip.model.RateCity
 * @see com.business.trip.model.RateCityModel
 * @generated
 */
public class RateCityModelImpl extends BaseModelImpl<RateCity>
	implements RateCityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rate city model instance should use the {@link com.business.trip.model.RateCity} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_RateCity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ratecityId", Types.BIGINT },
			{ "areaName", Types.VARCHAR },
			{ "rateOfDma", Types.DOUBLE },
			{ "currency_", Types.VARCHAR },
			{ "parentId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_RateCity (ratecityId LONG not null primary key,areaName VARCHAR(75) null,rateOfDma DOUBLE,currency_ VARCHAR(75) null,parentId LONG)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_RateCity";
	public static final String ORDER_BY_JPQL = " ORDER BY rateCity.ratecityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_RateCity.ratecityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.business.trip.model.RateCity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.business.trip.model.RateCity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.business.trip.model.RateCity"));

	public RateCityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ratecityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRatecityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ratecityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RateCity.class;
	}

	@Override
	public String getModelClassName() {
		return RateCity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ratecityId", getRatecityId());
		attributes.put("areaName", getAreaName());
		attributes.put("rateOfDma", getRateOfDma());
		attributes.put("currency", getCurrency());
		attributes.put("parentId", getParentId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ratecityId = (Long)attributes.get("ratecityId");

		if (ratecityId != null) {
			setRatecityId(ratecityId);
		}

		String areaName = (String)attributes.get("areaName");

		if (areaName != null) {
			setAreaName(areaName);
		}

		Double rateOfDma = (Double)attributes.get("rateOfDma");

		if (rateOfDma != null) {
			setRateOfDma(rateOfDma);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}
	}

	@Override
	public long getRatecityId() {
		return _ratecityId;
	}

	@Override
	public void setRatecityId(long ratecityId) {
		_ratecityId = ratecityId;
	}

	@Override
	public String getAreaName() {
		if (_areaName == null) {
			return StringPool.BLANK;
		}
		else {
			return _areaName;
		}
	}

	@Override
	public void setAreaName(String areaName) {
		_areaName = areaName;
	}

	@Override
	public double getRateOfDma() {
		return _rateOfDma;
	}

	@Override
	public void setRateOfDma(double rateOfDma) {
		_rateOfDma = rateOfDma;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RateCity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RateCity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RateCity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RateCityImpl rateCityImpl = new RateCityImpl();

		rateCityImpl.setRatecityId(getRatecityId());
		rateCityImpl.setAreaName(getAreaName());
		rateCityImpl.setRateOfDma(getRateOfDma());
		rateCityImpl.setCurrency(getCurrency());
		rateCityImpl.setParentId(getParentId());

		rateCityImpl.resetOriginalValues();

		return rateCityImpl;
	}

	@Override
	public int compareTo(RateCity rateCity) {
		long primaryKey = rateCity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RateCity)) {
			return false;
		}

		RateCity rateCity = (RateCity)obj;

		long primaryKey = rateCity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RateCity> toCacheModel() {
		RateCityCacheModel rateCityCacheModel = new RateCityCacheModel();

		rateCityCacheModel.ratecityId = getRatecityId();

		rateCityCacheModel.areaName = getAreaName();

		String areaName = rateCityCacheModel.areaName;

		if ((areaName != null) && (areaName.length() == 0)) {
			rateCityCacheModel.areaName = null;
		}

		rateCityCacheModel.rateOfDma = getRateOfDma();

		rateCityCacheModel.currency = getCurrency();

		String currency = rateCityCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			rateCityCacheModel.currency = null;
		}

		rateCityCacheModel.parentId = getParentId();

		return rateCityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{ratecityId=");
		sb.append(getRatecityId());
		sb.append(", areaName=");
		sb.append(getAreaName());
		sb.append(", rateOfDma=");
		sb.append(getRateOfDma());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.business.trip.model.RateCity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ratecityId</column-name><column-value><![CDATA[");
		sb.append(getRatecityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>areaName</column-name><column-value><![CDATA[");
		sb.append(getAreaName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rateOfDma</column-name><column-value><![CDATA[");
		sb.append(getRateOfDma());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RateCity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RateCity.class
		};
	private long _ratecityId;
	private String _areaName;
	private double _rateOfDma;
	private String _currency;
	private long _parentId;
	private RateCity _escapedModel;
}