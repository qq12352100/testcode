/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.company.car.model.impl;

import com.company.car.model.SecondCompanyCar;
import com.company.car.model.SecondCompanyCarModel;
import com.company.car.model.SecondCompanyCarSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SecondCompanyCar service. Represents a row in the &quot;vgcapon_SecondCompanyCar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.company.car.model.SecondCompanyCarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SecondCompanyCarImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SecondCompanyCarImpl
 * @see com.company.car.model.SecondCompanyCar
 * @see com.company.car.model.SecondCompanyCarModel
 * @generated
 */
@JSON(strict = true)
public class SecondCompanyCarModelImpl extends BaseModelImpl<SecondCompanyCar>
	implements SecondCompanyCarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a second company car model instance should use the {@link com.company.car.model.SecondCompanyCar} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_SecondCompanyCar";
	public static final Object[][] TABLE_COLUMNS = {
			{ "secondCompanyCarId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "submittedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "staffCode", Types.BIGINT },
			{ "division", Types.VARCHAR },
			{ "department", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "companyName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "contactNo", Types.VARCHAR },
			{ "workingLocation", Types.VARCHAR },
			{ "officeSite", Types.VARCHAR },
			{ "currentCarModel", Types.VARCHAR },
			{ "currentCarColor", Types.VARCHAR },
			{ "currentPlateNumber", Types.VARCHAR },
			{ "acquiringDate", Types.TIMESTAMP },
			{ "expectedCarModel", Types.VARCHAR },
			{ "expectedCarColor", Types.VARCHAR },
			{ "expectedLastPlateNumber", Types.VARCHAR },
			{ "positionCostCenterId", Types.VARCHAR },
			{ "employeeGroupId", Types.VARCHAR },
			{ "contractEndDate", Types.TIMESTAMP },
			{ "mobilePhone", Types.VARCHAR },
			{ "officePhone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "isApplicantAgent", Types.BOOLEAN },
			{ "isApproverAgent", Types.BOOLEAN },
			{ "drivingLicenseInformation", Types.INTEGER },
			{ "estimatedObtainingDate", Types.TIMESTAMP },
			{ "comments", Types.VARCHAR },
			{ "processType", Types.VARCHAR },
			{ "subType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_SecondCompanyCar (secondCompanyCarId LONG not null primary key,ticketNo VARCHAR(75) null,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,submittedDate DATE null,companyId LONG,name VARCHAR(75) null,staffCode LONG,division VARCHAR(75) null,department VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,companyName VARCHAR(75) null,statusDate DATE null,contactNo VARCHAR(75) null,workingLocation VARCHAR(75) null,officeSite VARCHAR(75) null,currentCarModel VARCHAR(75) null,currentCarColor VARCHAR(75) null,currentPlateNumber VARCHAR(75) null,acquiringDate DATE null,expectedCarModel VARCHAR(75) null,expectedCarColor VARCHAR(75) null,expectedLastPlateNumber VARCHAR(75) null,positionCostCenterId VARCHAR(75) null,employeeGroupId VARCHAR(75) null,contractEndDate DATE null,mobilePhone VARCHAR(75) null,officePhone VARCHAR(75) null,email VARCHAR(75) null,isApplicantAgent BOOLEAN,isApproverAgent BOOLEAN,drivingLicenseInformation INTEGER,estimatedObtainingDate DATE null,comments VARCHAR(512) null,processType VARCHAR(75) null,subType VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_SecondCompanyCar";
	public static final String ORDER_BY_JPQL = " ORDER BY secondCompanyCar.secondCompanyCarId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_SecondCompanyCar.secondCompanyCarId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.company.car.model.SecondCompanyCar"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.company.car.model.SecondCompanyCar"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.company.car.model.SecondCompanyCar"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long SECONDCOMPANYCARID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SecondCompanyCar toModel(SecondCompanyCarSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SecondCompanyCar model = new SecondCompanyCarImpl();

		model.setSecondCompanyCarId(soapModel.getSecondCompanyCarId());
		model.setTicketNo(soapModel.getTicketNo());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSubmittedDate(soapModel.getSubmittedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setName(soapModel.getName());
		model.setStaffCode(soapModel.getStaffCode());
		model.setDivision(soapModel.getDivision());
		model.setDepartment(soapModel.getDepartment());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setCompanyName(soapModel.getCompanyName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setContactNo(soapModel.getContactNo());
		model.setWorkingLocation(soapModel.getWorkingLocation());
		model.setOfficeSite(soapModel.getOfficeSite());
		model.setCurrentCarModel(soapModel.getCurrentCarModel());
		model.setCurrentCarColor(soapModel.getCurrentCarColor());
		model.setCurrentPlateNumber(soapModel.getCurrentPlateNumber());
		model.setAcquiringDate(soapModel.getAcquiringDate());
		model.setExpectedCarModel(soapModel.getExpectedCarModel());
		model.setExpectedCarColor(soapModel.getExpectedCarColor());
		model.setExpectedLastPlateNumber(soapModel.getExpectedLastPlateNumber());
		model.setPositionCostCenterId(soapModel.getPositionCostCenterId());
		model.setEmployeeGroupId(soapModel.getEmployeeGroupId());
		model.setContractEndDate(soapModel.getContractEndDate());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setOfficePhone(soapModel.getOfficePhone());
		model.setEmail(soapModel.getEmail());
		model.setIsApplicantAgent(soapModel.getIsApplicantAgent());
		model.setIsApproverAgent(soapModel.getIsApproverAgent());
		model.setDrivingLicenseInformation(soapModel.getDrivingLicenseInformation());
		model.setEstimatedObtainingDate(soapModel.getEstimatedObtainingDate());
		model.setComments(soapModel.getComments());
		model.setProcessType(soapModel.getProcessType());
		model.setSubType(soapModel.getSubType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SecondCompanyCar> toModels(
		SecondCompanyCarSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SecondCompanyCar> models = new ArrayList<SecondCompanyCar>(soapModels.length);

		for (SecondCompanyCarSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.company.car.model.SecondCompanyCar"));

	public SecondCompanyCarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _secondCompanyCarId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSecondCompanyCarId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _secondCompanyCarId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SecondCompanyCar.class;
	}

	@Override
	public String getModelClassName() {
		return SecondCompanyCar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("secondCompanyCarId", getSecondCompanyCarId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("submittedDate", getSubmittedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("name", getName());
		attributes.put("staffCode", getStaffCode());
		attributes.put("division", getDivision());
		attributes.put("department", getDepartment());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("companyName", getCompanyName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("contactNo", getContactNo());
		attributes.put("workingLocation", getWorkingLocation());
		attributes.put("officeSite", getOfficeSite());
		attributes.put("currentCarModel", getCurrentCarModel());
		attributes.put("currentCarColor", getCurrentCarColor());
		attributes.put("currentPlateNumber", getCurrentPlateNumber());
		attributes.put("acquiringDate", getAcquiringDate());
		attributes.put("expectedCarModel", getExpectedCarModel());
		attributes.put("expectedCarColor", getExpectedCarColor());
		attributes.put("expectedLastPlateNumber", getExpectedLastPlateNumber());
		attributes.put("positionCostCenterId", getPositionCostCenterId());
		attributes.put("employeeGroupId", getEmployeeGroupId());
		attributes.put("contractEndDate", getContractEndDate());
		attributes.put("mobilePhone", getMobilePhone());
		attributes.put("officePhone", getOfficePhone());
		attributes.put("email", getEmail());
		attributes.put("isApplicantAgent", getIsApplicantAgent());
		attributes.put("isApproverAgent", getIsApproverAgent());
		attributes.put("drivingLicenseInformation",
			getDrivingLicenseInformation());
		attributes.put("estimatedObtainingDate", getEstimatedObtainingDate());
		attributes.put("comments", getComments());
		attributes.put("processType", getProcessType());
		attributes.put("subType", getSubType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long secondCompanyCarId = (Long)attributes.get("secondCompanyCarId");

		if (secondCompanyCarId != null) {
			setSecondCompanyCarId(secondCompanyCarId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date submittedDate = (Date)attributes.get("submittedDate");

		if (submittedDate != null) {
			setSubmittedDate(submittedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long staffCode = (Long)attributes.get("staffCode");

		if (staffCode != null) {
			setStaffCode(staffCode);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String contactNo = (String)attributes.get("contactNo");

		if (contactNo != null) {
			setContactNo(contactNo);
		}

		String workingLocation = (String)attributes.get("workingLocation");

		if (workingLocation != null) {
			setWorkingLocation(workingLocation);
		}

		String officeSite = (String)attributes.get("officeSite");

		if (officeSite != null) {
			setOfficeSite(officeSite);
		}

		String currentCarModel = (String)attributes.get("currentCarModel");

		if (currentCarModel != null) {
			setCurrentCarModel(currentCarModel);
		}

		String currentCarColor = (String)attributes.get("currentCarColor");

		if (currentCarColor != null) {
			setCurrentCarColor(currentCarColor);
		}

		String currentPlateNumber = (String)attributes.get("currentPlateNumber");

		if (currentPlateNumber != null) {
			setCurrentPlateNumber(currentPlateNumber);
		}

		Date acquiringDate = (Date)attributes.get("acquiringDate");

		if (acquiringDate != null) {
			setAcquiringDate(acquiringDate);
		}

		String expectedCarModel = (String)attributes.get("expectedCarModel");

		if (expectedCarModel != null) {
			setExpectedCarModel(expectedCarModel);
		}

		String expectedCarColor = (String)attributes.get("expectedCarColor");

		if (expectedCarColor != null) {
			setExpectedCarColor(expectedCarColor);
		}

		String expectedLastPlateNumber = (String)attributes.get(
				"expectedLastPlateNumber");

		if (expectedLastPlateNumber != null) {
			setExpectedLastPlateNumber(expectedLastPlateNumber);
		}

		String positionCostCenterId = (String)attributes.get(
				"positionCostCenterId");

		if (positionCostCenterId != null) {
			setPositionCostCenterId(positionCostCenterId);
		}

		String employeeGroupId = (String)attributes.get("employeeGroupId");

		if (employeeGroupId != null) {
			setEmployeeGroupId(employeeGroupId);
		}

		Date contractEndDate = (Date)attributes.get("contractEndDate");

		if (contractEndDate != null) {
			setContractEndDate(contractEndDate);
		}

		String mobilePhone = (String)attributes.get("mobilePhone");

		if (mobilePhone != null) {
			setMobilePhone(mobilePhone);
		}

		String officePhone = (String)attributes.get("officePhone");

		if (officePhone != null) {
			setOfficePhone(officePhone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Boolean isApplicantAgent = (Boolean)attributes.get("isApplicantAgent");

		if (isApplicantAgent != null) {
			setIsApplicantAgent(isApplicantAgent);
		}

		Boolean isApproverAgent = (Boolean)attributes.get("isApproverAgent");

		if (isApproverAgent != null) {
			setIsApproverAgent(isApproverAgent);
		}

		Integer drivingLicenseInformation = (Integer)attributes.get(
				"drivingLicenseInformation");

		if (drivingLicenseInformation != null) {
			setDrivingLicenseInformation(drivingLicenseInformation);
		}

		Date estimatedObtainingDate = (Date)attributes.get(
				"estimatedObtainingDate");

		if (estimatedObtainingDate != null) {
			setEstimatedObtainingDate(estimatedObtainingDate);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		String subType = (String)attributes.get("subType");

		if (subType != null) {
			setSubType(subType);
		}
	}

	@JSON
	@Override
	public long getSecondCompanyCarId() {
		return _secondCompanyCarId;
	}

	@Override
	public void setSecondCompanyCarId(long secondCompanyCarId) {
		_secondCompanyCarId = secondCompanyCarId;
	}

	@JSON
	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_ticketNo = ticketNo;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public long getStaffCode() {
		return _staffCode;
	}

	@Override
	public void setStaffCode(long staffCode) {
		_staffCode = staffCode;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getContactNo() {
		if (_contactNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactNo;
		}
	}

	@Override
	public void setContactNo(String contactNo) {
		_contactNo = contactNo;
	}

	@JSON
	@Override
	public String getWorkingLocation() {
		if (_workingLocation == null) {
			return StringPool.BLANK;
		}
		else {
			return _workingLocation;
		}
	}

	@Override
	public void setWorkingLocation(String workingLocation) {
		_workingLocation = workingLocation;
	}

	@JSON
	@Override
	public String getOfficeSite() {
		if (_officeSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _officeSite;
		}
	}

	@Override
	public void setOfficeSite(String officeSite) {
		_officeSite = officeSite;
	}

	@JSON
	@Override
	public String getCurrentCarModel() {
		if (_currentCarModel == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentCarModel;
		}
	}

	@Override
	public void setCurrentCarModel(String currentCarModel) {
		_currentCarModel = currentCarModel;
	}

	@JSON
	@Override
	public String getCurrentCarColor() {
		if (_currentCarColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentCarColor;
		}
	}

	@Override
	public void setCurrentCarColor(String currentCarColor) {
		_currentCarColor = currentCarColor;
	}

	@JSON
	@Override
	public String getCurrentPlateNumber() {
		if (_currentPlateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentPlateNumber;
		}
	}

	@Override
	public void setCurrentPlateNumber(String currentPlateNumber) {
		_currentPlateNumber = currentPlateNumber;
	}

	@JSON
	@Override
	public Date getAcquiringDate() {
		return _acquiringDate;
	}

	@Override
	public void setAcquiringDate(Date acquiringDate) {
		_acquiringDate = acquiringDate;
	}

	@JSON
	@Override
	public String getExpectedCarModel() {
		if (_expectedCarModel == null) {
			return StringPool.BLANK;
		}
		else {
			return _expectedCarModel;
		}
	}

	@Override
	public void setExpectedCarModel(String expectedCarModel) {
		_expectedCarModel = expectedCarModel;
	}

	@JSON
	@Override
	public String getExpectedCarColor() {
		if (_expectedCarColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _expectedCarColor;
		}
	}

	@Override
	public void setExpectedCarColor(String expectedCarColor) {
		_expectedCarColor = expectedCarColor;
	}

	@JSON
	@Override
	public String getExpectedLastPlateNumber() {
		if (_expectedLastPlateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _expectedLastPlateNumber;
		}
	}

	@Override
	public void setExpectedLastPlateNumber(String expectedLastPlateNumber) {
		_expectedLastPlateNumber = expectedLastPlateNumber;
	}

	@JSON
	@Override
	public String getPositionCostCenterId() {
		if (_positionCostCenterId == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionCostCenterId;
		}
	}

	@Override
	public void setPositionCostCenterId(String positionCostCenterId) {
		_positionCostCenterId = positionCostCenterId;
	}

	@JSON
	@Override
	public String getEmployeeGroupId() {
		if (_employeeGroupId == null) {
			return StringPool.BLANK;
		}
		else {
			return _employeeGroupId;
		}
	}

	@Override
	public void setEmployeeGroupId(String employeeGroupId) {
		_employeeGroupId = employeeGroupId;
	}

	@JSON
	@Override
	public Date getContractEndDate() {
		return _contractEndDate;
	}

	@Override
	public void setContractEndDate(Date contractEndDate) {
		_contractEndDate = contractEndDate;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getOfficePhone() {
		if (_officePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _officePhone;
		}
	}

	@Override
	public void setOfficePhone(String officePhone) {
		_officePhone = officePhone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public boolean getIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public boolean isIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public void setIsApplicantAgent(boolean isApplicantAgent) {
		_isApplicantAgent = isApplicantAgent;
	}

	@JSON
	@Override
	public boolean getIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public boolean isIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public void setIsApproverAgent(boolean isApproverAgent) {
		_isApproverAgent = isApproverAgent;
	}

	@JSON
	@Override
	public int getDrivingLicenseInformation() {
		return _drivingLicenseInformation;
	}

	@Override
	public void setDrivingLicenseInformation(int drivingLicenseInformation) {
		_drivingLicenseInformation = drivingLicenseInformation;
	}

	@JSON
	@Override
	public Date getEstimatedObtainingDate() {
		return _estimatedObtainingDate;
	}

	@Override
	public void setEstimatedObtainingDate(Date estimatedObtainingDate) {
		_estimatedObtainingDate = estimatedObtainingDate;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return StringPool.BLANK;
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_processType = processType;
	}

	@JSON
	@Override
	public String getSubType() {
		if (_subType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subType;
		}
	}

	@Override
	public void setSubType(String subType) {
		_subType = subType;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SecondCompanyCar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SecondCompanyCar toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SecondCompanyCar)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SecondCompanyCarImpl secondCompanyCarImpl = new SecondCompanyCarImpl();

		secondCompanyCarImpl.setSecondCompanyCarId(getSecondCompanyCarId());
		secondCompanyCarImpl.setTicketNo(getTicketNo());
		secondCompanyCarImpl.setGroupId(getGroupId());
		secondCompanyCarImpl.setUserId(getUserId());
		secondCompanyCarImpl.setUserName(getUserName());
		secondCompanyCarImpl.setCreateDate(getCreateDate());
		secondCompanyCarImpl.setModifiedDate(getModifiedDate());
		secondCompanyCarImpl.setSubmittedDate(getSubmittedDate());
		secondCompanyCarImpl.setCompanyId(getCompanyId());
		secondCompanyCarImpl.setName(getName());
		secondCompanyCarImpl.setStaffCode(getStaffCode());
		secondCompanyCarImpl.setDivision(getDivision());
		secondCompanyCarImpl.setDepartment(getDepartment());
		secondCompanyCarImpl.setStatus(getStatus());
		secondCompanyCarImpl.setStatusByUserId(getStatusByUserId());
		secondCompanyCarImpl.setStatusByUserName(getStatusByUserName());
		secondCompanyCarImpl.setCompanyName(getCompanyName());
		secondCompanyCarImpl.setStatusDate(getStatusDate());
		secondCompanyCarImpl.setContactNo(getContactNo());
		secondCompanyCarImpl.setWorkingLocation(getWorkingLocation());
		secondCompanyCarImpl.setOfficeSite(getOfficeSite());
		secondCompanyCarImpl.setCurrentCarModel(getCurrentCarModel());
		secondCompanyCarImpl.setCurrentCarColor(getCurrentCarColor());
		secondCompanyCarImpl.setCurrentPlateNumber(getCurrentPlateNumber());
		secondCompanyCarImpl.setAcquiringDate(getAcquiringDate());
		secondCompanyCarImpl.setExpectedCarModel(getExpectedCarModel());
		secondCompanyCarImpl.setExpectedCarColor(getExpectedCarColor());
		secondCompanyCarImpl.setExpectedLastPlateNumber(getExpectedLastPlateNumber());
		secondCompanyCarImpl.setPositionCostCenterId(getPositionCostCenterId());
		secondCompanyCarImpl.setEmployeeGroupId(getEmployeeGroupId());
		secondCompanyCarImpl.setContractEndDate(getContractEndDate());
		secondCompanyCarImpl.setMobilePhone(getMobilePhone());
		secondCompanyCarImpl.setOfficePhone(getOfficePhone());
		secondCompanyCarImpl.setEmail(getEmail());
		secondCompanyCarImpl.setIsApplicantAgent(getIsApplicantAgent());
		secondCompanyCarImpl.setIsApproverAgent(getIsApproverAgent());
		secondCompanyCarImpl.setDrivingLicenseInformation(getDrivingLicenseInformation());
		secondCompanyCarImpl.setEstimatedObtainingDate(getEstimatedObtainingDate());
		secondCompanyCarImpl.setComments(getComments());
		secondCompanyCarImpl.setProcessType(getProcessType());
		secondCompanyCarImpl.setSubType(getSubType());

		secondCompanyCarImpl.resetOriginalValues();

		return secondCompanyCarImpl;
	}

	@Override
	public int compareTo(SecondCompanyCar secondCompanyCar) {
		long primaryKey = secondCompanyCar.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SecondCompanyCar)) {
			return false;
		}

		SecondCompanyCar secondCompanyCar = (SecondCompanyCar)obj;

		long primaryKey = secondCompanyCar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SecondCompanyCarModelImpl secondCompanyCarModelImpl = this;

		secondCompanyCarModelImpl._originalUserId = secondCompanyCarModelImpl._userId;

		secondCompanyCarModelImpl._setOriginalUserId = false;

		secondCompanyCarModelImpl._originalStatus = secondCompanyCarModelImpl._status;

		secondCompanyCarModelImpl._setOriginalStatus = false;

		secondCompanyCarModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SecondCompanyCar> toCacheModel() {
		SecondCompanyCarCacheModel secondCompanyCarCacheModel = new SecondCompanyCarCacheModel();

		secondCompanyCarCacheModel.secondCompanyCarId = getSecondCompanyCarId();

		secondCompanyCarCacheModel.ticketNo = getTicketNo();

		String ticketNo = secondCompanyCarCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			secondCompanyCarCacheModel.ticketNo = null;
		}

		secondCompanyCarCacheModel.groupId = getGroupId();

		secondCompanyCarCacheModel.userId = getUserId();

		secondCompanyCarCacheModel.userName = getUserName();

		String userName = secondCompanyCarCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			secondCompanyCarCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			secondCompanyCarCacheModel.createDate = createDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			secondCompanyCarCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			secondCompanyCarCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.submittedDate = Long.MIN_VALUE;
		}

		secondCompanyCarCacheModel.companyId = getCompanyId();

		secondCompanyCarCacheModel.name = getName();

		String name = secondCompanyCarCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			secondCompanyCarCacheModel.name = null;
		}

		secondCompanyCarCacheModel.staffCode = getStaffCode();

		secondCompanyCarCacheModel.division = getDivision();

		String division = secondCompanyCarCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			secondCompanyCarCacheModel.division = null;
		}

		secondCompanyCarCacheModel.department = getDepartment();

		String department = secondCompanyCarCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			secondCompanyCarCacheModel.department = null;
		}

		secondCompanyCarCacheModel.status = getStatus();

		secondCompanyCarCacheModel.statusByUserId = getStatusByUserId();

		secondCompanyCarCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = secondCompanyCarCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			secondCompanyCarCacheModel.statusByUserName = null;
		}

		secondCompanyCarCacheModel.companyName = getCompanyName();

		String companyName = secondCompanyCarCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			secondCompanyCarCacheModel.companyName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			secondCompanyCarCacheModel.statusDate = statusDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.statusDate = Long.MIN_VALUE;
		}

		secondCompanyCarCacheModel.contactNo = getContactNo();

		String contactNo = secondCompanyCarCacheModel.contactNo;

		if ((contactNo != null) && (contactNo.length() == 0)) {
			secondCompanyCarCacheModel.contactNo = null;
		}

		secondCompanyCarCacheModel.workingLocation = getWorkingLocation();

		String workingLocation = secondCompanyCarCacheModel.workingLocation;

		if ((workingLocation != null) && (workingLocation.length() == 0)) {
			secondCompanyCarCacheModel.workingLocation = null;
		}

		secondCompanyCarCacheModel.officeSite = getOfficeSite();

		String officeSite = secondCompanyCarCacheModel.officeSite;

		if ((officeSite != null) && (officeSite.length() == 0)) {
			secondCompanyCarCacheModel.officeSite = null;
		}

		secondCompanyCarCacheModel.currentCarModel = getCurrentCarModel();

		String currentCarModel = secondCompanyCarCacheModel.currentCarModel;

		if ((currentCarModel != null) && (currentCarModel.length() == 0)) {
			secondCompanyCarCacheModel.currentCarModel = null;
		}

		secondCompanyCarCacheModel.currentCarColor = getCurrentCarColor();

		String currentCarColor = secondCompanyCarCacheModel.currentCarColor;

		if ((currentCarColor != null) && (currentCarColor.length() == 0)) {
			secondCompanyCarCacheModel.currentCarColor = null;
		}

		secondCompanyCarCacheModel.currentPlateNumber = getCurrentPlateNumber();

		String currentPlateNumber = secondCompanyCarCacheModel.currentPlateNumber;

		if ((currentPlateNumber != null) && (currentPlateNumber.length() == 0)) {
			secondCompanyCarCacheModel.currentPlateNumber = null;
		}

		Date acquiringDate = getAcquiringDate();

		if (acquiringDate != null) {
			secondCompanyCarCacheModel.acquiringDate = acquiringDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.acquiringDate = Long.MIN_VALUE;
		}

		secondCompanyCarCacheModel.expectedCarModel = getExpectedCarModel();

		String expectedCarModel = secondCompanyCarCacheModel.expectedCarModel;

		if ((expectedCarModel != null) && (expectedCarModel.length() == 0)) {
			secondCompanyCarCacheModel.expectedCarModel = null;
		}

		secondCompanyCarCacheModel.expectedCarColor = getExpectedCarColor();

		String expectedCarColor = secondCompanyCarCacheModel.expectedCarColor;

		if ((expectedCarColor != null) && (expectedCarColor.length() == 0)) {
			secondCompanyCarCacheModel.expectedCarColor = null;
		}

		secondCompanyCarCacheModel.expectedLastPlateNumber = getExpectedLastPlateNumber();

		String expectedLastPlateNumber = secondCompanyCarCacheModel.expectedLastPlateNumber;

		if ((expectedLastPlateNumber != null) &&
				(expectedLastPlateNumber.length() == 0)) {
			secondCompanyCarCacheModel.expectedLastPlateNumber = null;
		}

		secondCompanyCarCacheModel.positionCostCenterId = getPositionCostCenterId();

		String positionCostCenterId = secondCompanyCarCacheModel.positionCostCenterId;

		if ((positionCostCenterId != null) &&
				(positionCostCenterId.length() == 0)) {
			secondCompanyCarCacheModel.positionCostCenterId = null;
		}

		secondCompanyCarCacheModel.employeeGroupId = getEmployeeGroupId();

		String employeeGroupId = secondCompanyCarCacheModel.employeeGroupId;

		if ((employeeGroupId != null) && (employeeGroupId.length() == 0)) {
			secondCompanyCarCacheModel.employeeGroupId = null;
		}

		Date contractEndDate = getContractEndDate();

		if (contractEndDate != null) {
			secondCompanyCarCacheModel.contractEndDate = contractEndDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.contractEndDate = Long.MIN_VALUE;
		}

		secondCompanyCarCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = secondCompanyCarCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			secondCompanyCarCacheModel.mobilePhone = null;
		}

		secondCompanyCarCacheModel.officePhone = getOfficePhone();

		String officePhone = secondCompanyCarCacheModel.officePhone;

		if ((officePhone != null) && (officePhone.length() == 0)) {
			secondCompanyCarCacheModel.officePhone = null;
		}

		secondCompanyCarCacheModel.email = getEmail();

		String email = secondCompanyCarCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			secondCompanyCarCacheModel.email = null;
		}

		secondCompanyCarCacheModel.isApplicantAgent = getIsApplicantAgent();

		secondCompanyCarCacheModel.isApproverAgent = getIsApproverAgent();

		secondCompanyCarCacheModel.drivingLicenseInformation = getDrivingLicenseInformation();

		Date estimatedObtainingDate = getEstimatedObtainingDate();

		if (estimatedObtainingDate != null) {
			secondCompanyCarCacheModel.estimatedObtainingDate = estimatedObtainingDate.getTime();
		}
		else {
			secondCompanyCarCacheModel.estimatedObtainingDate = Long.MIN_VALUE;
		}

		secondCompanyCarCacheModel.comments = getComments();

		String comments = secondCompanyCarCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			secondCompanyCarCacheModel.comments = null;
		}

		secondCompanyCarCacheModel.processType = getProcessType();

		String processType = secondCompanyCarCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			secondCompanyCarCacheModel.processType = null;
		}

		secondCompanyCarCacheModel.subType = getSubType();

		String subType = secondCompanyCarCacheModel.subType;

		if ((subType != null) && (subType.length() == 0)) {
			secondCompanyCarCacheModel.subType = null;
		}

		return secondCompanyCarCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(83);

		sb.append("{secondCompanyCarId=");
		sb.append(getSecondCompanyCarId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", submittedDate=");
		sb.append(getSubmittedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", staffCode=");
		sb.append(getStaffCode());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", contactNo=");
		sb.append(getContactNo());
		sb.append(", workingLocation=");
		sb.append(getWorkingLocation());
		sb.append(", officeSite=");
		sb.append(getOfficeSite());
		sb.append(", currentCarModel=");
		sb.append(getCurrentCarModel());
		sb.append(", currentCarColor=");
		sb.append(getCurrentCarColor());
		sb.append(", currentPlateNumber=");
		sb.append(getCurrentPlateNumber());
		sb.append(", acquiringDate=");
		sb.append(getAcquiringDate());
		sb.append(", expectedCarModel=");
		sb.append(getExpectedCarModel());
		sb.append(", expectedCarColor=");
		sb.append(getExpectedCarColor());
		sb.append(", expectedLastPlateNumber=");
		sb.append(getExpectedLastPlateNumber());
		sb.append(", positionCostCenterId=");
		sb.append(getPositionCostCenterId());
		sb.append(", employeeGroupId=");
		sb.append(getEmployeeGroupId());
		sb.append(", contractEndDate=");
		sb.append(getContractEndDate());
		sb.append(", mobilePhone=");
		sb.append(getMobilePhone());
		sb.append(", officePhone=");
		sb.append(getOfficePhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", isApplicantAgent=");
		sb.append(getIsApplicantAgent());
		sb.append(", isApproverAgent=");
		sb.append(getIsApproverAgent());
		sb.append(", drivingLicenseInformation=");
		sb.append(getDrivingLicenseInformation());
		sb.append(", estimatedObtainingDate=");
		sb.append(getEstimatedObtainingDate());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", subType=");
		sb.append(getSubType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(127);

		sb.append("<model><model-name>");
		sb.append("com.company.car.model.SecondCompanyCar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>secondCompanyCarId</column-name><column-value><![CDATA[");
		sb.append(getSecondCompanyCarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedDate</column-name><column-value><![CDATA[");
		sb.append(getSubmittedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffCode</column-name><column-value><![CDATA[");
		sb.append(getStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactNo</column-name><column-value><![CDATA[");
		sb.append(getContactNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workingLocation</column-name><column-value><![CDATA[");
		sb.append(getWorkingLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officeSite</column-name><column-value><![CDATA[");
		sb.append(getOfficeSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCarModel</column-name><column-value><![CDATA[");
		sb.append(getCurrentCarModel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCarColor</column-name><column-value><![CDATA[");
		sb.append(getCurrentCarColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPlateNumber</column-name><column-value><![CDATA[");
		sb.append(getCurrentPlateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acquiringDate</column-name><column-value><![CDATA[");
		sb.append(getAcquiringDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedCarModel</column-name><column-value><![CDATA[");
		sb.append(getExpectedCarModel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedCarColor</column-name><column-value><![CDATA[");
		sb.append(getExpectedCarColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedLastPlateNumber</column-name><column-value><![CDATA[");
		sb.append(getExpectedLastPlateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionCostCenterId</column-name><column-value><![CDATA[");
		sb.append(getPositionCostCenterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeGroupId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractEndDate</column-name><column-value><![CDATA[");
		sb.append(getContractEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobilePhone</column-name><column-value><![CDATA[");
		sb.append(getMobilePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officePhone</column-name><column-value><![CDATA[");
		sb.append(getOfficePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApplicantAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApplicantAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproverAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApproverAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>drivingLicenseInformation</column-name><column-value><![CDATA[");
		sb.append(getDrivingLicenseInformation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedObtainingDate</column-name><column-value><![CDATA[");
		sb.append(getEstimatedObtainingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subType</column-name><column-value><![CDATA[");
		sb.append(getSubType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SecondCompanyCar.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SecondCompanyCar.class
		};
	private long _secondCompanyCarId;
	private String _ticketNo;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _submittedDate;
	private long _companyId;
	private String _name;
	private long _staffCode;
	private String _division;
	private String _department;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private String _companyName;
	private Date _statusDate;
	private String _contactNo;
	private String _workingLocation;
	private String _officeSite;
	private String _currentCarModel;
	private String _currentCarColor;
	private String _currentPlateNumber;
	private Date _acquiringDate;
	private String _expectedCarModel;
	private String _expectedCarColor;
	private String _expectedLastPlateNumber;
	private String _positionCostCenterId;
	private String _employeeGroupId;
	private Date _contractEndDate;
	private String _mobilePhone;
	private String _officePhone;
	private String _email;
	private boolean _isApplicantAgent;
	private boolean _isApproverAgent;
	private int _drivingLicenseInformation;
	private Date _estimatedObtainingDate;
	private String _comments;
	private String _processType;
	private String _subType;
	private long _columnBitmask;
	private SecondCompanyCar _escapedModel;
}