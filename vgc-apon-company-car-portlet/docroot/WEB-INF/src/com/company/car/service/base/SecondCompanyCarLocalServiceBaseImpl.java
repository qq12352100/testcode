/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.company.car.service.base;

import com.company.car.model.SecondCompanyCar;
import com.company.car.service.SecondCompanyCarLocalService;
import com.company.car.service.persistence.CompanyCarManagementPersistence;
import com.company.car.service.persistence.FirstCompanyCarPersistence;
import com.company.car.service.persistence.SecondCompanyCarPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the second company car local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.company.car.service.impl.SecondCompanyCarLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.company.car.service.impl.SecondCompanyCarLocalServiceImpl
 * @see com.company.car.service.SecondCompanyCarLocalServiceUtil
 * @generated
 */
public abstract class SecondCompanyCarLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SecondCompanyCarLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.company.car.service.SecondCompanyCarLocalServiceUtil} to access the second company car local service.
	 */

	/**
	 * Adds the second company car to the database. Also notifies the appropriate model listeners.
	 *
	 * @param secondCompanyCar the second company car
	 * @return the second company car that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SecondCompanyCar addSecondCompanyCar(
		SecondCompanyCar secondCompanyCar) throws SystemException {
		secondCompanyCar.setNew(true);

		return secondCompanyCarPersistence.update(secondCompanyCar);
	}

	/**
	 * Creates a new second company car with the primary key. Does not add the second company car to the database.
	 *
	 * @param secondCompanyCarId the primary key for the new second company car
	 * @return the new second company car
	 */
	@Override
	public SecondCompanyCar createSecondCompanyCar(long secondCompanyCarId) {
		return secondCompanyCarPersistence.create(secondCompanyCarId);
	}

	/**
	 * Deletes the second company car with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param secondCompanyCarId the primary key of the second company car
	 * @return the second company car that was removed
	 * @throws PortalException if a second company car with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SecondCompanyCar deleteSecondCompanyCar(long secondCompanyCarId)
		throws PortalException, SystemException {
		return secondCompanyCarPersistence.remove(secondCompanyCarId);
	}

	/**
	 * Deletes the second company car from the database. Also notifies the appropriate model listeners.
	 *
	 * @param secondCompanyCar the second company car
	 * @return the second company car that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SecondCompanyCar deleteSecondCompanyCar(
		SecondCompanyCar secondCompanyCar) throws SystemException {
		return secondCompanyCarPersistence.remove(secondCompanyCar);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SecondCompanyCar.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return secondCompanyCarPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.company.car.model.impl.SecondCompanyCarModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return secondCompanyCarPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.company.car.model.impl.SecondCompanyCarModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return secondCompanyCarPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return secondCompanyCarPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return secondCompanyCarPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SecondCompanyCar fetchSecondCompanyCar(long secondCompanyCarId)
		throws SystemException {
		return secondCompanyCarPersistence.fetchByPrimaryKey(secondCompanyCarId);
	}

	/**
	 * Returns the second company car with the primary key.
	 *
	 * @param secondCompanyCarId the primary key of the second company car
	 * @return the second company car
	 * @throws PortalException if a second company car with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SecondCompanyCar getSecondCompanyCar(long secondCompanyCarId)
		throws PortalException, SystemException {
		return secondCompanyCarPersistence.findByPrimaryKey(secondCompanyCarId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return secondCompanyCarPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the second company cars.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.company.car.model.impl.SecondCompanyCarModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of second company cars
	 * @param end the upper bound of the range of second company cars (not inclusive)
	 * @return the range of second company cars
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SecondCompanyCar> getSecondCompanyCars(int start, int end)
		throws SystemException {
		return secondCompanyCarPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of second company cars.
	 *
	 * @return the number of second company cars
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSecondCompanyCarsCount() throws SystemException {
		return secondCompanyCarPersistence.countAll();
	}

	/**
	 * Updates the second company car in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param secondCompanyCar the second company car
	 * @return the second company car that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SecondCompanyCar updateSecondCompanyCar(
		SecondCompanyCar secondCompanyCar) throws SystemException {
		return secondCompanyCarPersistence.update(secondCompanyCar);
	}

	/**
	 * Returns the company car management local service.
	 *
	 * @return the company car management local service
	 */
	public com.company.car.service.CompanyCarManagementLocalService getCompanyCarManagementLocalService() {
		return companyCarManagementLocalService;
	}

	/**
	 * Sets the company car management local service.
	 *
	 * @param companyCarManagementLocalService the company car management local service
	 */
	public void setCompanyCarManagementLocalService(
		com.company.car.service.CompanyCarManagementLocalService companyCarManagementLocalService) {
		this.companyCarManagementLocalService = companyCarManagementLocalService;
	}

	/**
	 * Returns the company car management remote service.
	 *
	 * @return the company car management remote service
	 */
	public com.company.car.service.CompanyCarManagementService getCompanyCarManagementService() {
		return companyCarManagementService;
	}

	/**
	 * Sets the company car management remote service.
	 *
	 * @param companyCarManagementService the company car management remote service
	 */
	public void setCompanyCarManagementService(
		com.company.car.service.CompanyCarManagementService companyCarManagementService) {
		this.companyCarManagementService = companyCarManagementService;
	}

	/**
	 * Returns the company car management persistence.
	 *
	 * @return the company car management persistence
	 */
	public CompanyCarManagementPersistence getCompanyCarManagementPersistence() {
		return companyCarManagementPersistence;
	}

	/**
	 * Sets the company car management persistence.
	 *
	 * @param companyCarManagementPersistence the company car management persistence
	 */
	public void setCompanyCarManagementPersistence(
		CompanyCarManagementPersistence companyCarManagementPersistence) {
		this.companyCarManagementPersistence = companyCarManagementPersistence;
	}

	/**
	 * Returns the first company car local service.
	 *
	 * @return the first company car local service
	 */
	public com.company.car.service.FirstCompanyCarLocalService getFirstCompanyCarLocalService() {
		return firstCompanyCarLocalService;
	}

	/**
	 * Sets the first company car local service.
	 *
	 * @param firstCompanyCarLocalService the first company car local service
	 */
	public void setFirstCompanyCarLocalService(
		com.company.car.service.FirstCompanyCarLocalService firstCompanyCarLocalService) {
		this.firstCompanyCarLocalService = firstCompanyCarLocalService;
	}

	/**
	 * Returns the first company car remote service.
	 *
	 * @return the first company car remote service
	 */
	public com.company.car.service.FirstCompanyCarService getFirstCompanyCarService() {
		return firstCompanyCarService;
	}

	/**
	 * Sets the first company car remote service.
	 *
	 * @param firstCompanyCarService the first company car remote service
	 */
	public void setFirstCompanyCarService(
		com.company.car.service.FirstCompanyCarService firstCompanyCarService) {
		this.firstCompanyCarService = firstCompanyCarService;
	}

	/**
	 * Returns the first company car persistence.
	 *
	 * @return the first company car persistence
	 */
	public FirstCompanyCarPersistence getFirstCompanyCarPersistence() {
		return firstCompanyCarPersistence;
	}

	/**
	 * Sets the first company car persistence.
	 *
	 * @param firstCompanyCarPersistence the first company car persistence
	 */
	public void setFirstCompanyCarPersistence(
		FirstCompanyCarPersistence firstCompanyCarPersistence) {
		this.firstCompanyCarPersistence = firstCompanyCarPersistence;
	}

	/**
	 * Returns the second company car local service.
	 *
	 * @return the second company car local service
	 */
	public com.company.car.service.SecondCompanyCarLocalService getSecondCompanyCarLocalService() {
		return secondCompanyCarLocalService;
	}

	/**
	 * Sets the second company car local service.
	 *
	 * @param secondCompanyCarLocalService the second company car local service
	 */
	public void setSecondCompanyCarLocalService(
		com.company.car.service.SecondCompanyCarLocalService secondCompanyCarLocalService) {
		this.secondCompanyCarLocalService = secondCompanyCarLocalService;
	}

	/**
	 * Returns the second company car remote service.
	 *
	 * @return the second company car remote service
	 */
	public com.company.car.service.SecondCompanyCarService getSecondCompanyCarService() {
		return secondCompanyCarService;
	}

	/**
	 * Sets the second company car remote service.
	 *
	 * @param secondCompanyCarService the second company car remote service
	 */
	public void setSecondCompanyCarService(
		com.company.car.service.SecondCompanyCarService secondCompanyCarService) {
		this.secondCompanyCarService = secondCompanyCarService;
	}

	/**
	 * Returns the second company car persistence.
	 *
	 * @return the second company car persistence
	 */
	public SecondCompanyCarPersistence getSecondCompanyCarPersistence() {
		return secondCompanyCarPersistence;
	}

	/**
	 * Sets the second company car persistence.
	 *
	 * @param secondCompanyCarPersistence the second company car persistence
	 */
	public void setSecondCompanyCarPersistence(
		SecondCompanyCarPersistence secondCompanyCarPersistence) {
		this.secondCompanyCarPersistence = secondCompanyCarPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.company.car.model.SecondCompanyCar",
			secondCompanyCarLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.company.car.model.SecondCompanyCar");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SecondCompanyCar.class;
	}

	protected String getModelClassName() {
		return SecondCompanyCar.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = secondCompanyCarPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.company.car.service.CompanyCarManagementLocalService.class)
	protected com.company.car.service.CompanyCarManagementLocalService companyCarManagementLocalService;
	@BeanReference(type = com.company.car.service.CompanyCarManagementService.class)
	protected com.company.car.service.CompanyCarManagementService companyCarManagementService;
	@BeanReference(type = CompanyCarManagementPersistence.class)
	protected CompanyCarManagementPersistence companyCarManagementPersistence;
	@BeanReference(type = com.company.car.service.FirstCompanyCarLocalService.class)
	protected com.company.car.service.FirstCompanyCarLocalService firstCompanyCarLocalService;
	@BeanReference(type = com.company.car.service.FirstCompanyCarService.class)
	protected com.company.car.service.FirstCompanyCarService firstCompanyCarService;
	@BeanReference(type = FirstCompanyCarPersistence.class)
	protected FirstCompanyCarPersistence firstCompanyCarPersistence;
	@BeanReference(type = com.company.car.service.SecondCompanyCarLocalService.class)
	protected com.company.car.service.SecondCompanyCarLocalService secondCompanyCarLocalService;
	@BeanReference(type = com.company.car.service.SecondCompanyCarService.class)
	protected com.company.car.service.SecondCompanyCarService secondCompanyCarService;
	@BeanReference(type = SecondCompanyCarPersistence.class)
	protected SecondCompanyCarPersistence secondCompanyCarPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SecondCompanyCarLocalServiceClpInvoker _clpInvoker = new SecondCompanyCarLocalServiceClpInvoker();
}