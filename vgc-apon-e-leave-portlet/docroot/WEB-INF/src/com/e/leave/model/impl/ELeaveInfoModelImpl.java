/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.leave.model.impl;

import com.e.leave.model.ELeaveInfo;
import com.e.leave.model.ELeaveInfoModel;
import com.e.leave.model.ELeaveInfoSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ELeaveInfo service. Represents a row in the &quot;vgcapon_ELeaveInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.e.leave.model.ELeaveInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ELeaveInfoImpl}.
 * </p>
 *
 * @author EZEYIFE
 * @see ELeaveInfoImpl
 * @see com.e.leave.model.ELeaveInfo
 * @see com.e.leave.model.ELeaveInfoModel
 * @generated
 */
@JSON(strict = true)
public class ELeaveInfoModelImpl extends BaseModelImpl<ELeaveInfo>
	implements ELeaveInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e leave info model instance should use the {@link com.e.leave.model.ELeaveInfo} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_ELeaveInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eLeaveInfoId", Types.BIGINT },
			{ "eLeaveId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "startTime", Types.VARCHAR },
			{ "endTime", Types.VARCHAR },
			{ "typeOfLeave", Types.VARCHAR },
			{ "typeOfLeaveId", Types.VARCHAR },
			{ "absenceDays", Types.VARCHAR },
			{ "remark", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_ELeaveInfo (eLeaveInfoId LONG not null primary key,eLeaveId LONG,startDate DATE null,endDate DATE null,startTime VARCHAR(75) null,endTime VARCHAR(75) null,typeOfLeave VARCHAR(75) null,typeOfLeaveId VARCHAR(75) null,absenceDays VARCHAR(75) null,remark VARCHAR(250) null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_ELeaveInfo";
	public static final String ORDER_BY_JPQL = " ORDER BY eLeaveInfo.eLeaveInfoId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_ELeaveInfo.eLeaveInfoId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.e.leave.model.ELeaveInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.e.leave.model.ELeaveInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ELeaveInfo toModel(ELeaveInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ELeaveInfo model = new ELeaveInfoImpl();

		model.setELeaveInfoId(soapModel.getELeaveInfoId());
		model.setELeaveId(soapModel.getELeaveId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setTypeOfLeave(soapModel.getTypeOfLeave());
		model.setTypeOfLeaveId(soapModel.getTypeOfLeaveId());
		model.setAbsenceDays(soapModel.getAbsenceDays());
		model.setRemark(soapModel.getRemark());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ELeaveInfo> toModels(ELeaveInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ELeaveInfo> models = new ArrayList<ELeaveInfo>(soapModels.length);

		for (ELeaveInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.e.leave.model.ELeaveInfo"));

	public ELeaveInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eLeaveInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setELeaveInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eLeaveInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ELeaveInfo.class;
	}

	@Override
	public String getModelClassName() {
		return ELeaveInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eLeaveInfoId", getELeaveInfoId());
		attributes.put("eLeaveId", getELeaveId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("typeOfLeave", getTypeOfLeave());
		attributes.put("typeOfLeaveId", getTypeOfLeaveId());
		attributes.put("absenceDays", getAbsenceDays());
		attributes.put("remark", getRemark());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eLeaveInfoId = (Long)attributes.get("eLeaveInfoId");

		if (eLeaveInfoId != null) {
			setELeaveInfoId(eLeaveInfoId);
		}

		Long eLeaveId = (Long)attributes.get("eLeaveId");

		if (eLeaveId != null) {
			setELeaveId(eLeaveId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String startTime = (String)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		String endTime = (String)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		String typeOfLeave = (String)attributes.get("typeOfLeave");

		if (typeOfLeave != null) {
			setTypeOfLeave(typeOfLeave);
		}

		String typeOfLeaveId = (String)attributes.get("typeOfLeaveId");

		if (typeOfLeaveId != null) {
			setTypeOfLeaveId(typeOfLeaveId);
		}

		String absenceDays = (String)attributes.get("absenceDays");

		if (absenceDays != null) {
			setAbsenceDays(absenceDays);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}
	}

	@JSON
	@Override
	public long getELeaveInfoId() {
		return _eLeaveInfoId;
	}

	@Override
	public void setELeaveInfoId(long eLeaveInfoId) {
		_eLeaveInfoId = eLeaveInfoId;
	}

	@JSON
	@Override
	public long getELeaveId() {
		return _eLeaveId;
	}

	@Override
	public void setELeaveId(long eLeaveId) {
		_eLeaveId = eLeaveId;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getStartTime() {
		if (_startTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _startTime;
		}
	}

	@Override
	public void setStartTime(String startTime) {
		_startTime = startTime;
	}

	@JSON
	@Override
	public String getEndTime() {
		if (_endTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _endTime;
		}
	}

	@Override
	public void setEndTime(String endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public String getTypeOfLeave() {
		if (_typeOfLeave == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeOfLeave;
		}
	}

	@Override
	public void setTypeOfLeave(String typeOfLeave) {
		_typeOfLeave = typeOfLeave;
	}

	@JSON
	@Override
	public String getTypeOfLeaveId() {
		if (_typeOfLeaveId == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeOfLeaveId;
		}
	}

	@Override
	public void setTypeOfLeaveId(String typeOfLeaveId) {
		_typeOfLeaveId = typeOfLeaveId;
	}

	@JSON
	@Override
	public String getAbsenceDays() {
		if (_absenceDays == null) {
			return StringPool.BLANK;
		}
		else {
			return _absenceDays;
		}
	}

	@Override
	public void setAbsenceDays(String absenceDays) {
		_absenceDays = absenceDays;
	}

	@JSON
	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ELeaveInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ELeaveInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ELeaveInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ELeaveInfoImpl eLeaveInfoImpl = new ELeaveInfoImpl();

		eLeaveInfoImpl.setELeaveInfoId(getELeaveInfoId());
		eLeaveInfoImpl.setELeaveId(getELeaveId());
		eLeaveInfoImpl.setStartDate(getStartDate());
		eLeaveInfoImpl.setEndDate(getEndDate());
		eLeaveInfoImpl.setStartTime(getStartTime());
		eLeaveInfoImpl.setEndTime(getEndTime());
		eLeaveInfoImpl.setTypeOfLeave(getTypeOfLeave());
		eLeaveInfoImpl.setTypeOfLeaveId(getTypeOfLeaveId());
		eLeaveInfoImpl.setAbsenceDays(getAbsenceDays());
		eLeaveInfoImpl.setRemark(getRemark());

		eLeaveInfoImpl.resetOriginalValues();

		return eLeaveInfoImpl;
	}

	@Override
	public int compareTo(ELeaveInfo eLeaveInfo) {
		int value = 0;

		if (getELeaveInfoId() < eLeaveInfo.getELeaveInfoId()) {
			value = -1;
		}
		else if (getELeaveInfoId() > eLeaveInfo.getELeaveInfoId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ELeaveInfo)) {
			return false;
		}

		ELeaveInfo eLeaveInfo = (ELeaveInfo)obj;

		long primaryKey = eLeaveInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ELeaveInfo> toCacheModel() {
		ELeaveInfoCacheModel eLeaveInfoCacheModel = new ELeaveInfoCacheModel();

		eLeaveInfoCacheModel.eLeaveInfoId = getELeaveInfoId();

		eLeaveInfoCacheModel.eLeaveId = getELeaveId();

		Date startDate = getStartDate();

		if (startDate != null) {
			eLeaveInfoCacheModel.startDate = startDate.getTime();
		}
		else {
			eLeaveInfoCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			eLeaveInfoCacheModel.endDate = endDate.getTime();
		}
		else {
			eLeaveInfoCacheModel.endDate = Long.MIN_VALUE;
		}

		eLeaveInfoCacheModel.startTime = getStartTime();

		String startTime = eLeaveInfoCacheModel.startTime;

		if ((startTime != null) && (startTime.length() == 0)) {
			eLeaveInfoCacheModel.startTime = null;
		}

		eLeaveInfoCacheModel.endTime = getEndTime();

		String endTime = eLeaveInfoCacheModel.endTime;

		if ((endTime != null) && (endTime.length() == 0)) {
			eLeaveInfoCacheModel.endTime = null;
		}

		eLeaveInfoCacheModel.typeOfLeave = getTypeOfLeave();

		String typeOfLeave = eLeaveInfoCacheModel.typeOfLeave;

		if ((typeOfLeave != null) && (typeOfLeave.length() == 0)) {
			eLeaveInfoCacheModel.typeOfLeave = null;
		}

		eLeaveInfoCacheModel.typeOfLeaveId = getTypeOfLeaveId();

		String typeOfLeaveId = eLeaveInfoCacheModel.typeOfLeaveId;

		if ((typeOfLeaveId != null) && (typeOfLeaveId.length() == 0)) {
			eLeaveInfoCacheModel.typeOfLeaveId = null;
		}

		eLeaveInfoCacheModel.absenceDays = getAbsenceDays();

		String absenceDays = eLeaveInfoCacheModel.absenceDays;

		if ((absenceDays != null) && (absenceDays.length() == 0)) {
			eLeaveInfoCacheModel.absenceDays = null;
		}

		eLeaveInfoCacheModel.remark = getRemark();

		String remark = eLeaveInfoCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			eLeaveInfoCacheModel.remark = null;
		}

		return eLeaveInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{eLeaveInfoId=");
		sb.append(getELeaveInfoId());
		sb.append(", eLeaveId=");
		sb.append(getELeaveId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", typeOfLeave=");
		sb.append(getTypeOfLeave());
		sb.append(", typeOfLeaveId=");
		sb.append(getTypeOfLeaveId());
		sb.append(", absenceDays=");
		sb.append(getAbsenceDays());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.e.leave.model.ELeaveInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eLeaveInfoId</column-name><column-value><![CDATA[");
		sb.append(getELeaveInfoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eLeaveId</column-name><column-value><![CDATA[");
		sb.append(getELeaveId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeOfLeave</column-name><column-value><![CDATA[");
		sb.append(getTypeOfLeave());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeOfLeaveId</column-name><column-value><![CDATA[");
		sb.append(getTypeOfLeaveId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>absenceDays</column-name><column-value><![CDATA[");
		sb.append(getAbsenceDays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ELeaveInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ELeaveInfo.class
		};
	private long _eLeaveInfoId;
	private long _eLeaveId;
	private Date _startDate;
	private Date _endDate;
	private String _startTime;
	private String _endTime;
	private String _typeOfLeave;
	private String _typeOfLeaveId;
	private String _absenceDays;
	private String _remark;
	private ELeaveInfo _escapedModel;
}