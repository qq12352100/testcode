/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.leave.model.impl;

import com.e.leave.model.ELeave;
import com.e.leave.model.ELeaveModel;
import com.e.leave.model.ELeaveSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ELeave service. Represents a row in the &quot;vgcapon_ELeave&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.e.leave.model.ELeaveModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ELeaveImpl}.
 * </p>
 *
 * @author EZEYIFE
 * @see ELeaveImpl
 * @see com.e.leave.model.ELeave
 * @see com.e.leave.model.ELeaveModel
 * @generated
 */
@JSON(strict = true)
public class ELeaveModelImpl extends BaseModelImpl<ELeave>
	implements ELeaveModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e leave model instance should use the {@link com.e.leave.model.ELeave} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_ELeave";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eLeaveId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "staffName", Types.VARCHAR },
			{ "staffCode", Types.VARCHAR },
			{ "company", Types.VARCHAR },
			{ "division", Types.VARCHAR },
			{ "department", Types.VARCHAR },
			{ "costCenter", Types.VARCHAR },
			{ "officePhone", Types.VARCHAR },
			{ "mobilePhone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "positionType", Types.VARCHAR },
			{ "isApplicantAgent", Types.BOOLEAN },
			{ "isApproverAgent", Types.BOOLEAN },
			{ "processType", Types.VARCHAR },
			{ "subProcessType", Types.VARCHAR },
			{ "submittedDate", Types.TIMESTAMP },
			{ "comments", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "totalLeaveEntitlement", Types.VARCHAR },
			{ "totalDuration", Types.VARCHAR },
			{ "remainingLeaveDaysBefore", Types.VARCHAR },
			{ "remainingLeaveDaysAfter", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_ELeave (eLeaveId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyId LONG,ticketNo VARCHAR(75) null,staffName VARCHAR(75) null,staffCode VARCHAR(75) null,company VARCHAR(75) null,division VARCHAR(75) null,department VARCHAR(75) null,costCenter VARCHAR(75) null,officePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,email VARCHAR(75) null,positionType VARCHAR(75) null,isApplicantAgent BOOLEAN,isApproverAgent BOOLEAN,processType VARCHAR(75) null,subProcessType VARCHAR(75) null,submittedDate DATE null,comments VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,totalLeaveEntitlement VARCHAR(75) null,totalDuration VARCHAR(75) null,remainingLeaveDaysBefore VARCHAR(75) null,remainingLeaveDaysAfter VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_ELeave";
	public static final String ORDER_BY_JPQL = " ORDER BY eLeave.eLeaveId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_ELeave.eLeaveId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.e.leave.model.ELeave"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.e.leave.model.ELeave"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.e.leave.model.ELeave"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long ELEAVEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ELeave toModel(ELeaveSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ELeave model = new ELeaveImpl();

		model.setELeaveId(soapModel.getELeaveId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setTicketNo(soapModel.getTicketNo());
		model.setStaffName(soapModel.getStaffName());
		model.setStaffCode(soapModel.getStaffCode());
		model.setCompany(soapModel.getCompany());
		model.setDivision(soapModel.getDivision());
		model.setDepartment(soapModel.getDepartment());
		model.setCostCenter(soapModel.getCostCenter());
		model.setOfficePhone(soapModel.getOfficePhone());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setEmail(soapModel.getEmail());
		model.setPositionType(soapModel.getPositionType());
		model.setIsApplicantAgent(soapModel.getIsApplicantAgent());
		model.setIsApproverAgent(soapModel.getIsApproverAgent());
		model.setProcessType(soapModel.getProcessType());
		model.setSubProcessType(soapModel.getSubProcessType());
		model.setSubmittedDate(soapModel.getSubmittedDate());
		model.setComments(soapModel.getComments());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTotalLeaveEntitlement(soapModel.getTotalLeaveEntitlement());
		model.setTotalDuration(soapModel.getTotalDuration());
		model.setRemainingLeaveDaysBefore(soapModel.getRemainingLeaveDaysBefore());
		model.setRemainingLeaveDaysAfter(soapModel.getRemainingLeaveDaysAfter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ELeave> toModels(ELeaveSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ELeave> models = new ArrayList<ELeave>(soapModels.length);

		for (ELeaveSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.e.leave.model.ELeave"));

	public ELeaveModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eLeaveId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setELeaveId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eLeaveId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ELeave.class;
	}

	@Override
	public String getModelClassName() {
		return ELeave.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eLeaveId", getELeaveId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("staffName", getStaffName());
		attributes.put("staffCode", getStaffCode());
		attributes.put("company", getCompany());
		attributes.put("division", getDivision());
		attributes.put("department", getDepartment());
		attributes.put("costCenter", getCostCenter());
		attributes.put("officePhone", getOfficePhone());
		attributes.put("mobilePhone", getMobilePhone());
		attributes.put("email", getEmail());
		attributes.put("positionType", getPositionType());
		attributes.put("isApplicantAgent", getIsApplicantAgent());
		attributes.put("isApproverAgent", getIsApproverAgent());
		attributes.put("processType", getProcessType());
		attributes.put("subProcessType", getSubProcessType());
		attributes.put("submittedDate", getSubmittedDate());
		attributes.put("comments", getComments());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("totalLeaveEntitlement", getTotalLeaveEntitlement());
		attributes.put("totalDuration", getTotalDuration());
		attributes.put("remainingLeaveDaysBefore", getRemainingLeaveDaysBefore());
		attributes.put("remainingLeaveDaysAfter", getRemainingLeaveDaysAfter());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eLeaveId = (Long)attributes.get("eLeaveId");

		if (eLeaveId != null) {
			setELeaveId(eLeaveId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String staffName = (String)attributes.get("staffName");

		if (staffName != null) {
			setStaffName(staffName);
		}

		String staffCode = (String)attributes.get("staffCode");

		if (staffCode != null) {
			setStaffCode(staffCode);
		}

		String company = (String)attributes.get("company");

		if (company != null) {
			setCompany(company);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		String costCenter = (String)attributes.get("costCenter");

		if (costCenter != null) {
			setCostCenter(costCenter);
		}

		String officePhone = (String)attributes.get("officePhone");

		if (officePhone != null) {
			setOfficePhone(officePhone);
		}

		String mobilePhone = (String)attributes.get("mobilePhone");

		if (mobilePhone != null) {
			setMobilePhone(mobilePhone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String positionType = (String)attributes.get("positionType");

		if (positionType != null) {
			setPositionType(positionType);
		}

		Boolean isApplicantAgent = (Boolean)attributes.get("isApplicantAgent");

		if (isApplicantAgent != null) {
			setIsApplicantAgent(isApplicantAgent);
		}

		Boolean isApproverAgent = (Boolean)attributes.get("isApproverAgent");

		if (isApproverAgent != null) {
			setIsApproverAgent(isApproverAgent);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		String subProcessType = (String)attributes.get("subProcessType");

		if (subProcessType != null) {
			setSubProcessType(subProcessType);
		}

		Date submittedDate = (Date)attributes.get("submittedDate");

		if (submittedDate != null) {
			setSubmittedDate(submittedDate);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String totalLeaveEntitlement = (String)attributes.get(
				"totalLeaveEntitlement");

		if (totalLeaveEntitlement != null) {
			setTotalLeaveEntitlement(totalLeaveEntitlement);
		}

		String totalDuration = (String)attributes.get("totalDuration");

		if (totalDuration != null) {
			setTotalDuration(totalDuration);
		}

		String remainingLeaveDaysBefore = (String)attributes.get(
				"remainingLeaveDaysBefore");

		if (remainingLeaveDaysBefore != null) {
			setRemainingLeaveDaysBefore(remainingLeaveDaysBefore);
		}

		String remainingLeaveDaysAfter = (String)attributes.get(
				"remainingLeaveDaysAfter");

		if (remainingLeaveDaysAfter != null) {
			setRemainingLeaveDaysAfter(remainingLeaveDaysAfter);
		}
	}

	@JSON
	@Override
	public long getELeaveId() {
		return _eLeaveId;
	}

	@Override
	public void setELeaveId(long eLeaveId) {
		_columnBitmask = -1L;

		_eLeaveId = eLeaveId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_ticketNo = ticketNo;
	}

	@JSON
	@Override
	public String getStaffName() {
		if (_staffName == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffName;
		}
	}

	@Override
	public void setStaffName(String staffName) {
		_staffName = staffName;
	}

	@JSON
	@Override
	public String getStaffCode() {
		if (_staffCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffCode;
		}
	}

	@Override
	public void setStaffCode(String staffCode) {
		_staffCode = staffCode;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return StringPool.BLANK;
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	@Override
	public String getCostCenter() {
		if (_costCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _costCenter;
		}
	}

	@Override
	public void setCostCenter(String costCenter) {
		_costCenter = costCenter;
	}

	@JSON
	@Override
	public String getOfficePhone() {
		if (_officePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _officePhone;
		}
	}

	@Override
	public void setOfficePhone(String officePhone) {
		_officePhone = officePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getPositionType() {
		if (_positionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionType;
		}
	}

	@Override
	public void setPositionType(String positionType) {
		_positionType = positionType;
	}

	@JSON
	@Override
	public boolean getIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public boolean isIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public void setIsApplicantAgent(boolean isApplicantAgent) {
		_isApplicantAgent = isApplicantAgent;
	}

	@JSON
	@Override
	public boolean getIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public boolean isIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public void setIsApproverAgent(boolean isApproverAgent) {
		_isApproverAgent = isApproverAgent;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return StringPool.BLANK;
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_processType = processType;
	}

	@JSON
	@Override
	public String getSubProcessType() {
		if (_subProcessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subProcessType;
		}
	}

	@Override
	public void setSubProcessType(String subProcessType) {
		_subProcessType = subProcessType;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTotalLeaveEntitlement() {
		if (_totalLeaveEntitlement == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalLeaveEntitlement;
		}
	}

	@Override
	public void setTotalLeaveEntitlement(String totalLeaveEntitlement) {
		_totalLeaveEntitlement = totalLeaveEntitlement;
	}

	@JSON
	@Override
	public String getTotalDuration() {
		if (_totalDuration == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalDuration;
		}
	}

	@Override
	public void setTotalDuration(String totalDuration) {
		_totalDuration = totalDuration;
	}

	@JSON
	@Override
	public String getRemainingLeaveDaysBefore() {
		if (_remainingLeaveDaysBefore == null) {
			return StringPool.BLANK;
		}
		else {
			return _remainingLeaveDaysBefore;
		}
	}

	@Override
	public void setRemainingLeaveDaysBefore(String remainingLeaveDaysBefore) {
		_remainingLeaveDaysBefore = remainingLeaveDaysBefore;
	}

	@JSON
	@Override
	public String getRemainingLeaveDaysAfter() {
		if (_remainingLeaveDaysAfter == null) {
			return StringPool.BLANK;
		}
		else {
			return _remainingLeaveDaysAfter;
		}
	}

	@Override
	public void setRemainingLeaveDaysAfter(String remainingLeaveDaysAfter) {
		_remainingLeaveDaysAfter = remainingLeaveDaysAfter;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ELeave.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ELeave toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ELeave)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ELeaveImpl eLeaveImpl = new ELeaveImpl();

		eLeaveImpl.setELeaveId(getELeaveId());
		eLeaveImpl.setGroupId(getGroupId());
		eLeaveImpl.setUserId(getUserId());
		eLeaveImpl.setUserName(getUserName());
		eLeaveImpl.setCreateDate(getCreateDate());
		eLeaveImpl.setModifiedDate(getModifiedDate());
		eLeaveImpl.setCompanyId(getCompanyId());
		eLeaveImpl.setTicketNo(getTicketNo());
		eLeaveImpl.setStaffName(getStaffName());
		eLeaveImpl.setStaffCode(getStaffCode());
		eLeaveImpl.setCompany(getCompany());
		eLeaveImpl.setDivision(getDivision());
		eLeaveImpl.setDepartment(getDepartment());
		eLeaveImpl.setCostCenter(getCostCenter());
		eLeaveImpl.setOfficePhone(getOfficePhone());
		eLeaveImpl.setMobilePhone(getMobilePhone());
		eLeaveImpl.setEmail(getEmail());
		eLeaveImpl.setPositionType(getPositionType());
		eLeaveImpl.setIsApplicantAgent(getIsApplicantAgent());
		eLeaveImpl.setIsApproverAgent(getIsApproverAgent());
		eLeaveImpl.setProcessType(getProcessType());
		eLeaveImpl.setSubProcessType(getSubProcessType());
		eLeaveImpl.setSubmittedDate(getSubmittedDate());
		eLeaveImpl.setComments(getComments());
		eLeaveImpl.setStatus(getStatus());
		eLeaveImpl.setStatusByUserId(getStatusByUserId());
		eLeaveImpl.setStatusByUserName(getStatusByUserName());
		eLeaveImpl.setStatusDate(getStatusDate());
		eLeaveImpl.setTotalLeaveEntitlement(getTotalLeaveEntitlement());
		eLeaveImpl.setTotalDuration(getTotalDuration());
		eLeaveImpl.setRemainingLeaveDaysBefore(getRemainingLeaveDaysBefore());
		eLeaveImpl.setRemainingLeaveDaysAfter(getRemainingLeaveDaysAfter());

		eLeaveImpl.resetOriginalValues();

		return eLeaveImpl;
	}

	@Override
	public int compareTo(ELeave eLeave) {
		int value = 0;

		if (getELeaveId() < eLeave.getELeaveId()) {
			value = -1;
		}
		else if (getELeaveId() > eLeave.getELeaveId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ELeave)) {
			return false;
		}

		ELeave eLeave = (ELeave)obj;

		long primaryKey = eLeave.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ELeaveModelImpl eLeaveModelImpl = this;

		eLeaveModelImpl._originalUserId = eLeaveModelImpl._userId;

		eLeaveModelImpl._setOriginalUserId = false;

		eLeaveModelImpl._originalStatus = eLeaveModelImpl._status;

		eLeaveModelImpl._setOriginalStatus = false;

		eLeaveModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ELeave> toCacheModel() {
		ELeaveCacheModel eLeaveCacheModel = new ELeaveCacheModel();

		eLeaveCacheModel.eLeaveId = getELeaveId();

		eLeaveCacheModel.groupId = getGroupId();

		eLeaveCacheModel.userId = getUserId();

		eLeaveCacheModel.userName = getUserName();

		String userName = eLeaveCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eLeaveCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eLeaveCacheModel.createDate = createDate.getTime();
		}
		else {
			eLeaveCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eLeaveCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eLeaveCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eLeaveCacheModel.companyId = getCompanyId();

		eLeaveCacheModel.ticketNo = getTicketNo();

		String ticketNo = eLeaveCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			eLeaveCacheModel.ticketNo = null;
		}

		eLeaveCacheModel.staffName = getStaffName();

		String staffName = eLeaveCacheModel.staffName;

		if ((staffName != null) && (staffName.length() == 0)) {
			eLeaveCacheModel.staffName = null;
		}

		eLeaveCacheModel.staffCode = getStaffCode();

		String staffCode = eLeaveCacheModel.staffCode;

		if ((staffCode != null) && (staffCode.length() == 0)) {
			eLeaveCacheModel.staffCode = null;
		}

		eLeaveCacheModel.company = getCompany();

		String company = eLeaveCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			eLeaveCacheModel.company = null;
		}

		eLeaveCacheModel.division = getDivision();

		String division = eLeaveCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			eLeaveCacheModel.division = null;
		}

		eLeaveCacheModel.department = getDepartment();

		String department = eLeaveCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			eLeaveCacheModel.department = null;
		}

		eLeaveCacheModel.costCenter = getCostCenter();

		String costCenter = eLeaveCacheModel.costCenter;

		if ((costCenter != null) && (costCenter.length() == 0)) {
			eLeaveCacheModel.costCenter = null;
		}

		eLeaveCacheModel.officePhone = getOfficePhone();

		String officePhone = eLeaveCacheModel.officePhone;

		if ((officePhone != null) && (officePhone.length() == 0)) {
			eLeaveCacheModel.officePhone = null;
		}

		eLeaveCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = eLeaveCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			eLeaveCacheModel.mobilePhone = null;
		}

		eLeaveCacheModel.email = getEmail();

		String email = eLeaveCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			eLeaveCacheModel.email = null;
		}

		eLeaveCacheModel.positionType = getPositionType();

		String positionType = eLeaveCacheModel.positionType;

		if ((positionType != null) && (positionType.length() == 0)) {
			eLeaveCacheModel.positionType = null;
		}

		eLeaveCacheModel.isApplicantAgent = getIsApplicantAgent();

		eLeaveCacheModel.isApproverAgent = getIsApproverAgent();

		eLeaveCacheModel.processType = getProcessType();

		String processType = eLeaveCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			eLeaveCacheModel.processType = null;
		}

		eLeaveCacheModel.subProcessType = getSubProcessType();

		String subProcessType = eLeaveCacheModel.subProcessType;

		if ((subProcessType != null) && (subProcessType.length() == 0)) {
			eLeaveCacheModel.subProcessType = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			eLeaveCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			eLeaveCacheModel.submittedDate = Long.MIN_VALUE;
		}

		eLeaveCacheModel.comments = getComments();

		String comments = eLeaveCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			eLeaveCacheModel.comments = null;
		}

		eLeaveCacheModel.status = getStatus();

		eLeaveCacheModel.statusByUserId = getStatusByUserId();

		eLeaveCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = eLeaveCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			eLeaveCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			eLeaveCacheModel.statusDate = statusDate.getTime();
		}
		else {
			eLeaveCacheModel.statusDate = Long.MIN_VALUE;
		}

		eLeaveCacheModel.totalLeaveEntitlement = getTotalLeaveEntitlement();

		String totalLeaveEntitlement = eLeaveCacheModel.totalLeaveEntitlement;

		if ((totalLeaveEntitlement != null) &&
				(totalLeaveEntitlement.length() == 0)) {
			eLeaveCacheModel.totalLeaveEntitlement = null;
		}

		eLeaveCacheModel.totalDuration = getTotalDuration();

		String totalDuration = eLeaveCacheModel.totalDuration;

		if ((totalDuration != null) && (totalDuration.length() == 0)) {
			eLeaveCacheModel.totalDuration = null;
		}

		eLeaveCacheModel.remainingLeaveDaysBefore = getRemainingLeaveDaysBefore();

		String remainingLeaveDaysBefore = eLeaveCacheModel.remainingLeaveDaysBefore;

		if ((remainingLeaveDaysBefore != null) &&
				(remainingLeaveDaysBefore.length() == 0)) {
			eLeaveCacheModel.remainingLeaveDaysBefore = null;
		}

		eLeaveCacheModel.remainingLeaveDaysAfter = getRemainingLeaveDaysAfter();

		String remainingLeaveDaysAfter = eLeaveCacheModel.remainingLeaveDaysAfter;

		if ((remainingLeaveDaysAfter != null) &&
				(remainingLeaveDaysAfter.length() == 0)) {
			eLeaveCacheModel.remainingLeaveDaysAfter = null;
		}

		return eLeaveCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{eLeaveId=");
		sb.append(getELeaveId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", staffName=");
		sb.append(getStaffName());
		sb.append(", staffCode=");
		sb.append(getStaffCode());
		sb.append(", company=");
		sb.append(getCompany());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", costCenter=");
		sb.append(getCostCenter());
		sb.append(", officePhone=");
		sb.append(getOfficePhone());
		sb.append(", mobilePhone=");
		sb.append(getMobilePhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", positionType=");
		sb.append(getPositionType());
		sb.append(", isApplicantAgent=");
		sb.append(getIsApplicantAgent());
		sb.append(", isApproverAgent=");
		sb.append(getIsApproverAgent());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", subProcessType=");
		sb.append(getSubProcessType());
		sb.append(", submittedDate=");
		sb.append(getSubmittedDate());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", totalLeaveEntitlement=");
		sb.append(getTotalLeaveEntitlement());
		sb.append(", totalDuration=");
		sb.append(getTotalDuration());
		sb.append(", remainingLeaveDaysBefore=");
		sb.append(getRemainingLeaveDaysBefore());
		sb.append(", remainingLeaveDaysAfter=");
		sb.append(getRemainingLeaveDaysAfter());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("com.e.leave.model.ELeave");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eLeaveId</column-name><column-value><![CDATA[");
		sb.append(getELeaveId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffName</column-name><column-value><![CDATA[");
		sb.append(getStaffName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffCode</column-name><column-value><![CDATA[");
		sb.append(getStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costCenter</column-name><column-value><![CDATA[");
		sb.append(getCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officePhone</column-name><column-value><![CDATA[");
		sb.append(getOfficePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobilePhone</column-name><column-value><![CDATA[");
		sb.append(getMobilePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionType</column-name><column-value><![CDATA[");
		sb.append(getPositionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApplicantAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApplicantAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproverAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApproverAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subProcessType</column-name><column-value><![CDATA[");
		sb.append(getSubProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedDate</column-name><column-value><![CDATA[");
		sb.append(getSubmittedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalLeaveEntitlement</column-name><column-value><![CDATA[");
		sb.append(getTotalLeaveEntitlement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDuration</column-name><column-value><![CDATA[");
		sb.append(getTotalDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingLeaveDaysBefore</column-name><column-value><![CDATA[");
		sb.append(getRemainingLeaveDaysBefore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingLeaveDaysAfter</column-name><column-value><![CDATA[");
		sb.append(getRemainingLeaveDaysAfter());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ELeave.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { ELeave.class };
	private long _eLeaveId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _companyId;
	private String _ticketNo;
	private String _staffName;
	private String _staffCode;
	private String _company;
	private String _division;
	private String _department;
	private String _costCenter;
	private String _officePhone;
	private String _mobilePhone;
	private String _email;
	private String _positionType;
	private boolean _isApplicantAgent;
	private boolean _isApproverAgent;
	private String _processType;
	private String _subProcessType;
	private Date _submittedDate;
	private String _comments;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _totalLeaveEntitlement;
	private String _totalDuration;
	private String _remainingLeaveDaysBefore;
	private String _remainingLeaveDaysAfter;
	private long _columnBitmask;
	private ELeave _escapedModel;
}