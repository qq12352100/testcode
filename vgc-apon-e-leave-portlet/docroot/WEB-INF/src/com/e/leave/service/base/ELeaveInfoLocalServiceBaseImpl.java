/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.leave.service.base;

import com.e.leave.model.ELeaveInfo;
import com.e.leave.service.ELeaveInfoLocalService;
import com.e.leave.service.persistence.ELeaveInfoPersistence;
import com.e.leave.service.persistence.ELeavePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the e leave info local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.e.leave.service.impl.ELeaveInfoLocalServiceImpl}.
 * </p>
 *
 * @author EZEYIFE
 * @see com.e.leave.service.impl.ELeaveInfoLocalServiceImpl
 * @see com.e.leave.service.ELeaveInfoLocalServiceUtil
 * @generated
 */
public abstract class ELeaveInfoLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ELeaveInfoLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.e.leave.service.ELeaveInfoLocalServiceUtil} to access the e leave info local service.
	 */

	/**
	 * Adds the e leave info to the database. Also notifies the appropriate model listeners.
	 *
	 * @param eLeaveInfo the e leave info
	 * @return the e leave info that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ELeaveInfo addELeaveInfo(ELeaveInfo eLeaveInfo)
		throws SystemException {
		eLeaveInfo.setNew(true);

		return eLeaveInfoPersistence.update(eLeaveInfo);
	}

	/**
	 * Creates a new e leave info with the primary key. Does not add the e leave info to the database.
	 *
	 * @param eLeaveInfoId the primary key for the new e leave info
	 * @return the new e leave info
	 */
	@Override
	public ELeaveInfo createELeaveInfo(long eLeaveInfoId) {
		return eLeaveInfoPersistence.create(eLeaveInfoId);
	}

	/**
	 * Deletes the e leave info with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eLeaveInfoId the primary key of the e leave info
	 * @return the e leave info that was removed
	 * @throws PortalException if a e leave info with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ELeaveInfo deleteELeaveInfo(long eLeaveInfoId)
		throws PortalException, SystemException {
		return eLeaveInfoPersistence.remove(eLeaveInfoId);
	}

	/**
	 * Deletes the e leave info from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eLeaveInfo the e leave info
	 * @return the e leave info that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ELeaveInfo deleteELeaveInfo(ELeaveInfo eLeaveInfo)
		throws SystemException {
		return eLeaveInfoPersistence.remove(eLeaveInfo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ELeaveInfo.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return eLeaveInfoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.e.leave.model.impl.ELeaveInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return eLeaveInfoPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.e.leave.model.impl.ELeaveInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return eLeaveInfoPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return eLeaveInfoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return eLeaveInfoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ELeaveInfo fetchELeaveInfo(long eLeaveInfoId)
		throws SystemException {
		return eLeaveInfoPersistence.fetchByPrimaryKey(eLeaveInfoId);
	}

	/**
	 * Returns the e leave info with the primary key.
	 *
	 * @param eLeaveInfoId the primary key of the e leave info
	 * @return the e leave info
	 * @throws PortalException if a e leave info with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ELeaveInfo getELeaveInfo(long eLeaveInfoId)
		throws PortalException, SystemException {
		return eLeaveInfoPersistence.findByPrimaryKey(eLeaveInfoId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return eLeaveInfoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the e leave infos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.e.leave.model.impl.ELeaveInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of e leave infos
	 * @param end the upper bound of the range of e leave infos (not inclusive)
	 * @return the range of e leave infos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ELeaveInfo> getELeaveInfos(int start, int end)
		throws SystemException {
		return eLeaveInfoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of e leave infos.
	 *
	 * @return the number of e leave infos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getELeaveInfosCount() throws SystemException {
		return eLeaveInfoPersistence.countAll();
	}

	/**
	 * Updates the e leave info in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param eLeaveInfo the e leave info
	 * @return the e leave info that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ELeaveInfo updateELeaveInfo(ELeaveInfo eLeaveInfo)
		throws SystemException {
		return eLeaveInfoPersistence.update(eLeaveInfo);
	}

	/**
	 * Returns the e leave local service.
	 *
	 * @return the e leave local service
	 */
	public com.e.leave.service.ELeaveLocalService getELeaveLocalService() {
		return eLeaveLocalService;
	}

	/**
	 * Sets the e leave local service.
	 *
	 * @param eLeaveLocalService the e leave local service
	 */
	public void setELeaveLocalService(
		com.e.leave.service.ELeaveLocalService eLeaveLocalService) {
		this.eLeaveLocalService = eLeaveLocalService;
	}

	/**
	 * Returns the e leave remote service.
	 *
	 * @return the e leave remote service
	 */
	public com.e.leave.service.ELeaveService getELeaveService() {
		return eLeaveService;
	}

	/**
	 * Sets the e leave remote service.
	 *
	 * @param eLeaveService the e leave remote service
	 */
	public void setELeaveService(
		com.e.leave.service.ELeaveService eLeaveService) {
		this.eLeaveService = eLeaveService;
	}

	/**
	 * Returns the e leave persistence.
	 *
	 * @return the e leave persistence
	 */
	public ELeavePersistence getELeavePersistence() {
		return eLeavePersistence;
	}

	/**
	 * Sets the e leave persistence.
	 *
	 * @param eLeavePersistence the e leave persistence
	 */
	public void setELeavePersistence(ELeavePersistence eLeavePersistence) {
		this.eLeavePersistence = eLeavePersistence;
	}

	/**
	 * Returns the e leave info local service.
	 *
	 * @return the e leave info local service
	 */
	public com.e.leave.service.ELeaveInfoLocalService getELeaveInfoLocalService() {
		return eLeaveInfoLocalService;
	}

	/**
	 * Sets the e leave info local service.
	 *
	 * @param eLeaveInfoLocalService the e leave info local service
	 */
	public void setELeaveInfoLocalService(
		com.e.leave.service.ELeaveInfoLocalService eLeaveInfoLocalService) {
		this.eLeaveInfoLocalService = eLeaveInfoLocalService;
	}

	/**
	 * Returns the e leave info remote service.
	 *
	 * @return the e leave info remote service
	 */
	public com.e.leave.service.ELeaveInfoService getELeaveInfoService() {
		return eLeaveInfoService;
	}

	/**
	 * Sets the e leave info remote service.
	 *
	 * @param eLeaveInfoService the e leave info remote service
	 */
	public void setELeaveInfoService(
		com.e.leave.service.ELeaveInfoService eLeaveInfoService) {
		this.eLeaveInfoService = eLeaveInfoService;
	}

	/**
	 * Returns the e leave info persistence.
	 *
	 * @return the e leave info persistence
	 */
	public ELeaveInfoPersistence getELeaveInfoPersistence() {
		return eLeaveInfoPersistence;
	}

	/**
	 * Sets the e leave info persistence.
	 *
	 * @param eLeaveInfoPersistence the e leave info persistence
	 */
	public void setELeaveInfoPersistence(
		ELeaveInfoPersistence eLeaveInfoPersistence) {
		this.eLeaveInfoPersistence = eLeaveInfoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.e.leave.model.ELeaveInfo",
			eLeaveInfoLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.e.leave.model.ELeaveInfo");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ELeaveInfo.class;
	}

	protected String getModelClassName() {
		return ELeaveInfo.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eLeaveInfoPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.e.leave.service.ELeaveLocalService.class)
	protected com.e.leave.service.ELeaveLocalService eLeaveLocalService;
	@BeanReference(type = com.e.leave.service.ELeaveService.class)
	protected com.e.leave.service.ELeaveService eLeaveService;
	@BeanReference(type = ELeavePersistence.class)
	protected ELeavePersistence eLeavePersistence;
	@BeanReference(type = com.e.leave.service.ELeaveInfoLocalService.class)
	protected com.e.leave.service.ELeaveInfoLocalService eLeaveInfoLocalService;
	@BeanReference(type = com.e.leave.service.ELeaveInfoService.class)
	protected com.e.leave.service.ELeaveInfoService eLeaveInfoService;
	@BeanReference(type = ELeaveInfoPersistence.class)
	protected ELeaveInfoPersistence eLeaveInfoPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ELeaveInfoLocalServiceClpInvoker _clpInvoker = new ELeaveInfoLocalServiceClpInvoker();
}