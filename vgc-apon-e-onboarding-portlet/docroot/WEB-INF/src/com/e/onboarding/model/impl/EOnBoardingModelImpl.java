/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.onboarding.model.impl;

import com.e.onboarding.model.EOnBoarding;
import com.e.onboarding.model.EOnBoardingModel;
import com.e.onboarding.model.EOnBoardingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EOnBoarding service. Represents a row in the &quot;vgcapon_EOnBoarding&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.e.onboarding.model.EOnBoardingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EOnBoardingImpl}.
 * </p>
 *
 * @author sanguine
 * @see EOnBoardingImpl
 * @see com.e.onboarding.model.EOnBoarding
 * @see com.e.onboarding.model.EOnBoardingModel
 * @generated
 */
@JSON(strict = true)
public class EOnBoardingModelImpl extends BaseModelImpl<EOnBoarding>
	implements EOnBoardingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e on boarding model instance should use the {@link com.e.onboarding.model.EOnBoarding} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_EOnBoarding";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eOnBoardingId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "processType", Types.VARCHAR },
			{ "subType", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "submittedDate", Types.TIMESTAMP },
			{ "modifiedUserId", Types.BIGINT },
			{ "modifiedUserName", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "staffCode", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "firstName", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "birthday", Types.TIMESTAMP },
			{ "photoPath", Types.VARCHAR },
			{ "contractType", Types.VARCHAR },
			{ "workLocation", Types.VARCHAR },
			{ "division", Types.VARCHAR },
			{ "officeSite", Types.VARCHAR },
			{ "department", Types.VARCHAR },
			{ "startingDate", Types.TIMESTAMP },
			{ "positionCode", Types.VARCHAR },
			{ "serviceLength", Types.VARCHAR },
			{ "functionName", Types.VARCHAR },
			{ "reportTo", Types.VARCHAR },
			{ "reportToStaffName", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "costCenter", Types.VARCHAR },
			{ "itRelatedHardware", Types.BOOLEAN },
			{ "companyCar", Types.BOOLEAN },
			{ "replacement", Types.BOOLEAN },
			{ "nameOfReplacedPerson", Types.VARCHAR },
			{ "contactInfo", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "isApplicantAgent", Types.BOOLEAN },
			{ "isApproverAgent", Types.BOOLEAN },
			{ "adminEntitlement", Types.VARCHAR },
			{ "adminSeatNo", Types.VARCHAR },
			{ "adminTasks", Types.VARCHAR },
			{ "adminStatus", Types.VARCHAR },
			{ "adminComments", Types.VARCHAR },
			{ "securityTasks", Types.VARCHAR },
			{ "securityStatus", Types.VARCHAR },
			{ "securityComments", Types.VARCHAR },
			{ "itpTasks", Types.VARCHAR },
			{ "itpStatus", Types.VARCHAR },
			{ "iptComments", Types.VARCHAR },
			{ "financeTasks", Types.VARCHAR },
			{ "financeStatus", Types.VARCHAR },
			{ "financeComments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_EOnBoarding (eOnBoardingId LONG not null primary key,ticketNo VARCHAR(75) null,processType VARCHAR(75) null,subType VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,submittedDate DATE null,modifiedUserId LONG,modifiedUserName VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,staffCode VARCHAR(75) null,lastName VARCHAR(75) null,firstName VARCHAR(75) null,name VARCHAR(75) null,gender VARCHAR(75) null,birthday DATE null,photoPath VARCHAR(250) null,contractType VARCHAR(75) null,workLocation VARCHAR(75) null,division VARCHAR(75) null,officeSite VARCHAR(75) null,department VARCHAR(75) null,startingDate DATE null,positionCode VARCHAR(75) null,serviceLength VARCHAR(75) null,functionName VARCHAR(75) null,reportTo VARCHAR(75) null,reportToStaffName VARCHAR(75) null,title VARCHAR(75) null,costCenter VARCHAR(75) null,itRelatedHardware BOOLEAN,companyCar BOOLEAN,replacement BOOLEAN,nameOfReplacedPerson VARCHAR(75) null,contactInfo VARCHAR(250) null,comments VARCHAR(250) null,isApplicantAgent BOOLEAN,isApproverAgent BOOLEAN,adminEntitlement VARCHAR(75) null,adminSeatNo VARCHAR(75) null,adminTasks VARCHAR(250) null,adminStatus VARCHAR(75) null,adminComments VARCHAR(250) null,securityTasks VARCHAR(250) null,securityStatus VARCHAR(75) null,securityComments VARCHAR(250) null,itpTasks VARCHAR(250) null,itpStatus VARCHAR(75) null,iptComments VARCHAR(250) null,financeTasks VARCHAR(250) null,financeStatus VARCHAR(75) null,financeComments VARCHAR(250) null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_EOnBoarding";
	public static final String ORDER_BY_JPQL = " ORDER BY eOnBoarding.eOnBoardingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_EOnBoarding.eOnBoardingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.e.onboarding.model.EOnBoarding"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.e.onboarding.model.EOnBoarding"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.e.onboarding.model.EOnBoarding"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long EONBOARDINGID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EOnBoarding toModel(EOnBoardingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EOnBoarding model = new EOnBoardingImpl();

		model.setEOnBoardingId(soapModel.getEOnBoardingId());
		model.setTicketNo(soapModel.getTicketNo());
		model.setProcessType(soapModel.getProcessType());
		model.setSubType(soapModel.getSubType());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSubmittedDate(soapModel.getSubmittedDate());
		model.setModifiedUserId(soapModel.getModifiedUserId());
		model.setModifiedUserName(soapModel.getModifiedUserName());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setStaffCode(soapModel.getStaffCode());
		model.setLastName(soapModel.getLastName());
		model.setFirstName(soapModel.getFirstName());
		model.setName(soapModel.getName());
		model.setGender(soapModel.getGender());
		model.setBirthday(soapModel.getBirthday());
		model.setPhotoPath(soapModel.getPhotoPath());
		model.setContractType(soapModel.getContractType());
		model.setWorkLocation(soapModel.getWorkLocation());
		model.setDivision(soapModel.getDivision());
		model.setOfficeSite(soapModel.getOfficeSite());
		model.setDepartment(soapModel.getDepartment());
		model.setStartingDate(soapModel.getStartingDate());
		model.setPositionCode(soapModel.getPositionCode());
		model.setServiceLength(soapModel.getServiceLength());
		model.setFunctionName(soapModel.getFunctionName());
		model.setReportTo(soapModel.getReportTo());
		model.setReportToStaffName(soapModel.getReportToStaffName());
		model.setTitle(soapModel.getTitle());
		model.setCostCenter(soapModel.getCostCenter());
		model.setItRelatedHardware(soapModel.getItRelatedHardware());
		model.setCompanyCar(soapModel.getCompanyCar());
		model.setReplacement(soapModel.getReplacement());
		model.setNameOfReplacedPerson(soapModel.getNameOfReplacedPerson());
		model.setContactInfo(soapModel.getContactInfo());
		model.setComments(soapModel.getComments());
		model.setIsApplicantAgent(soapModel.getIsApplicantAgent());
		model.setIsApproverAgent(soapModel.getIsApproverAgent());
		model.setAdminEntitlement(soapModel.getAdminEntitlement());
		model.setAdminSeatNo(soapModel.getAdminSeatNo());
		model.setAdminTasks(soapModel.getAdminTasks());
		model.setAdminStatus(soapModel.getAdminStatus());
		model.setAdminComments(soapModel.getAdminComments());
		model.setSecurityTasks(soapModel.getSecurityTasks());
		model.setSecurityStatus(soapModel.getSecurityStatus());
		model.setSecurityComments(soapModel.getSecurityComments());
		model.setItpTasks(soapModel.getItpTasks());
		model.setItpStatus(soapModel.getItpStatus());
		model.setIptComments(soapModel.getIptComments());
		model.setFinanceTasks(soapModel.getFinanceTasks());
		model.setFinanceStatus(soapModel.getFinanceStatus());
		model.setFinanceComments(soapModel.getFinanceComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EOnBoarding> toModels(EOnBoardingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EOnBoarding> models = new ArrayList<EOnBoarding>(soapModels.length);

		for (EOnBoardingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.e.onboarding.model.EOnBoarding"));

	public EOnBoardingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eOnBoardingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEOnBoardingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eOnBoardingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EOnBoarding.class;
	}

	@Override
	public String getModelClassName() {
		return EOnBoarding.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eOnBoardingId", getEOnBoardingId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("processType", getProcessType());
		attributes.put("subType", getSubType());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("submittedDate", getSubmittedDate());
		attributes.put("modifiedUserId", getModifiedUserId());
		attributes.put("modifiedUserName", getModifiedUserName());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("staffCode", getStaffCode());
		attributes.put("lastName", getLastName());
		attributes.put("firstName", getFirstName());
		attributes.put("name", getName());
		attributes.put("gender", getGender());
		attributes.put("birthday", getBirthday());
		attributes.put("photoPath", getPhotoPath());
		attributes.put("contractType", getContractType());
		attributes.put("workLocation", getWorkLocation());
		attributes.put("division", getDivision());
		attributes.put("officeSite", getOfficeSite());
		attributes.put("department", getDepartment());
		attributes.put("startingDate", getStartingDate());
		attributes.put("positionCode", getPositionCode());
		attributes.put("serviceLength", getServiceLength());
		attributes.put("functionName", getFunctionName());
		attributes.put("reportTo", getReportTo());
		attributes.put("reportToStaffName", getReportToStaffName());
		attributes.put("title", getTitle());
		attributes.put("costCenter", getCostCenter());
		attributes.put("itRelatedHardware", getItRelatedHardware());
		attributes.put("companyCar", getCompanyCar());
		attributes.put("replacement", getReplacement());
		attributes.put("nameOfReplacedPerson", getNameOfReplacedPerson());
		attributes.put("contactInfo", getContactInfo());
		attributes.put("comments", getComments());
		attributes.put("isApplicantAgent", getIsApplicantAgent());
		attributes.put("isApproverAgent", getIsApproverAgent());
		attributes.put("adminEntitlement", getAdminEntitlement());
		attributes.put("adminSeatNo", getAdminSeatNo());
		attributes.put("adminTasks", getAdminTasks());
		attributes.put("adminStatus", getAdminStatus());
		attributes.put("adminComments", getAdminComments());
		attributes.put("securityTasks", getSecurityTasks());
		attributes.put("securityStatus", getSecurityStatus());
		attributes.put("securityComments", getSecurityComments());
		attributes.put("itpTasks", getItpTasks());
		attributes.put("itpStatus", getItpStatus());
		attributes.put("iptComments", getIptComments());
		attributes.put("financeTasks", getFinanceTasks());
		attributes.put("financeStatus", getFinanceStatus());
		attributes.put("financeComments", getFinanceComments());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eOnBoardingId = (Long)attributes.get("eOnBoardingId");

		if (eOnBoardingId != null) {
			setEOnBoardingId(eOnBoardingId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		String subType = (String)attributes.get("subType");

		if (subType != null) {
			setSubType(subType);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date submittedDate = (Date)attributes.get("submittedDate");

		if (submittedDate != null) {
			setSubmittedDate(submittedDate);
		}

		Long modifiedUserId = (Long)attributes.get("modifiedUserId");

		if (modifiedUserId != null) {
			setModifiedUserId(modifiedUserId);
		}

		String modifiedUserName = (String)attributes.get("modifiedUserName");

		if (modifiedUserName != null) {
			setModifiedUserName(modifiedUserName);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String staffCode = (String)attributes.get("staffCode");

		if (staffCode != null) {
			setStaffCode(staffCode);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Date birthday = (Date)attributes.get("birthday");

		if (birthday != null) {
			setBirthday(birthday);
		}

		String photoPath = (String)attributes.get("photoPath");

		if (photoPath != null) {
			setPhotoPath(photoPath);
		}

		String contractType = (String)attributes.get("contractType");

		if (contractType != null) {
			setContractType(contractType);
		}

		String workLocation = (String)attributes.get("workLocation");

		if (workLocation != null) {
			setWorkLocation(workLocation);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String officeSite = (String)attributes.get("officeSite");

		if (officeSite != null) {
			setOfficeSite(officeSite);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		Date startingDate = (Date)attributes.get("startingDate");

		if (startingDate != null) {
			setStartingDate(startingDate);
		}

		String positionCode = (String)attributes.get("positionCode");

		if (positionCode != null) {
			setPositionCode(positionCode);
		}

		String serviceLength = (String)attributes.get("serviceLength");

		if (serviceLength != null) {
			setServiceLength(serviceLength);
		}

		String functionName = (String)attributes.get("functionName");

		if (functionName != null) {
			setFunctionName(functionName);
		}

		String reportTo = (String)attributes.get("reportTo");

		if (reportTo != null) {
			setReportTo(reportTo);
		}

		String reportToStaffName = (String)attributes.get("reportToStaffName");

		if (reportToStaffName != null) {
			setReportToStaffName(reportToStaffName);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String costCenter = (String)attributes.get("costCenter");

		if (costCenter != null) {
			setCostCenter(costCenter);
		}

		Boolean itRelatedHardware = (Boolean)attributes.get("itRelatedHardware");

		if (itRelatedHardware != null) {
			setItRelatedHardware(itRelatedHardware);
		}

		Boolean companyCar = (Boolean)attributes.get("companyCar");

		if (companyCar != null) {
			setCompanyCar(companyCar);
		}

		Boolean replacement = (Boolean)attributes.get("replacement");

		if (replacement != null) {
			setReplacement(replacement);
		}

		String nameOfReplacedPerson = (String)attributes.get(
				"nameOfReplacedPerson");

		if (nameOfReplacedPerson != null) {
			setNameOfReplacedPerson(nameOfReplacedPerson);
		}

		String contactInfo = (String)attributes.get("contactInfo");

		if (contactInfo != null) {
			setContactInfo(contactInfo);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Boolean isApplicantAgent = (Boolean)attributes.get("isApplicantAgent");

		if (isApplicantAgent != null) {
			setIsApplicantAgent(isApplicantAgent);
		}

		Boolean isApproverAgent = (Boolean)attributes.get("isApproverAgent");

		if (isApproverAgent != null) {
			setIsApproverAgent(isApproverAgent);
		}

		String adminEntitlement = (String)attributes.get("adminEntitlement");

		if (adminEntitlement != null) {
			setAdminEntitlement(adminEntitlement);
		}

		String adminSeatNo = (String)attributes.get("adminSeatNo");

		if (adminSeatNo != null) {
			setAdminSeatNo(adminSeatNo);
		}

		String adminTasks = (String)attributes.get("adminTasks");

		if (adminTasks != null) {
			setAdminTasks(adminTasks);
		}

		String adminStatus = (String)attributes.get("adminStatus");

		if (adminStatus != null) {
			setAdminStatus(adminStatus);
		}

		String adminComments = (String)attributes.get("adminComments");

		if (adminComments != null) {
			setAdminComments(adminComments);
		}

		String securityTasks = (String)attributes.get("securityTasks");

		if (securityTasks != null) {
			setSecurityTasks(securityTasks);
		}

		String securityStatus = (String)attributes.get("securityStatus");

		if (securityStatus != null) {
			setSecurityStatus(securityStatus);
		}

		String securityComments = (String)attributes.get("securityComments");

		if (securityComments != null) {
			setSecurityComments(securityComments);
		}

		String itpTasks = (String)attributes.get("itpTasks");

		if (itpTasks != null) {
			setItpTasks(itpTasks);
		}

		String itpStatus = (String)attributes.get("itpStatus");

		if (itpStatus != null) {
			setItpStatus(itpStatus);
		}

		String iptComments = (String)attributes.get("iptComments");

		if (iptComments != null) {
			setIptComments(iptComments);
		}

		String financeTasks = (String)attributes.get("financeTasks");

		if (financeTasks != null) {
			setFinanceTasks(financeTasks);
		}

		String financeStatus = (String)attributes.get("financeStatus");

		if (financeStatus != null) {
			setFinanceStatus(financeStatus);
		}

		String financeComments = (String)attributes.get("financeComments");

		if (financeComments != null) {
			setFinanceComments(financeComments);
		}
	}

	@JSON
	@Override
	public long getEOnBoardingId() {
		return _eOnBoardingId;
	}

	@Override
	public void setEOnBoardingId(long eOnBoardingId) {
		_eOnBoardingId = eOnBoardingId;
	}

	@JSON
	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_ticketNo = ticketNo;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return StringPool.BLANK;
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_processType = processType;
	}

	@JSON
	@Override
	public String getSubType() {
		if (_subType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subType;
		}
	}

	@Override
	public void setSubType(String subType) {
		_subType = subType;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@JSON
	@Override
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	@Override
	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	@Override
	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_modifiedUserUuid);
	}

	@Override
	public void setModifiedUserUuid(String modifiedUserUuid) {
		_modifiedUserUuid = modifiedUserUuid;
	}

	@JSON
	@Override
	public String getModifiedUserName() {
		if (_modifiedUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedUserName;
		}
	}

	@Override
	public void setModifiedUserName(String modifiedUserName) {
		_modifiedUserName = modifiedUserName;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getStaffCode() {
		if (_staffCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffCode;
		}
	}

	@Override
	public void setStaffCode(String staffCode) {
		_staffCode = staffCode;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		_birthday = birthday;
	}

	@JSON
	@Override
	public String getPhotoPath() {
		if (_photoPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _photoPath;
		}
	}

	@Override
	public void setPhotoPath(String photoPath) {
		_photoPath = photoPath;
	}

	@JSON
	@Override
	public String getContractType() {
		if (_contractType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractType;
		}
	}

	@Override
	public void setContractType(String contractType) {
		_contractType = contractType;
	}

	@JSON
	@Override
	public String getWorkLocation() {
		if (_workLocation == null) {
			return StringPool.BLANK;
		}
		else {
			return _workLocation;
		}
	}

	@Override
	public void setWorkLocation(String workLocation) {
		_workLocation = workLocation;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getOfficeSite() {
		if (_officeSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _officeSite;
		}
	}

	@Override
	public void setOfficeSite(String officeSite) {
		_officeSite = officeSite;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	@Override
	public Date getStartingDate() {
		return _startingDate;
	}

	@Override
	public void setStartingDate(Date startingDate) {
		_startingDate = startingDate;
	}

	@JSON
	@Override
	public String getPositionCode() {
		if (_positionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionCode;
		}
	}

	@Override
	public void setPositionCode(String positionCode) {
		_positionCode = positionCode;
	}

	@JSON
	@Override
	public String getServiceLength() {
		if (_serviceLength == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceLength;
		}
	}

	@Override
	public void setServiceLength(String serviceLength) {
		_serviceLength = serviceLength;
	}

	@JSON
	@Override
	public String getFunctionName() {
		if (_functionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionName;
		}
	}

	@Override
	public void setFunctionName(String functionName) {
		_functionName = functionName;
	}

	@JSON
	@Override
	public String getReportTo() {
		if (_reportTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportTo;
		}
	}

	@Override
	public void setReportTo(String reportTo) {
		_reportTo = reportTo;
	}

	@JSON
	@Override
	public String getReportToStaffName() {
		if (_reportToStaffName == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportToStaffName;
		}
	}

	@Override
	public void setReportToStaffName(String reportToStaffName) {
		_reportToStaffName = reportToStaffName;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getCostCenter() {
		if (_costCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _costCenter;
		}
	}

	@Override
	public void setCostCenter(String costCenter) {
		_costCenter = costCenter;
	}

	@JSON
	@Override
	public boolean getItRelatedHardware() {
		return _itRelatedHardware;
	}

	@Override
	public boolean isItRelatedHardware() {
		return _itRelatedHardware;
	}

	@Override
	public void setItRelatedHardware(boolean itRelatedHardware) {
		_itRelatedHardware = itRelatedHardware;
	}

	@JSON
	@Override
	public boolean getCompanyCar() {
		return _companyCar;
	}

	@Override
	public boolean isCompanyCar() {
		return _companyCar;
	}

	@Override
	public void setCompanyCar(boolean companyCar) {
		_companyCar = companyCar;
	}

	@JSON
	@Override
	public boolean getReplacement() {
		return _replacement;
	}

	@Override
	public boolean isReplacement() {
		return _replacement;
	}

	@Override
	public void setReplacement(boolean replacement) {
		_replacement = replacement;
	}

	@JSON
	@Override
	public String getNameOfReplacedPerson() {
		if (_nameOfReplacedPerson == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfReplacedPerson;
		}
	}

	@Override
	public void setNameOfReplacedPerson(String nameOfReplacedPerson) {
		_nameOfReplacedPerson = nameOfReplacedPerson;
	}

	@JSON
	@Override
	public String getContactInfo() {
		if (_contactInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactInfo;
		}
	}

	@Override
	public void setContactInfo(String contactInfo) {
		_contactInfo = contactInfo;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public boolean getIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public boolean isIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public void setIsApplicantAgent(boolean isApplicantAgent) {
		_isApplicantAgent = isApplicantAgent;
	}

	@JSON
	@Override
	public boolean getIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public boolean isIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public void setIsApproverAgent(boolean isApproverAgent) {
		_isApproverAgent = isApproverAgent;
	}

	@JSON
	@Override
	public String getAdminEntitlement() {
		if (_adminEntitlement == null) {
			return StringPool.BLANK;
		}
		else {
			return _adminEntitlement;
		}
	}

	@Override
	public void setAdminEntitlement(String adminEntitlement) {
		_adminEntitlement = adminEntitlement;
	}

	@JSON
	@Override
	public String getAdminSeatNo() {
		if (_adminSeatNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _adminSeatNo;
		}
	}

	@Override
	public void setAdminSeatNo(String adminSeatNo) {
		_adminSeatNo = adminSeatNo;
	}

	@JSON
	@Override
	public String getAdminTasks() {
		if (_adminTasks == null) {
			return StringPool.BLANK;
		}
		else {
			return _adminTasks;
		}
	}

	@Override
	public void setAdminTasks(String adminTasks) {
		_adminTasks = adminTasks;
	}

	@JSON
	@Override
	public String getAdminStatus() {
		if (_adminStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _adminStatus;
		}
	}

	@Override
	public void setAdminStatus(String adminStatus) {
		_adminStatus = adminStatus;
	}

	@JSON
	@Override
	public String getAdminComments() {
		if (_adminComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _adminComments;
		}
	}

	@Override
	public void setAdminComments(String adminComments) {
		_adminComments = adminComments;
	}

	@JSON
	@Override
	public String getSecurityTasks() {
		if (_securityTasks == null) {
			return StringPool.BLANK;
		}
		else {
			return _securityTasks;
		}
	}

	@Override
	public void setSecurityTasks(String securityTasks) {
		_securityTasks = securityTasks;
	}

	@JSON
	@Override
	public String getSecurityStatus() {
		if (_securityStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _securityStatus;
		}
	}

	@Override
	public void setSecurityStatus(String securityStatus) {
		_securityStatus = securityStatus;
	}

	@JSON
	@Override
	public String getSecurityComments() {
		if (_securityComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _securityComments;
		}
	}

	@Override
	public void setSecurityComments(String securityComments) {
		_securityComments = securityComments;
	}

	@JSON
	@Override
	public String getItpTasks() {
		if (_itpTasks == null) {
			return StringPool.BLANK;
		}
		else {
			return _itpTasks;
		}
	}

	@Override
	public void setItpTasks(String itpTasks) {
		_itpTasks = itpTasks;
	}

	@JSON
	@Override
	public String getItpStatus() {
		if (_itpStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _itpStatus;
		}
	}

	@Override
	public void setItpStatus(String itpStatus) {
		_itpStatus = itpStatus;
	}

	@JSON
	@Override
	public String getIptComments() {
		if (_iptComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _iptComments;
		}
	}

	@Override
	public void setIptComments(String iptComments) {
		_iptComments = iptComments;
	}

	@JSON
	@Override
	public String getFinanceTasks() {
		if (_financeTasks == null) {
			return StringPool.BLANK;
		}
		else {
			return _financeTasks;
		}
	}

	@Override
	public void setFinanceTasks(String financeTasks) {
		_financeTasks = financeTasks;
	}

	@JSON
	@Override
	public String getFinanceStatus() {
		if (_financeStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _financeStatus;
		}
	}

	@Override
	public void setFinanceStatus(String financeStatus) {
		_financeStatus = financeStatus;
	}

	@JSON
	@Override
	public String getFinanceComments() {
		if (_financeComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _financeComments;
		}
	}

	@Override
	public void setFinanceComments(String financeComments) {
		_financeComments = financeComments;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EOnBoarding.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EOnBoarding toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EOnBoarding)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EOnBoardingImpl eOnBoardingImpl = new EOnBoardingImpl();

		eOnBoardingImpl.setEOnBoardingId(getEOnBoardingId());
		eOnBoardingImpl.setTicketNo(getTicketNo());
		eOnBoardingImpl.setProcessType(getProcessType());
		eOnBoardingImpl.setSubType(getSubType());
		eOnBoardingImpl.setGroupId(getGroupId());
		eOnBoardingImpl.setCompanyId(getCompanyId());
		eOnBoardingImpl.setUserId(getUserId());
		eOnBoardingImpl.setUserName(getUserName());
		eOnBoardingImpl.setCreateDate(getCreateDate());
		eOnBoardingImpl.setModifiedDate(getModifiedDate());
		eOnBoardingImpl.setSubmittedDate(getSubmittedDate());
		eOnBoardingImpl.setModifiedUserId(getModifiedUserId());
		eOnBoardingImpl.setModifiedUserName(getModifiedUserName());
		eOnBoardingImpl.setStatus(getStatus());
		eOnBoardingImpl.setStatusByUserId(getStatusByUserId());
		eOnBoardingImpl.setStatusByUserName(getStatusByUserName());
		eOnBoardingImpl.setStatusDate(getStatusDate());
		eOnBoardingImpl.setStaffCode(getStaffCode());
		eOnBoardingImpl.setLastName(getLastName());
		eOnBoardingImpl.setFirstName(getFirstName());
		eOnBoardingImpl.setName(getName());
		eOnBoardingImpl.setGender(getGender());
		eOnBoardingImpl.setBirthday(getBirthday());
		eOnBoardingImpl.setPhotoPath(getPhotoPath());
		eOnBoardingImpl.setContractType(getContractType());
		eOnBoardingImpl.setWorkLocation(getWorkLocation());
		eOnBoardingImpl.setDivision(getDivision());
		eOnBoardingImpl.setOfficeSite(getOfficeSite());
		eOnBoardingImpl.setDepartment(getDepartment());
		eOnBoardingImpl.setStartingDate(getStartingDate());
		eOnBoardingImpl.setPositionCode(getPositionCode());
		eOnBoardingImpl.setServiceLength(getServiceLength());
		eOnBoardingImpl.setFunctionName(getFunctionName());
		eOnBoardingImpl.setReportTo(getReportTo());
		eOnBoardingImpl.setReportToStaffName(getReportToStaffName());
		eOnBoardingImpl.setTitle(getTitle());
		eOnBoardingImpl.setCostCenter(getCostCenter());
		eOnBoardingImpl.setItRelatedHardware(getItRelatedHardware());
		eOnBoardingImpl.setCompanyCar(getCompanyCar());
		eOnBoardingImpl.setReplacement(getReplacement());
		eOnBoardingImpl.setNameOfReplacedPerson(getNameOfReplacedPerson());
		eOnBoardingImpl.setContactInfo(getContactInfo());
		eOnBoardingImpl.setComments(getComments());
		eOnBoardingImpl.setIsApplicantAgent(getIsApplicantAgent());
		eOnBoardingImpl.setIsApproverAgent(getIsApproverAgent());
		eOnBoardingImpl.setAdminEntitlement(getAdminEntitlement());
		eOnBoardingImpl.setAdminSeatNo(getAdminSeatNo());
		eOnBoardingImpl.setAdminTasks(getAdminTasks());
		eOnBoardingImpl.setAdminStatus(getAdminStatus());
		eOnBoardingImpl.setAdminComments(getAdminComments());
		eOnBoardingImpl.setSecurityTasks(getSecurityTasks());
		eOnBoardingImpl.setSecurityStatus(getSecurityStatus());
		eOnBoardingImpl.setSecurityComments(getSecurityComments());
		eOnBoardingImpl.setItpTasks(getItpTasks());
		eOnBoardingImpl.setItpStatus(getItpStatus());
		eOnBoardingImpl.setIptComments(getIptComments());
		eOnBoardingImpl.setFinanceTasks(getFinanceTasks());
		eOnBoardingImpl.setFinanceStatus(getFinanceStatus());
		eOnBoardingImpl.setFinanceComments(getFinanceComments());

		eOnBoardingImpl.resetOriginalValues();

		return eOnBoardingImpl;
	}

	@Override
	public int compareTo(EOnBoarding eOnBoarding) {
		long primaryKey = eOnBoarding.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EOnBoarding)) {
			return false;
		}

		EOnBoarding eOnBoarding = (EOnBoarding)obj;

		long primaryKey = eOnBoarding.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EOnBoardingModelImpl eOnBoardingModelImpl = this;

		eOnBoardingModelImpl._originalUserId = eOnBoardingModelImpl._userId;

		eOnBoardingModelImpl._setOriginalUserId = false;

		eOnBoardingModelImpl._originalStatus = eOnBoardingModelImpl._status;

		eOnBoardingModelImpl._setOriginalStatus = false;

		eOnBoardingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EOnBoarding> toCacheModel() {
		EOnBoardingCacheModel eOnBoardingCacheModel = new EOnBoardingCacheModel();

		eOnBoardingCacheModel.eOnBoardingId = getEOnBoardingId();

		eOnBoardingCacheModel.ticketNo = getTicketNo();

		String ticketNo = eOnBoardingCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			eOnBoardingCacheModel.ticketNo = null;
		}

		eOnBoardingCacheModel.processType = getProcessType();

		String processType = eOnBoardingCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			eOnBoardingCacheModel.processType = null;
		}

		eOnBoardingCacheModel.subType = getSubType();

		String subType = eOnBoardingCacheModel.subType;

		if ((subType != null) && (subType.length() == 0)) {
			eOnBoardingCacheModel.subType = null;
		}

		eOnBoardingCacheModel.groupId = getGroupId();

		eOnBoardingCacheModel.companyId = getCompanyId();

		eOnBoardingCacheModel.userId = getUserId();

		eOnBoardingCacheModel.userName = getUserName();

		String userName = eOnBoardingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eOnBoardingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eOnBoardingCacheModel.createDate = createDate.getTime();
		}
		else {
			eOnBoardingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eOnBoardingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eOnBoardingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			eOnBoardingCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			eOnBoardingCacheModel.submittedDate = Long.MIN_VALUE;
		}

		eOnBoardingCacheModel.modifiedUserId = getModifiedUserId();

		eOnBoardingCacheModel.modifiedUserName = getModifiedUserName();

		String modifiedUserName = eOnBoardingCacheModel.modifiedUserName;

		if ((modifiedUserName != null) && (modifiedUserName.length() == 0)) {
			eOnBoardingCacheModel.modifiedUserName = null;
		}

		eOnBoardingCacheModel.status = getStatus();

		eOnBoardingCacheModel.statusByUserId = getStatusByUserId();

		eOnBoardingCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = eOnBoardingCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			eOnBoardingCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			eOnBoardingCacheModel.statusDate = statusDate.getTime();
		}
		else {
			eOnBoardingCacheModel.statusDate = Long.MIN_VALUE;
		}

		eOnBoardingCacheModel.staffCode = getStaffCode();

		String staffCode = eOnBoardingCacheModel.staffCode;

		if ((staffCode != null) && (staffCode.length() == 0)) {
			eOnBoardingCacheModel.staffCode = null;
		}

		eOnBoardingCacheModel.lastName = getLastName();

		String lastName = eOnBoardingCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			eOnBoardingCacheModel.lastName = null;
		}

		eOnBoardingCacheModel.firstName = getFirstName();

		String firstName = eOnBoardingCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			eOnBoardingCacheModel.firstName = null;
		}

		eOnBoardingCacheModel.name = getName();

		String name = eOnBoardingCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			eOnBoardingCacheModel.name = null;
		}

		eOnBoardingCacheModel.gender = getGender();

		String gender = eOnBoardingCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			eOnBoardingCacheModel.gender = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			eOnBoardingCacheModel.birthday = birthday.getTime();
		}
		else {
			eOnBoardingCacheModel.birthday = Long.MIN_VALUE;
		}

		eOnBoardingCacheModel.photoPath = getPhotoPath();

		String photoPath = eOnBoardingCacheModel.photoPath;

		if ((photoPath != null) && (photoPath.length() == 0)) {
			eOnBoardingCacheModel.photoPath = null;
		}

		eOnBoardingCacheModel.contractType = getContractType();

		String contractType = eOnBoardingCacheModel.contractType;

		if ((contractType != null) && (contractType.length() == 0)) {
			eOnBoardingCacheModel.contractType = null;
		}

		eOnBoardingCacheModel.workLocation = getWorkLocation();

		String workLocation = eOnBoardingCacheModel.workLocation;

		if ((workLocation != null) && (workLocation.length() == 0)) {
			eOnBoardingCacheModel.workLocation = null;
		}

		eOnBoardingCacheModel.division = getDivision();

		String division = eOnBoardingCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			eOnBoardingCacheModel.division = null;
		}

		eOnBoardingCacheModel.officeSite = getOfficeSite();

		String officeSite = eOnBoardingCacheModel.officeSite;

		if ((officeSite != null) && (officeSite.length() == 0)) {
			eOnBoardingCacheModel.officeSite = null;
		}

		eOnBoardingCacheModel.department = getDepartment();

		String department = eOnBoardingCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			eOnBoardingCacheModel.department = null;
		}

		Date startingDate = getStartingDate();

		if (startingDate != null) {
			eOnBoardingCacheModel.startingDate = startingDate.getTime();
		}
		else {
			eOnBoardingCacheModel.startingDate = Long.MIN_VALUE;
		}

		eOnBoardingCacheModel.positionCode = getPositionCode();

		String positionCode = eOnBoardingCacheModel.positionCode;

		if ((positionCode != null) && (positionCode.length() == 0)) {
			eOnBoardingCacheModel.positionCode = null;
		}

		eOnBoardingCacheModel.serviceLength = getServiceLength();

		String serviceLength = eOnBoardingCacheModel.serviceLength;

		if ((serviceLength != null) && (serviceLength.length() == 0)) {
			eOnBoardingCacheModel.serviceLength = null;
		}

		eOnBoardingCacheModel.functionName = getFunctionName();

		String functionName = eOnBoardingCacheModel.functionName;

		if ((functionName != null) && (functionName.length() == 0)) {
			eOnBoardingCacheModel.functionName = null;
		}

		eOnBoardingCacheModel.reportTo = getReportTo();

		String reportTo = eOnBoardingCacheModel.reportTo;

		if ((reportTo != null) && (reportTo.length() == 0)) {
			eOnBoardingCacheModel.reportTo = null;
		}

		eOnBoardingCacheModel.reportToStaffName = getReportToStaffName();

		String reportToStaffName = eOnBoardingCacheModel.reportToStaffName;

		if ((reportToStaffName != null) && (reportToStaffName.length() == 0)) {
			eOnBoardingCacheModel.reportToStaffName = null;
		}

		eOnBoardingCacheModel.title = getTitle();

		String title = eOnBoardingCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			eOnBoardingCacheModel.title = null;
		}

		eOnBoardingCacheModel.costCenter = getCostCenter();

		String costCenter = eOnBoardingCacheModel.costCenter;

		if ((costCenter != null) && (costCenter.length() == 0)) {
			eOnBoardingCacheModel.costCenter = null;
		}

		eOnBoardingCacheModel.itRelatedHardware = getItRelatedHardware();

		eOnBoardingCacheModel.companyCar = getCompanyCar();

		eOnBoardingCacheModel.replacement = getReplacement();

		eOnBoardingCacheModel.nameOfReplacedPerson = getNameOfReplacedPerson();

		String nameOfReplacedPerson = eOnBoardingCacheModel.nameOfReplacedPerson;

		if ((nameOfReplacedPerson != null) &&
				(nameOfReplacedPerson.length() == 0)) {
			eOnBoardingCacheModel.nameOfReplacedPerson = null;
		}

		eOnBoardingCacheModel.contactInfo = getContactInfo();

		String contactInfo = eOnBoardingCacheModel.contactInfo;

		if ((contactInfo != null) && (contactInfo.length() == 0)) {
			eOnBoardingCacheModel.contactInfo = null;
		}

		eOnBoardingCacheModel.comments = getComments();

		String comments = eOnBoardingCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			eOnBoardingCacheModel.comments = null;
		}

		eOnBoardingCacheModel.isApplicantAgent = getIsApplicantAgent();

		eOnBoardingCacheModel.isApproverAgent = getIsApproverAgent();

		eOnBoardingCacheModel.adminEntitlement = getAdminEntitlement();

		String adminEntitlement = eOnBoardingCacheModel.adminEntitlement;

		if ((adminEntitlement != null) && (adminEntitlement.length() == 0)) {
			eOnBoardingCacheModel.adminEntitlement = null;
		}

		eOnBoardingCacheModel.adminSeatNo = getAdminSeatNo();

		String adminSeatNo = eOnBoardingCacheModel.adminSeatNo;

		if ((adminSeatNo != null) && (adminSeatNo.length() == 0)) {
			eOnBoardingCacheModel.adminSeatNo = null;
		}

		eOnBoardingCacheModel.adminTasks = getAdminTasks();

		String adminTasks = eOnBoardingCacheModel.adminTasks;

		if ((adminTasks != null) && (adminTasks.length() == 0)) {
			eOnBoardingCacheModel.adminTasks = null;
		}

		eOnBoardingCacheModel.adminStatus = getAdminStatus();

		String adminStatus = eOnBoardingCacheModel.adminStatus;

		if ((adminStatus != null) && (adminStatus.length() == 0)) {
			eOnBoardingCacheModel.adminStatus = null;
		}

		eOnBoardingCacheModel.adminComments = getAdminComments();

		String adminComments = eOnBoardingCacheModel.adminComments;

		if ((adminComments != null) && (adminComments.length() == 0)) {
			eOnBoardingCacheModel.adminComments = null;
		}

		eOnBoardingCacheModel.securityTasks = getSecurityTasks();

		String securityTasks = eOnBoardingCacheModel.securityTasks;

		if ((securityTasks != null) && (securityTasks.length() == 0)) {
			eOnBoardingCacheModel.securityTasks = null;
		}

		eOnBoardingCacheModel.securityStatus = getSecurityStatus();

		String securityStatus = eOnBoardingCacheModel.securityStatus;

		if ((securityStatus != null) && (securityStatus.length() == 0)) {
			eOnBoardingCacheModel.securityStatus = null;
		}

		eOnBoardingCacheModel.securityComments = getSecurityComments();

		String securityComments = eOnBoardingCacheModel.securityComments;

		if ((securityComments != null) && (securityComments.length() == 0)) {
			eOnBoardingCacheModel.securityComments = null;
		}

		eOnBoardingCacheModel.itpTasks = getItpTasks();

		String itpTasks = eOnBoardingCacheModel.itpTasks;

		if ((itpTasks != null) && (itpTasks.length() == 0)) {
			eOnBoardingCacheModel.itpTasks = null;
		}

		eOnBoardingCacheModel.itpStatus = getItpStatus();

		String itpStatus = eOnBoardingCacheModel.itpStatus;

		if ((itpStatus != null) && (itpStatus.length() == 0)) {
			eOnBoardingCacheModel.itpStatus = null;
		}

		eOnBoardingCacheModel.iptComments = getIptComments();

		String iptComments = eOnBoardingCacheModel.iptComments;

		if ((iptComments != null) && (iptComments.length() == 0)) {
			eOnBoardingCacheModel.iptComments = null;
		}

		eOnBoardingCacheModel.financeTasks = getFinanceTasks();

		String financeTasks = eOnBoardingCacheModel.financeTasks;

		if ((financeTasks != null) && (financeTasks.length() == 0)) {
			eOnBoardingCacheModel.financeTasks = null;
		}

		eOnBoardingCacheModel.financeStatus = getFinanceStatus();

		String financeStatus = eOnBoardingCacheModel.financeStatus;

		if ((financeStatus != null) && (financeStatus.length() == 0)) {
			eOnBoardingCacheModel.financeStatus = null;
		}

		eOnBoardingCacheModel.financeComments = getFinanceComments();

		String financeComments = eOnBoardingCacheModel.financeComments;

		if ((financeComments != null) && (financeComments.length() == 0)) {
			eOnBoardingCacheModel.financeComments = null;
		}

		return eOnBoardingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(119);

		sb.append("{eOnBoardingId=");
		sb.append(getEOnBoardingId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", subType=");
		sb.append(getSubType());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", submittedDate=");
		sb.append(getSubmittedDate());
		sb.append(", modifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", modifiedUserName=");
		sb.append(getModifiedUserName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", staffCode=");
		sb.append(getStaffCode());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", birthday=");
		sb.append(getBirthday());
		sb.append(", photoPath=");
		sb.append(getPhotoPath());
		sb.append(", contractType=");
		sb.append(getContractType());
		sb.append(", workLocation=");
		sb.append(getWorkLocation());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", officeSite=");
		sb.append(getOfficeSite());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", startingDate=");
		sb.append(getStartingDate());
		sb.append(", positionCode=");
		sb.append(getPositionCode());
		sb.append(", serviceLength=");
		sb.append(getServiceLength());
		sb.append(", functionName=");
		sb.append(getFunctionName());
		sb.append(", reportTo=");
		sb.append(getReportTo());
		sb.append(", reportToStaffName=");
		sb.append(getReportToStaffName());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", costCenter=");
		sb.append(getCostCenter());
		sb.append(", itRelatedHardware=");
		sb.append(getItRelatedHardware());
		sb.append(", companyCar=");
		sb.append(getCompanyCar());
		sb.append(", replacement=");
		sb.append(getReplacement());
		sb.append(", nameOfReplacedPerson=");
		sb.append(getNameOfReplacedPerson());
		sb.append(", contactInfo=");
		sb.append(getContactInfo());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", isApplicantAgent=");
		sb.append(getIsApplicantAgent());
		sb.append(", isApproverAgent=");
		sb.append(getIsApproverAgent());
		sb.append(", adminEntitlement=");
		sb.append(getAdminEntitlement());
		sb.append(", adminSeatNo=");
		sb.append(getAdminSeatNo());
		sb.append(", adminTasks=");
		sb.append(getAdminTasks());
		sb.append(", adminStatus=");
		sb.append(getAdminStatus());
		sb.append(", adminComments=");
		sb.append(getAdminComments());
		sb.append(", securityTasks=");
		sb.append(getSecurityTasks());
		sb.append(", securityStatus=");
		sb.append(getSecurityStatus());
		sb.append(", securityComments=");
		sb.append(getSecurityComments());
		sb.append(", itpTasks=");
		sb.append(getItpTasks());
		sb.append(", itpStatus=");
		sb.append(getItpStatus());
		sb.append(", iptComments=");
		sb.append(getIptComments());
		sb.append(", financeTasks=");
		sb.append(getFinanceTasks());
		sb.append(", financeStatus=");
		sb.append(getFinanceStatus());
		sb.append(", financeComments=");
		sb.append(getFinanceComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(181);

		sb.append("<model><model-name>");
		sb.append("com.e.onboarding.model.EOnBoarding");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eOnBoardingId</column-name><column-value><![CDATA[");
		sb.append(getEOnBoardingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subType</column-name><column-value><![CDATA[");
		sb.append(getSubType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedDate</column-name><column-value><![CDATA[");
		sb.append(getSubmittedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserName</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffCode</column-name><column-value><![CDATA[");
		sb.append(getStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthday</column-name><column-value><![CDATA[");
		sb.append(getBirthday());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>photoPath</column-name><column-value><![CDATA[");
		sb.append(getPhotoPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractType</column-name><column-value><![CDATA[");
		sb.append(getContractType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workLocation</column-name><column-value><![CDATA[");
		sb.append(getWorkLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officeSite</column-name><column-value><![CDATA[");
		sb.append(getOfficeSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startingDate</column-name><column-value><![CDATA[");
		sb.append(getStartingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionCode</column-name><column-value><![CDATA[");
		sb.append(getPositionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceLength</column-name><column-value><![CDATA[");
		sb.append(getServiceLength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionName</column-name><column-value><![CDATA[");
		sb.append(getFunctionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportTo</column-name><column-value><![CDATA[");
		sb.append(getReportTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportToStaffName</column-name><column-value><![CDATA[");
		sb.append(getReportToStaffName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costCenter</column-name><column-value><![CDATA[");
		sb.append(getCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itRelatedHardware</column-name><column-value><![CDATA[");
		sb.append(getItRelatedHardware());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyCar</column-name><column-value><![CDATA[");
		sb.append(getCompanyCar());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replacement</column-name><column-value><![CDATA[");
		sb.append(getReplacement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfReplacedPerson</column-name><column-value><![CDATA[");
		sb.append(getNameOfReplacedPerson());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactInfo</column-name><column-value><![CDATA[");
		sb.append(getContactInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApplicantAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApplicantAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproverAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApproverAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminEntitlement</column-name><column-value><![CDATA[");
		sb.append(getAdminEntitlement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminSeatNo</column-name><column-value><![CDATA[");
		sb.append(getAdminSeatNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminTasks</column-name><column-value><![CDATA[");
		sb.append(getAdminTasks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminStatus</column-name><column-value><![CDATA[");
		sb.append(getAdminStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminComments</column-name><column-value><![CDATA[");
		sb.append(getAdminComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityTasks</column-name><column-value><![CDATA[");
		sb.append(getSecurityTasks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityStatus</column-name><column-value><![CDATA[");
		sb.append(getSecurityStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityComments</column-name><column-value><![CDATA[");
		sb.append(getSecurityComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itpTasks</column-name><column-value><![CDATA[");
		sb.append(getItpTasks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itpStatus</column-name><column-value><![CDATA[");
		sb.append(getItpStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iptComments</column-name><column-value><![CDATA[");
		sb.append(getIptComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financeTasks</column-name><column-value><![CDATA[");
		sb.append(getFinanceTasks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financeStatus</column-name><column-value><![CDATA[");
		sb.append(getFinanceStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financeComments</column-name><column-value><![CDATA[");
		sb.append(getFinanceComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EOnBoarding.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EOnBoarding.class
		};
	private long _eOnBoardingId;
	private String _ticketNo;
	private String _processType;
	private String _subType;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _submittedDate;
	private long _modifiedUserId;
	private String _modifiedUserUuid;
	private String _modifiedUserName;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _staffCode;
	private String _lastName;
	private String _firstName;
	private String _name;
	private String _gender;
	private Date _birthday;
	private String _photoPath;
	private String _contractType;
	private String _workLocation;
	private String _division;
	private String _officeSite;
	private String _department;
	private Date _startingDate;
	private String _positionCode;
	private String _serviceLength;
	private String _functionName;
	private String _reportTo;
	private String _reportToStaffName;
	private String _title;
	private String _costCenter;
	private boolean _itRelatedHardware;
	private boolean _companyCar;
	private boolean _replacement;
	private String _nameOfReplacedPerson;
	private String _contactInfo;
	private String _comments;
	private boolean _isApplicantAgent;
	private boolean _isApproverAgent;
	private String _adminEntitlement;
	private String _adminSeatNo;
	private String _adminTasks;
	private String _adminStatus;
	private String _adminComments;
	private String _securityTasks;
	private String _securityStatus;
	private String _securityComments;
	private String _itpTasks;
	private String _itpStatus;
	private String _iptComments;
	private String _financeTasks;
	private String _financeStatus;
	private String _financeComments;
	private long _columnBitmask;
	private EOnBoarding _escapedModel;
}