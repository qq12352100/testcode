/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.onboarding.service.base;

import com.e.onboarding.model.EOnBoarding;
import com.e.onboarding.service.EOnBoardingLocalService;
import com.e.onboarding.service.persistence.DistributionPersistence;
import com.e.onboarding.service.persistence.EOnBoardingPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the e on boarding local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.e.onboarding.service.impl.EOnBoardingLocalServiceImpl}.
 * </p>
 *
 * @author sanguine
 * @see com.e.onboarding.service.impl.EOnBoardingLocalServiceImpl
 * @see com.e.onboarding.service.EOnBoardingLocalServiceUtil
 * @generated
 */
public abstract class EOnBoardingLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EOnBoardingLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.e.onboarding.service.EOnBoardingLocalServiceUtil} to access the e on boarding local service.
	 */

	/**
	 * Adds the e on boarding to the database. Also notifies the appropriate model listeners.
	 *
	 * @param eOnBoarding the e on boarding
	 * @return the e on boarding that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EOnBoarding addEOnBoarding(EOnBoarding eOnBoarding)
		throws SystemException {
		eOnBoarding.setNew(true);

		return eOnBoardingPersistence.update(eOnBoarding);
	}

	/**
	 * Creates a new e on boarding with the primary key. Does not add the e on boarding to the database.
	 *
	 * @param eOnBoardingId the primary key for the new e on boarding
	 * @return the new e on boarding
	 */
	@Override
	public EOnBoarding createEOnBoarding(long eOnBoardingId) {
		return eOnBoardingPersistence.create(eOnBoardingId);
	}

	/**
	 * Deletes the e on boarding with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eOnBoardingId the primary key of the e on boarding
	 * @return the e on boarding that was removed
	 * @throws PortalException if a e on boarding with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EOnBoarding deleteEOnBoarding(long eOnBoardingId)
		throws PortalException, SystemException {
		return eOnBoardingPersistence.remove(eOnBoardingId);
	}

	/**
	 * Deletes the e on boarding from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eOnBoarding the e on boarding
	 * @return the e on boarding that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EOnBoarding deleteEOnBoarding(EOnBoarding eOnBoarding)
		throws SystemException {
		return eOnBoardingPersistence.remove(eOnBoarding);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EOnBoarding.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return eOnBoardingPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.e.onboarding.model.impl.EOnBoardingModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return eOnBoardingPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.e.onboarding.model.impl.EOnBoardingModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return eOnBoardingPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return eOnBoardingPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return eOnBoardingPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EOnBoarding fetchEOnBoarding(long eOnBoardingId)
		throws SystemException {
		return eOnBoardingPersistence.fetchByPrimaryKey(eOnBoardingId);
	}

	/**
	 * Returns the e on boarding with the primary key.
	 *
	 * @param eOnBoardingId the primary key of the e on boarding
	 * @return the e on boarding
	 * @throws PortalException if a e on boarding with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EOnBoarding getEOnBoarding(long eOnBoardingId)
		throws PortalException, SystemException {
		return eOnBoardingPersistence.findByPrimaryKey(eOnBoardingId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return eOnBoardingPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the e on boardings.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.e.onboarding.model.impl.EOnBoardingModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of e on boardings
	 * @param end the upper bound of the range of e on boardings (not inclusive)
	 * @return the range of e on boardings
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<EOnBoarding> getEOnBoardings(int start, int end)
		throws SystemException {
		return eOnBoardingPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of e on boardings.
	 *
	 * @return the number of e on boardings
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getEOnBoardingsCount() throws SystemException {
		return eOnBoardingPersistence.countAll();
	}

	/**
	 * Updates the e on boarding in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param eOnBoarding the e on boarding
	 * @return the e on boarding that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EOnBoarding updateEOnBoarding(EOnBoarding eOnBoarding)
		throws SystemException {
		return eOnBoardingPersistence.update(eOnBoarding);
	}

	/**
	 * Returns the distribution local service.
	 *
	 * @return the distribution local service
	 */
	public com.e.onboarding.service.DistributionLocalService getDistributionLocalService() {
		return distributionLocalService;
	}

	/**
	 * Sets the distribution local service.
	 *
	 * @param distributionLocalService the distribution local service
	 */
	public void setDistributionLocalService(
		com.e.onboarding.service.DistributionLocalService distributionLocalService) {
		this.distributionLocalService = distributionLocalService;
	}

	/**
	 * Returns the distribution remote service.
	 *
	 * @return the distribution remote service
	 */
	public com.e.onboarding.service.DistributionService getDistributionService() {
		return distributionService;
	}

	/**
	 * Sets the distribution remote service.
	 *
	 * @param distributionService the distribution remote service
	 */
	public void setDistributionService(
		com.e.onboarding.service.DistributionService distributionService) {
		this.distributionService = distributionService;
	}

	/**
	 * Returns the distribution persistence.
	 *
	 * @return the distribution persistence
	 */
	public DistributionPersistence getDistributionPersistence() {
		return distributionPersistence;
	}

	/**
	 * Sets the distribution persistence.
	 *
	 * @param distributionPersistence the distribution persistence
	 */
	public void setDistributionPersistence(
		DistributionPersistence distributionPersistence) {
		this.distributionPersistence = distributionPersistence;
	}

	/**
	 * Returns the e on boarding local service.
	 *
	 * @return the e on boarding local service
	 */
	public com.e.onboarding.service.EOnBoardingLocalService getEOnBoardingLocalService() {
		return eOnBoardingLocalService;
	}

	/**
	 * Sets the e on boarding local service.
	 *
	 * @param eOnBoardingLocalService the e on boarding local service
	 */
	public void setEOnBoardingLocalService(
		com.e.onboarding.service.EOnBoardingLocalService eOnBoardingLocalService) {
		this.eOnBoardingLocalService = eOnBoardingLocalService;
	}

	/**
	 * Returns the e on boarding remote service.
	 *
	 * @return the e on boarding remote service
	 */
	public com.e.onboarding.service.EOnBoardingService getEOnBoardingService() {
		return eOnBoardingService;
	}

	/**
	 * Sets the e on boarding remote service.
	 *
	 * @param eOnBoardingService the e on boarding remote service
	 */
	public void setEOnBoardingService(
		com.e.onboarding.service.EOnBoardingService eOnBoardingService) {
		this.eOnBoardingService = eOnBoardingService;
	}

	/**
	 * Returns the e on boarding persistence.
	 *
	 * @return the e on boarding persistence
	 */
	public EOnBoardingPersistence getEOnBoardingPersistence() {
		return eOnBoardingPersistence;
	}

	/**
	 * Sets the e on boarding persistence.
	 *
	 * @param eOnBoardingPersistence the e on boarding persistence
	 */
	public void setEOnBoardingPersistence(
		EOnBoardingPersistence eOnBoardingPersistence) {
		this.eOnBoardingPersistence = eOnBoardingPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.e.onboarding.model.EOnBoarding",
			eOnBoardingLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.e.onboarding.model.EOnBoarding");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return EOnBoarding.class;
	}

	protected String getModelClassName() {
		return EOnBoarding.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eOnBoardingPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.e.onboarding.service.DistributionLocalService.class)
	protected com.e.onboarding.service.DistributionLocalService distributionLocalService;
	@BeanReference(type = com.e.onboarding.service.DistributionService.class)
	protected com.e.onboarding.service.DistributionService distributionService;
	@BeanReference(type = DistributionPersistence.class)
	protected DistributionPersistence distributionPersistence;
	@BeanReference(type = com.e.onboarding.service.EOnBoardingLocalService.class)
	protected com.e.onboarding.service.EOnBoardingLocalService eOnBoardingLocalService;
	@BeanReference(type = com.e.onboarding.service.EOnBoardingService.class)
	protected com.e.onboarding.service.EOnBoardingService eOnBoardingService;
	@BeanReference(type = EOnBoardingPersistence.class)
	protected EOnBoardingPersistence eOnBoardingPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EOnBoardingLocalServiceClpInvoker _clpInvoker = new EOnBoardingLocalServiceClpInvoker();
}