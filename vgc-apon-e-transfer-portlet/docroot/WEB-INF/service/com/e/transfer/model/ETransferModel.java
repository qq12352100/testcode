/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.transfer.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.GroupedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ETransfer service. Represents a row in the &quot;vgcapon_ETransfer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.e.transfer.model.impl.ETransferModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.e.transfer.model.impl.ETransferImpl}.
 * </p>
 *
 * @author EZEYIFE
 * @see ETransfer
 * @see com.e.transfer.model.impl.ETransferImpl
 * @see com.e.transfer.model.impl.ETransferModelImpl
 * @generated
 */
public interface ETransferModel extends BaseModel<ETransfer>, GroupedModel,
	WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a e transfer model instance should use the {@link ETransfer} interface instead.
	 */

	/**
	 * Returns the primary key of this e transfer.
	 *
	 * @return the primary key of this e transfer
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this e transfer.
	 *
	 * @param primaryKey the primary key of this e transfer
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the e transfer ID of this e transfer.
	 *
	 * @return the e transfer ID of this e transfer
	 */
	public long getETransferId();

	/**
	 * Sets the e transfer ID of this e transfer.
	 *
	 * @param eTransferId the e transfer ID of this e transfer
	 */
	public void setETransferId(long eTransferId);

	/**
	 * Returns the group ID of this e transfer.
	 *
	 * @return the group ID of this e transfer
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this e transfer.
	 *
	 * @param groupId the group ID of this e transfer
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this e transfer.
	 *
	 * @return the user ID of this e transfer
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this e transfer.
	 *
	 * @param userId the user ID of this e transfer
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this e transfer.
	 *
	 * @return the user uuid of this e transfer
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this e transfer.
	 *
	 * @param userUuid the user uuid of this e transfer
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this e transfer.
	 *
	 * @return the user name of this e transfer
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this e transfer.
	 *
	 * @param userName the user name of this e transfer
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this e transfer.
	 *
	 * @return the create date of this e transfer
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this e transfer.
	 *
	 * @param createDate the create date of this e transfer
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this e transfer.
	 *
	 * @return the modified date of this e transfer
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this e transfer.
	 *
	 * @param modifiedDate the modified date of this e transfer
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the company ID of this e transfer.
	 *
	 * @return the company ID of this e transfer
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this e transfer.
	 *
	 * @param companyId the company ID of this e transfer
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the ticket no of this e transfer.
	 *
	 * @return the ticket no of this e transfer
	 */
	@AutoEscape
	public String getTicketNo();

	/**
	 * Sets the ticket no of this e transfer.
	 *
	 * @param ticketNo the ticket no of this e transfer
	 */
	public void setTicketNo(String ticketNo);

	/**
	 * Returns the staff name of this e transfer.
	 *
	 * @return the staff name of this e transfer
	 */
	@AutoEscape
	public String getStaffName();

	/**
	 * Sets the staff name of this e transfer.
	 *
	 * @param staffName the staff name of this e transfer
	 */
	public void setStaffName(String staffName);

	/**
	 * Returns the current staff code of this e transfer.
	 *
	 * @return the current staff code of this e transfer
	 */
	@AutoEscape
	public String getCurrentStaffCode();

	/**
	 * Sets the current staff code of this e transfer.
	 *
	 * @param currentStaffCode the current staff code of this e transfer
	 */
	public void setCurrentStaffCode(String currentStaffCode);

	/**
	 * Returns the contract type of this e transfer.
	 *
	 * @return the contract type of this e transfer
	 */
	@AutoEscape
	public String getContractType();

	/**
	 * Sets the contract type of this e transfer.
	 *
	 * @param contractType the contract type of this e transfer
	 */
	public void setContractType(String contractType);

	/**
	 * Returns the new staff code of this e transfer.
	 *
	 * @return the new staff code of this e transfer
	 */
	@AutoEscape
	public String getNewStaffCode();

	/**
	 * Sets the new staff code of this e transfer.
	 *
	 * @param newStaffCode the new staff code of this e transfer
	 */
	public void setNewStaffCode(String newStaffCode);

	/**
	 * Returns the passed l l of this e transfer.
	 *
	 * @return the passed l l of this e transfer
	 */
	public int getPassedLL();

	/**
	 * Sets the passed l l of this e transfer.
	 *
	 * @param PassedLL the passed l l of this e transfer
	 */
	public void setPassedLL(int PassedLL);

	/**
	 * Returns the attended s l t of this e transfer.
	 *
	 * @return the attended s l t of this e transfer
	 */
	public int getAttendedSLT();

	/**
	 * Sets the attended s l t of this e transfer.
	 *
	 * @param AttendedSLT the attended s l t of this e transfer
	 */
	public void setAttendedSLT(int AttendedSLT);

	/**
	 * Returns the current company of this e transfer.
	 *
	 * @return the current company of this e transfer
	 */
	@AutoEscape
	public String getCurrentCompany();

	/**
	 * Sets the current company of this e transfer.
	 *
	 * @param currentCompany the current company of this e transfer
	 */
	public void setCurrentCompany(String currentCompany);

	/**
	 * Returns the current division of this e transfer.
	 *
	 * @return the current division of this e transfer
	 */
	@AutoEscape
	public String getCurrentDivision();

	/**
	 * Sets the current division of this e transfer.
	 *
	 * @param currentDivision the current division of this e transfer
	 */
	public void setCurrentDivision(String currentDivision);

	/**
	 * Returns the current department of this e transfer.
	 *
	 * @return the current department of this e transfer
	 */
	@AutoEscape
	public String getCurrentDepartment();

	/**
	 * Sets the current department of this e transfer.
	 *
	 * @param currentDepartment the current department of this e transfer
	 */
	public void setCurrentDepartment(String currentDepartment);

	/**
	 * Returns the current function name of this e transfer.
	 *
	 * @return the current function name of this e transfer
	 */
	@AutoEscape
	public String getCurrentFunctionName();

	/**
	 * Sets the current function name of this e transfer.
	 *
	 * @param currentFunctionName the current function name of this e transfer
	 */
	public void setCurrentFunctionName(String currentFunctionName);

	/**
	 * Returns the current cost center of this e transfer.
	 *
	 * @return the current cost center of this e transfer
	 */
	@AutoEscape
	public String getCurrentCostCenter();

	/**
	 * Sets the current cost center of this e transfer.
	 *
	 * @param currentCostCenter the current cost center of this e transfer
	 */
	public void setCurrentCostCenter(String currentCostCenter);

	/**
	 * Returns the current reporting to of this e transfer.
	 *
	 * @return the current reporting to of this e transfer
	 */
	@AutoEscape
	public String getCurrentReportingTo();

	/**
	 * Sets the current reporting to of this e transfer.
	 *
	 * @param currentReportingTo the current reporting to of this e transfer
	 */
	public void setCurrentReportingTo(String currentReportingTo);

	/**
	 * Returns the other agreement if any of this e transfer.
	 *
	 * @return the other agreement if any of this e transfer
	 */
	@AutoEscape
	public String getOtherAgreementIfAny();

	/**
	 * Sets the other agreement if any of this e transfer.
	 *
	 * @param otherAgreementIfAny the other agreement if any of this e transfer
	 */
	public void setOtherAgreementIfAny(String otherAgreementIfAny);

	/**
	 * Returns the current office site of this e transfer.
	 *
	 * @return the current office site of this e transfer
	 */
	@AutoEscape
	public String getCurrentOfficeSite();

	/**
	 * Sets the current office site of this e transfer.
	 *
	 * @param currentOfficeSite the current office site of this e transfer
	 */
	public void setCurrentOfficeSite(String currentOfficeSite);

	/**
	 * Returns the current position code of this e transfer.
	 *
	 * @return the current position code of this e transfer
	 */
	@AutoEscape
	public String getCurrentPositionCode();

	/**
	 * Sets the current position code of this e transfer.
	 *
	 * @param currentPositionCode the current position code of this e transfer
	 */
	public void setCurrentPositionCode(String currentPositionCode);

	/**
	 * Returns the receiving staff code of this e transfer.
	 *
	 * @return the receiving staff code of this e transfer
	 */
	@AutoEscape
	public String getReceivingStaffCode();

	/**
	 * Sets the receiving staff code of this e transfer.
	 *
	 * @param receivingStaffCode the receiving staff code of this e transfer
	 */
	public void setReceivingStaffCode(String receivingStaffCode);

	/**
	 * Returns the receiving company of this e transfer.
	 *
	 * @return the receiving company of this e transfer
	 */
	@AutoEscape
	public String getReceivingCompany();

	/**
	 * Sets the receiving company of this e transfer.
	 *
	 * @param receivingCompany the receiving company of this e transfer
	 */
	public void setReceivingCompany(String receivingCompany);

	/**
	 * Returns the receiving division of this e transfer.
	 *
	 * @return the receiving division of this e transfer
	 */
	@AutoEscape
	public String getReceivingDivision();

	/**
	 * Sets the receiving division of this e transfer.
	 *
	 * @param receivingDivision the receiving division of this e transfer
	 */
	public void setReceivingDivision(String receivingDivision);

	/**
	 * Returns the receiving department of this e transfer.
	 *
	 * @return the receiving department of this e transfer
	 */
	@AutoEscape
	public String getReceivingDepartment();

	/**
	 * Sets the receiving department of this e transfer.
	 *
	 * @param receivingDepartment the receiving department of this e transfer
	 */
	public void setReceivingDepartment(String receivingDepartment);

	/**
	 * Returns the new function name of this e transfer.
	 *
	 * @return the new function name of this e transfer
	 */
	@AutoEscape
	public String getNewFunctionName();

	/**
	 * Sets the new function name of this e transfer.
	 *
	 * @param newFunctionName the new function name of this e transfer
	 */
	public void setNewFunctionName(String newFunctionName);

	/**
	 * Returns the new cost center of this e transfer.
	 *
	 * @return the new cost center of this e transfer
	 */
	@AutoEscape
	public String getNewCostCenter();

	/**
	 * Sets the new cost center of this e transfer.
	 *
	 * @param newCostCenter the new cost center of this e transfer
	 */
	public void setNewCostCenter(String newCostCenter);

	/**
	 * Returns the new reporting to of this e transfer.
	 *
	 * @return the new reporting to of this e transfer
	 */
	@AutoEscape
	public String getNewReportingTo();

	/**
	 * Sets the new reporting to of this e transfer.
	 *
	 * @param newReportingTo the new reporting to of this e transfer
	 */
	public void setNewReportingTo(String newReportingTo);

	/**
	 * Returns the effective date of this e transfer.
	 *
	 * @return the effective date of this e transfer
	 */
	public Date getEffectiveDate();

	/**
	 * Sets the effective date of this e transfer.
	 *
	 * @param effectiveDate the effective date of this e transfer
	 */
	public void setEffectiveDate(Date effectiveDate);

	/**
	 * Returns the new office site of this e transfer.
	 *
	 * @return the new office site of this e transfer
	 */
	@AutoEscape
	public String getNewOfficeSite();

	/**
	 * Sets the new office site of this e transfer.
	 *
	 * @param newOfficeSite the new office site of this e transfer
	 */
	public void setNewOfficeSite(String newOfficeSite);

	/**
	 * Returns the sap position code of this e transfer.
	 *
	 * @return the sap position code of this e transfer
	 */
	@AutoEscape
	public String getSapPositionCode();

	/**
	 * Sets the sap position code of this e transfer.
	 *
	 * @param sapPositionCode the sap position code of this e transfer
	 */
	public void setSapPositionCode(String sapPositionCode);

	/**
	 * Returns the replacement of this e transfer.
	 *
	 * @return the replacement of this e transfer
	 */
	@AutoEscape
	public String getReplacement();

	/**
	 * Sets the replacement of this e transfer.
	 *
	 * @param replacement the replacement of this e transfer
	 */
	public void setReplacement(String replacement);

	/**
	 * Returns the function grade of this e transfer.
	 *
	 * @return the function grade of this e transfer
	 */
	@AutoEscape
	public String getFunctionGrade();

	/**
	 * Sets the function grade of this e transfer.
	 *
	 * @param functionGrade the function grade of this e transfer
	 */
	public void setFunctionGrade(String functionGrade);

	/**
	 * Returns the budget type of position of this e transfer.
	 *
	 * @return the budget type of position of this e transfer
	 */
	public int getBudgetTypeOfPosition();

	/**
	 * Sets the budget type of position of this e transfer.
	 *
	 * @param budgetTypeOfPosition the budget type of position of this e transfer
	 */
	public void setBudgetTypeOfPosition(int budgetTypeOfPosition);

	/**
	 * Returns the china sixty of this e transfer.
	 *
	 * @return the china sixty of this e transfer
	 */
	public int getChinaSixty();

	/**
	 * Sets the china sixty of this e transfer.
	 *
	 * @param chinaSixty the china sixty of this e transfer
	 */
	public void setChinaSixty(int chinaSixty);

	/**
	 * Returns the target p d supervisor of this e transfer.
	 *
	 * @return the target p d supervisor of this e transfer
	 */
	public int getTargetPDSupervisor();

	/**
	 * Sets the target p d supervisor of this e transfer.
	 *
	 * @param targetPDSupervisor the target p d supervisor of this e transfer
	 */
	public void setTargetPDSupervisor(int targetPDSupervisor);

	/**
	 * Returns the process type of this e transfer.
	 *
	 * @return the process type of this e transfer
	 */
	@AutoEscape
	public String getProcessType();

	/**
	 * Sets the process type of this e transfer.
	 *
	 * @param processType the process type of this e transfer
	 */
	public void setProcessType(String processType);

	/**
	 * Returns the sub process type of this e transfer.
	 *
	 * @return the sub process type of this e transfer
	 */
	@AutoEscape
	public String getSubProcessType();

	/**
	 * Sets the sub process type of this e transfer.
	 *
	 * @param subProcessType the sub process type of this e transfer
	 */
	public void setSubProcessType(String subProcessType);

	/**
	 * Returns the submitted date of this e transfer.
	 *
	 * @return the submitted date of this e transfer
	 */
	public Date getSubmittedDate();

	/**
	 * Sets the submitted date of this e transfer.
	 *
	 * @param submittedDate the submitted date of this e transfer
	 */
	public void setSubmittedDate(Date submittedDate);

	/**
	 * Returns the comments of this e transfer.
	 *
	 * @return the comments of this e transfer
	 */
	@AutoEscape
	public String getComments();

	/**
	 * Sets the comments of this e transfer.
	 *
	 * @param comments the comments of this e transfer
	 */
	public void setComments(String comments);

	/**
	 * Returns the status of this e transfer.
	 *
	 * @return the status of this e transfer
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this e transfer.
	 *
	 * @param status the status of this e transfer
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this e transfer.
	 *
	 * @return the status by user ID of this e transfer
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this e transfer.
	 *
	 * @param statusByUserId the status by user ID of this e transfer
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this e transfer.
	 *
	 * @return the status by user uuid of this e transfer
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this e transfer.
	 *
	 * @param statusByUserUuid the status by user uuid of this e transfer
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this e transfer.
	 *
	 * @return the status by user name of this e transfer
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this e transfer.
	 *
	 * @param statusByUserName the status by user name of this e transfer
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this e transfer.
	 *
	 * @return the status date of this e transfer
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this e transfer.
	 *
	 * @param statusDate the status date of this e transfer
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this e transfer is approved.
	 *
	 * @return <code>true</code> if this e transfer is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this e transfer is denied.
	 *
	 * @return <code>true</code> if this e transfer is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this e transfer is a draft.
	 *
	 * @return <code>true</code> if this e transfer is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this e transfer is expired.
	 *
	 * @return <code>true</code> if this e transfer is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this e transfer is inactive.
	 *
	 * @return <code>true</code> if this e transfer is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this e transfer is incomplete.
	 *
	 * @return <code>true</code> if this e transfer is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this e transfer is pending.
	 *
	 * @return <code>true</code> if this e transfer is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this e transfer is scheduled.
	 *
	 * @return <code>true</code> if this e transfer is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.e.transfer.model.ETransfer eTransfer);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.e.transfer.model.ETransfer> toCacheModel();

	@Override
	public com.e.transfer.model.ETransfer toEscapedModel();

	@Override
	public com.e.transfer.model.ETransfer toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}