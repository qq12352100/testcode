/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.e.transfer.model.impl;

import com.e.transfer.model.ETransfer;
import com.e.transfer.model.ETransferModel;
import com.e.transfer.model.ETransferSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ETransfer service. Represents a row in the &quot;vgcapon_ETransfer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.e.transfer.model.ETransferModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ETransferImpl}.
 * </p>
 *
 * @author EZEYIFE
 * @see ETransferImpl
 * @see com.e.transfer.model.ETransfer
 * @see com.e.transfer.model.ETransferModel
 * @generated
 */
@JSON(strict = true)
public class ETransferModelImpl extends BaseModelImpl<ETransfer>
	implements ETransferModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e transfer model instance should use the {@link com.e.transfer.model.ETransfer} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_ETransfer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eTransferId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "staffName", Types.VARCHAR },
			{ "currentStaffCode", Types.VARCHAR },
			{ "contractType", Types.VARCHAR },
			{ "newStaffCode", Types.VARCHAR },
			{ "PassedLL", Types.INTEGER },
			{ "AttendedSLT", Types.INTEGER },
			{ "currentCompany", Types.VARCHAR },
			{ "currentDivision", Types.VARCHAR },
			{ "currentDepartment", Types.VARCHAR },
			{ "currentFunctionName", Types.VARCHAR },
			{ "currentCostCenter", Types.VARCHAR },
			{ "currentReportingTo", Types.VARCHAR },
			{ "otherAgreementIfAny", Types.VARCHAR },
			{ "currentOfficeSite", Types.VARCHAR },
			{ "currentPositionCode", Types.VARCHAR },
			{ "receivingStaffCode", Types.VARCHAR },
			{ "receivingCompany", Types.VARCHAR },
			{ "receivingDivision", Types.VARCHAR },
			{ "receivingDepartment", Types.VARCHAR },
			{ "newFunctionName", Types.VARCHAR },
			{ "newCostCenter", Types.VARCHAR },
			{ "newReportingTo", Types.VARCHAR },
			{ "effectiveDate", Types.TIMESTAMP },
			{ "newOfficeSite", Types.VARCHAR },
			{ "sapPositionCode", Types.VARCHAR },
			{ "replacement", Types.VARCHAR },
			{ "functionGrade", Types.VARCHAR },
			{ "budgetTypeOfPosition", Types.INTEGER },
			{ "chinaSixty", Types.INTEGER },
			{ "targetPDSupervisor", Types.INTEGER },
			{ "processType", Types.VARCHAR },
			{ "subProcessType", Types.VARCHAR },
			{ "submittedDate", Types.TIMESTAMP },
			{ "comments", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_ETransfer (eTransferId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyId LONG,ticketNo VARCHAR(75) null,staffName VARCHAR(75) null,currentStaffCode VARCHAR(75) null,contractType VARCHAR(75) null,newStaffCode VARCHAR(75) null,PassedLL INTEGER,AttendedSLT INTEGER,currentCompany VARCHAR(75) null,currentDivision VARCHAR(75) null,currentDepartment VARCHAR(75) null,currentFunctionName VARCHAR(75) null,currentCostCenter VARCHAR(75) null,currentReportingTo VARCHAR(75) null,otherAgreementIfAny VARCHAR(75) null,currentOfficeSite VARCHAR(75) null,currentPositionCode VARCHAR(75) null,receivingStaffCode VARCHAR(75) null,receivingCompany VARCHAR(75) null,receivingDivision VARCHAR(75) null,receivingDepartment VARCHAR(75) null,newFunctionName VARCHAR(75) null,newCostCenter VARCHAR(75) null,newReportingTo VARCHAR(75) null,effectiveDate DATE null,newOfficeSite VARCHAR(75) null,sapPositionCode VARCHAR(75) null,replacement VARCHAR(75) null,functionGrade VARCHAR(75) null,budgetTypeOfPosition INTEGER,chinaSixty INTEGER,targetPDSupervisor INTEGER,processType VARCHAR(75) null,subProcessType VARCHAR(75) null,submittedDate DATE null,comments VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_ETransfer";
	public static final String ORDER_BY_JPQL = " ORDER BY eTransfer.eTransferId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_ETransfer.eTransferId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.e.transfer.model.ETransfer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.e.transfer.model.ETransfer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.e.transfer.model.ETransfer"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long ETRANSFERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ETransfer toModel(ETransferSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ETransfer model = new ETransferImpl();

		model.setETransferId(soapModel.getETransferId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setTicketNo(soapModel.getTicketNo());
		model.setStaffName(soapModel.getStaffName());
		model.setCurrentStaffCode(soapModel.getCurrentStaffCode());
		model.setContractType(soapModel.getContractType());
		model.setNewStaffCode(soapModel.getNewStaffCode());
		model.setPassedLL(soapModel.getPassedLL());
		model.setAttendedSLT(soapModel.getAttendedSLT());
		model.setCurrentCompany(soapModel.getCurrentCompany());
		model.setCurrentDivision(soapModel.getCurrentDivision());
		model.setCurrentDepartment(soapModel.getCurrentDepartment());
		model.setCurrentFunctionName(soapModel.getCurrentFunctionName());
		model.setCurrentCostCenter(soapModel.getCurrentCostCenter());
		model.setCurrentReportingTo(soapModel.getCurrentReportingTo());
		model.setOtherAgreementIfAny(soapModel.getOtherAgreementIfAny());
		model.setCurrentOfficeSite(soapModel.getCurrentOfficeSite());
		model.setCurrentPositionCode(soapModel.getCurrentPositionCode());
		model.setReceivingStaffCode(soapModel.getReceivingStaffCode());
		model.setReceivingCompany(soapModel.getReceivingCompany());
		model.setReceivingDivision(soapModel.getReceivingDivision());
		model.setReceivingDepartment(soapModel.getReceivingDepartment());
		model.setNewFunctionName(soapModel.getNewFunctionName());
		model.setNewCostCenter(soapModel.getNewCostCenter());
		model.setNewReportingTo(soapModel.getNewReportingTo());
		model.setEffectiveDate(soapModel.getEffectiveDate());
		model.setNewOfficeSite(soapModel.getNewOfficeSite());
		model.setSapPositionCode(soapModel.getSapPositionCode());
		model.setReplacement(soapModel.getReplacement());
		model.setFunctionGrade(soapModel.getFunctionGrade());
		model.setBudgetTypeOfPosition(soapModel.getBudgetTypeOfPosition());
		model.setChinaSixty(soapModel.getChinaSixty());
		model.setTargetPDSupervisor(soapModel.getTargetPDSupervisor());
		model.setProcessType(soapModel.getProcessType());
		model.setSubProcessType(soapModel.getSubProcessType());
		model.setSubmittedDate(soapModel.getSubmittedDate());
		model.setComments(soapModel.getComments());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ETransfer> toModels(ETransferSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ETransfer> models = new ArrayList<ETransfer>(soapModels.length);

		for (ETransferSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.e.transfer.model.ETransfer"));

	public ETransferModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eTransferId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setETransferId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eTransferId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ETransfer.class;
	}

	@Override
	public String getModelClassName() {
		return ETransfer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eTransferId", getETransferId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("staffName", getStaffName());
		attributes.put("currentStaffCode", getCurrentStaffCode());
		attributes.put("contractType", getContractType());
		attributes.put("newStaffCode", getNewStaffCode());
		attributes.put("PassedLL", getPassedLL());
		attributes.put("AttendedSLT", getAttendedSLT());
		attributes.put("currentCompany", getCurrentCompany());
		attributes.put("currentDivision", getCurrentDivision());
		attributes.put("currentDepartment", getCurrentDepartment());
		attributes.put("currentFunctionName", getCurrentFunctionName());
		attributes.put("currentCostCenter", getCurrentCostCenter());
		attributes.put("currentReportingTo", getCurrentReportingTo());
		attributes.put("otherAgreementIfAny", getOtherAgreementIfAny());
		attributes.put("currentOfficeSite", getCurrentOfficeSite());
		attributes.put("currentPositionCode", getCurrentPositionCode());
		attributes.put("receivingStaffCode", getReceivingStaffCode());
		attributes.put("receivingCompany", getReceivingCompany());
		attributes.put("receivingDivision", getReceivingDivision());
		attributes.put("receivingDepartment", getReceivingDepartment());
		attributes.put("newFunctionName", getNewFunctionName());
		attributes.put("newCostCenter", getNewCostCenter());
		attributes.put("newReportingTo", getNewReportingTo());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("newOfficeSite", getNewOfficeSite());
		attributes.put("sapPositionCode", getSapPositionCode());
		attributes.put("replacement", getReplacement());
		attributes.put("functionGrade", getFunctionGrade());
		attributes.put("budgetTypeOfPosition", getBudgetTypeOfPosition());
		attributes.put("chinaSixty", getChinaSixty());
		attributes.put("targetPDSupervisor", getTargetPDSupervisor());
		attributes.put("processType", getProcessType());
		attributes.put("subProcessType", getSubProcessType());
		attributes.put("submittedDate", getSubmittedDate());
		attributes.put("comments", getComments());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eTransferId = (Long)attributes.get("eTransferId");

		if (eTransferId != null) {
			setETransferId(eTransferId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String staffName = (String)attributes.get("staffName");

		if (staffName != null) {
			setStaffName(staffName);
		}

		String currentStaffCode = (String)attributes.get("currentStaffCode");

		if (currentStaffCode != null) {
			setCurrentStaffCode(currentStaffCode);
		}

		String contractType = (String)attributes.get("contractType");

		if (contractType != null) {
			setContractType(contractType);
		}

		String newStaffCode = (String)attributes.get("newStaffCode");

		if (newStaffCode != null) {
			setNewStaffCode(newStaffCode);
		}

		Integer PassedLL = (Integer)attributes.get("PassedLL");

		if (PassedLL != null) {
			setPassedLL(PassedLL);
		}

		Integer AttendedSLT = (Integer)attributes.get("AttendedSLT");

		if (AttendedSLT != null) {
			setAttendedSLT(AttendedSLT);
		}

		String currentCompany = (String)attributes.get("currentCompany");

		if (currentCompany != null) {
			setCurrentCompany(currentCompany);
		}

		String currentDivision = (String)attributes.get("currentDivision");

		if (currentDivision != null) {
			setCurrentDivision(currentDivision);
		}

		String currentDepartment = (String)attributes.get("currentDepartment");

		if (currentDepartment != null) {
			setCurrentDepartment(currentDepartment);
		}

		String currentFunctionName = (String)attributes.get(
				"currentFunctionName");

		if (currentFunctionName != null) {
			setCurrentFunctionName(currentFunctionName);
		}

		String currentCostCenter = (String)attributes.get("currentCostCenter");

		if (currentCostCenter != null) {
			setCurrentCostCenter(currentCostCenter);
		}

		String currentReportingTo = (String)attributes.get("currentReportingTo");

		if (currentReportingTo != null) {
			setCurrentReportingTo(currentReportingTo);
		}

		String otherAgreementIfAny = (String)attributes.get(
				"otherAgreementIfAny");

		if (otherAgreementIfAny != null) {
			setOtherAgreementIfAny(otherAgreementIfAny);
		}

		String currentOfficeSite = (String)attributes.get("currentOfficeSite");

		if (currentOfficeSite != null) {
			setCurrentOfficeSite(currentOfficeSite);
		}

		String currentPositionCode = (String)attributes.get(
				"currentPositionCode");

		if (currentPositionCode != null) {
			setCurrentPositionCode(currentPositionCode);
		}

		String receivingStaffCode = (String)attributes.get("receivingStaffCode");

		if (receivingStaffCode != null) {
			setReceivingStaffCode(receivingStaffCode);
		}

		String receivingCompany = (String)attributes.get("receivingCompany");

		if (receivingCompany != null) {
			setReceivingCompany(receivingCompany);
		}

		String receivingDivision = (String)attributes.get("receivingDivision");

		if (receivingDivision != null) {
			setReceivingDivision(receivingDivision);
		}

		String receivingDepartment = (String)attributes.get(
				"receivingDepartment");

		if (receivingDepartment != null) {
			setReceivingDepartment(receivingDepartment);
		}

		String newFunctionName = (String)attributes.get("newFunctionName");

		if (newFunctionName != null) {
			setNewFunctionName(newFunctionName);
		}

		String newCostCenter = (String)attributes.get("newCostCenter");

		if (newCostCenter != null) {
			setNewCostCenter(newCostCenter);
		}

		String newReportingTo = (String)attributes.get("newReportingTo");

		if (newReportingTo != null) {
			setNewReportingTo(newReportingTo);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		String newOfficeSite = (String)attributes.get("newOfficeSite");

		if (newOfficeSite != null) {
			setNewOfficeSite(newOfficeSite);
		}

		String sapPositionCode = (String)attributes.get("sapPositionCode");

		if (sapPositionCode != null) {
			setSapPositionCode(sapPositionCode);
		}

		String replacement = (String)attributes.get("replacement");

		if (replacement != null) {
			setReplacement(replacement);
		}

		String functionGrade = (String)attributes.get("functionGrade");

		if (functionGrade != null) {
			setFunctionGrade(functionGrade);
		}

		Integer budgetTypeOfPosition = (Integer)attributes.get(
				"budgetTypeOfPosition");

		if (budgetTypeOfPosition != null) {
			setBudgetTypeOfPosition(budgetTypeOfPosition);
		}

		Integer chinaSixty = (Integer)attributes.get("chinaSixty");

		if (chinaSixty != null) {
			setChinaSixty(chinaSixty);
		}

		Integer targetPDSupervisor = (Integer)attributes.get(
				"targetPDSupervisor");

		if (targetPDSupervisor != null) {
			setTargetPDSupervisor(targetPDSupervisor);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		String subProcessType = (String)attributes.get("subProcessType");

		if (subProcessType != null) {
			setSubProcessType(subProcessType);
		}

		Date submittedDate = (Date)attributes.get("submittedDate");

		if (submittedDate != null) {
			setSubmittedDate(submittedDate);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public long getETransferId() {
		return _eTransferId;
	}

	@Override
	public void setETransferId(long eTransferId) {
		_columnBitmask = -1L;

		_eTransferId = eTransferId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_ticketNo = ticketNo;
	}

	@JSON
	@Override
	public String getStaffName() {
		if (_staffName == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffName;
		}
	}

	@Override
	public void setStaffName(String staffName) {
		_staffName = staffName;
	}

	@JSON
	@Override
	public String getCurrentStaffCode() {
		if (_currentStaffCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentStaffCode;
		}
	}

	@Override
	public void setCurrentStaffCode(String currentStaffCode) {
		_currentStaffCode = currentStaffCode;
	}

	@JSON
	@Override
	public String getContractType() {
		if (_contractType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractType;
		}
	}

	@Override
	public void setContractType(String contractType) {
		_contractType = contractType;
	}

	@JSON
	@Override
	public String getNewStaffCode() {
		if (_newStaffCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _newStaffCode;
		}
	}

	@Override
	public void setNewStaffCode(String newStaffCode) {
		_newStaffCode = newStaffCode;
	}

	@JSON
	@Override
	public int getPassedLL() {
		return _PassedLL;
	}

	@Override
	public void setPassedLL(int PassedLL) {
		_PassedLL = PassedLL;
	}

	@JSON
	@Override
	public int getAttendedSLT() {
		return _AttendedSLT;
	}

	@Override
	public void setAttendedSLT(int AttendedSLT) {
		_AttendedSLT = AttendedSLT;
	}

	@JSON
	@Override
	public String getCurrentCompany() {
		if (_currentCompany == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentCompany;
		}
	}

	@Override
	public void setCurrentCompany(String currentCompany) {
		_currentCompany = currentCompany;
	}

	@JSON
	@Override
	public String getCurrentDivision() {
		if (_currentDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDivision;
		}
	}

	@Override
	public void setCurrentDivision(String currentDivision) {
		_currentDivision = currentDivision;
	}

	@JSON
	@Override
	public String getCurrentDepartment() {
		if (_currentDepartment == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentDepartment;
		}
	}

	@Override
	public void setCurrentDepartment(String currentDepartment) {
		_currentDepartment = currentDepartment;
	}

	@JSON
	@Override
	public String getCurrentFunctionName() {
		if (_currentFunctionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentFunctionName;
		}
	}

	@Override
	public void setCurrentFunctionName(String currentFunctionName) {
		_currentFunctionName = currentFunctionName;
	}

	@JSON
	@Override
	public String getCurrentCostCenter() {
		if (_currentCostCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentCostCenter;
		}
	}

	@Override
	public void setCurrentCostCenter(String currentCostCenter) {
		_currentCostCenter = currentCostCenter;
	}

	@JSON
	@Override
	public String getCurrentReportingTo() {
		if (_currentReportingTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentReportingTo;
		}
	}

	@Override
	public void setCurrentReportingTo(String currentReportingTo) {
		_currentReportingTo = currentReportingTo;
	}

	@JSON
	@Override
	public String getOtherAgreementIfAny() {
		if (_otherAgreementIfAny == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherAgreementIfAny;
		}
	}

	@Override
	public void setOtherAgreementIfAny(String otherAgreementIfAny) {
		_otherAgreementIfAny = otherAgreementIfAny;
	}

	@JSON
	@Override
	public String getCurrentOfficeSite() {
		if (_currentOfficeSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentOfficeSite;
		}
	}

	@Override
	public void setCurrentOfficeSite(String currentOfficeSite) {
		_currentOfficeSite = currentOfficeSite;
	}

	@JSON
	@Override
	public String getCurrentPositionCode() {
		if (_currentPositionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentPositionCode;
		}
	}

	@Override
	public void setCurrentPositionCode(String currentPositionCode) {
		_currentPositionCode = currentPositionCode;
	}

	@JSON
	@Override
	public String getReceivingStaffCode() {
		if (_receivingStaffCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _receivingStaffCode;
		}
	}

	@Override
	public void setReceivingStaffCode(String receivingStaffCode) {
		_receivingStaffCode = receivingStaffCode;
	}

	@JSON
	@Override
	public String getReceivingCompany() {
		if (_receivingCompany == null) {
			return StringPool.BLANK;
		}
		else {
			return _receivingCompany;
		}
	}

	@Override
	public void setReceivingCompany(String receivingCompany) {
		_receivingCompany = receivingCompany;
	}

	@JSON
	@Override
	public String getReceivingDivision() {
		if (_receivingDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _receivingDivision;
		}
	}

	@Override
	public void setReceivingDivision(String receivingDivision) {
		_receivingDivision = receivingDivision;
	}

	@JSON
	@Override
	public String getReceivingDepartment() {
		if (_receivingDepartment == null) {
			return StringPool.BLANK;
		}
		else {
			return _receivingDepartment;
		}
	}

	@Override
	public void setReceivingDepartment(String receivingDepartment) {
		_receivingDepartment = receivingDepartment;
	}

	@JSON
	@Override
	public String getNewFunctionName() {
		if (_newFunctionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _newFunctionName;
		}
	}

	@Override
	public void setNewFunctionName(String newFunctionName) {
		_newFunctionName = newFunctionName;
	}

	@JSON
	@Override
	public String getNewCostCenter() {
		if (_newCostCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _newCostCenter;
		}
	}

	@Override
	public void setNewCostCenter(String newCostCenter) {
		_newCostCenter = newCostCenter;
	}

	@JSON
	@Override
	public String getNewReportingTo() {
		if (_newReportingTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _newReportingTo;
		}
	}

	@Override
	public void setNewReportingTo(String newReportingTo) {
		_newReportingTo = newReportingTo;
	}

	@JSON
	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@JSON
	@Override
	public String getNewOfficeSite() {
		if (_newOfficeSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _newOfficeSite;
		}
	}

	@Override
	public void setNewOfficeSite(String newOfficeSite) {
		_newOfficeSite = newOfficeSite;
	}

	@JSON
	@Override
	public String getSapPositionCode() {
		if (_sapPositionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _sapPositionCode;
		}
	}

	@Override
	public void setSapPositionCode(String sapPositionCode) {
		_sapPositionCode = sapPositionCode;
	}

	@JSON
	@Override
	public String getReplacement() {
		if (_replacement == null) {
			return StringPool.BLANK;
		}
		else {
			return _replacement;
		}
	}

	@Override
	public void setReplacement(String replacement) {
		_replacement = replacement;
	}

	@JSON
	@Override
	public String getFunctionGrade() {
		if (_functionGrade == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionGrade;
		}
	}

	@Override
	public void setFunctionGrade(String functionGrade) {
		_functionGrade = functionGrade;
	}

	@JSON
	@Override
	public int getBudgetTypeOfPosition() {
		return _budgetTypeOfPosition;
	}

	@Override
	public void setBudgetTypeOfPosition(int budgetTypeOfPosition) {
		_budgetTypeOfPosition = budgetTypeOfPosition;
	}

	@JSON
	@Override
	public int getChinaSixty() {
		return _chinaSixty;
	}

	@Override
	public void setChinaSixty(int chinaSixty) {
		_chinaSixty = chinaSixty;
	}

	@JSON
	@Override
	public int getTargetPDSupervisor() {
		return _targetPDSupervisor;
	}

	@Override
	public void setTargetPDSupervisor(int targetPDSupervisor) {
		_targetPDSupervisor = targetPDSupervisor;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return StringPool.BLANK;
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_processType = processType;
	}

	@JSON
	@Override
	public String getSubProcessType() {
		if (_subProcessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subProcessType;
		}
	}

	@Override
	public void setSubProcessType(String subProcessType) {
		_subProcessType = subProcessType;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ETransfer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ETransfer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ETransfer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ETransferImpl eTransferImpl = new ETransferImpl();

		eTransferImpl.setETransferId(getETransferId());
		eTransferImpl.setGroupId(getGroupId());
		eTransferImpl.setUserId(getUserId());
		eTransferImpl.setUserName(getUserName());
		eTransferImpl.setCreateDate(getCreateDate());
		eTransferImpl.setModifiedDate(getModifiedDate());
		eTransferImpl.setCompanyId(getCompanyId());
		eTransferImpl.setTicketNo(getTicketNo());
		eTransferImpl.setStaffName(getStaffName());
		eTransferImpl.setCurrentStaffCode(getCurrentStaffCode());
		eTransferImpl.setContractType(getContractType());
		eTransferImpl.setNewStaffCode(getNewStaffCode());
		eTransferImpl.setPassedLL(getPassedLL());
		eTransferImpl.setAttendedSLT(getAttendedSLT());
		eTransferImpl.setCurrentCompany(getCurrentCompany());
		eTransferImpl.setCurrentDivision(getCurrentDivision());
		eTransferImpl.setCurrentDepartment(getCurrentDepartment());
		eTransferImpl.setCurrentFunctionName(getCurrentFunctionName());
		eTransferImpl.setCurrentCostCenter(getCurrentCostCenter());
		eTransferImpl.setCurrentReportingTo(getCurrentReportingTo());
		eTransferImpl.setOtherAgreementIfAny(getOtherAgreementIfAny());
		eTransferImpl.setCurrentOfficeSite(getCurrentOfficeSite());
		eTransferImpl.setCurrentPositionCode(getCurrentPositionCode());
		eTransferImpl.setReceivingStaffCode(getReceivingStaffCode());
		eTransferImpl.setReceivingCompany(getReceivingCompany());
		eTransferImpl.setReceivingDivision(getReceivingDivision());
		eTransferImpl.setReceivingDepartment(getReceivingDepartment());
		eTransferImpl.setNewFunctionName(getNewFunctionName());
		eTransferImpl.setNewCostCenter(getNewCostCenter());
		eTransferImpl.setNewReportingTo(getNewReportingTo());
		eTransferImpl.setEffectiveDate(getEffectiveDate());
		eTransferImpl.setNewOfficeSite(getNewOfficeSite());
		eTransferImpl.setSapPositionCode(getSapPositionCode());
		eTransferImpl.setReplacement(getReplacement());
		eTransferImpl.setFunctionGrade(getFunctionGrade());
		eTransferImpl.setBudgetTypeOfPosition(getBudgetTypeOfPosition());
		eTransferImpl.setChinaSixty(getChinaSixty());
		eTransferImpl.setTargetPDSupervisor(getTargetPDSupervisor());
		eTransferImpl.setProcessType(getProcessType());
		eTransferImpl.setSubProcessType(getSubProcessType());
		eTransferImpl.setSubmittedDate(getSubmittedDate());
		eTransferImpl.setComments(getComments());
		eTransferImpl.setStatus(getStatus());
		eTransferImpl.setStatusByUserId(getStatusByUserId());
		eTransferImpl.setStatusByUserName(getStatusByUserName());
		eTransferImpl.setStatusDate(getStatusDate());

		eTransferImpl.resetOriginalValues();

		return eTransferImpl;
	}

	@Override
	public int compareTo(ETransfer eTransfer) {
		int value = 0;

		if (getETransferId() < eTransfer.getETransferId()) {
			value = -1;
		}
		else if (getETransferId() > eTransfer.getETransferId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ETransfer)) {
			return false;
		}

		ETransfer eTransfer = (ETransfer)obj;

		long primaryKey = eTransfer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ETransferModelImpl eTransferModelImpl = this;

		eTransferModelImpl._originalUserId = eTransferModelImpl._userId;

		eTransferModelImpl._setOriginalUserId = false;

		eTransferModelImpl._originalStatus = eTransferModelImpl._status;

		eTransferModelImpl._setOriginalStatus = false;

		eTransferModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ETransfer> toCacheModel() {
		ETransferCacheModel eTransferCacheModel = new ETransferCacheModel();

		eTransferCacheModel.eTransferId = getETransferId();

		eTransferCacheModel.groupId = getGroupId();

		eTransferCacheModel.userId = getUserId();

		eTransferCacheModel.userName = getUserName();

		String userName = eTransferCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eTransferCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eTransferCacheModel.createDate = createDate.getTime();
		}
		else {
			eTransferCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eTransferCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eTransferCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eTransferCacheModel.companyId = getCompanyId();

		eTransferCacheModel.ticketNo = getTicketNo();

		String ticketNo = eTransferCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			eTransferCacheModel.ticketNo = null;
		}

		eTransferCacheModel.staffName = getStaffName();

		String staffName = eTransferCacheModel.staffName;

		if ((staffName != null) && (staffName.length() == 0)) {
			eTransferCacheModel.staffName = null;
		}

		eTransferCacheModel.currentStaffCode = getCurrentStaffCode();

		String currentStaffCode = eTransferCacheModel.currentStaffCode;

		if ((currentStaffCode != null) && (currentStaffCode.length() == 0)) {
			eTransferCacheModel.currentStaffCode = null;
		}

		eTransferCacheModel.contractType = getContractType();

		String contractType = eTransferCacheModel.contractType;

		if ((contractType != null) && (contractType.length() == 0)) {
			eTransferCacheModel.contractType = null;
		}

		eTransferCacheModel.newStaffCode = getNewStaffCode();

		String newStaffCode = eTransferCacheModel.newStaffCode;

		if ((newStaffCode != null) && (newStaffCode.length() == 0)) {
			eTransferCacheModel.newStaffCode = null;
		}

		eTransferCacheModel.PassedLL = getPassedLL();

		eTransferCacheModel.AttendedSLT = getAttendedSLT();

		eTransferCacheModel.currentCompany = getCurrentCompany();

		String currentCompany = eTransferCacheModel.currentCompany;

		if ((currentCompany != null) && (currentCompany.length() == 0)) {
			eTransferCacheModel.currentCompany = null;
		}

		eTransferCacheModel.currentDivision = getCurrentDivision();

		String currentDivision = eTransferCacheModel.currentDivision;

		if ((currentDivision != null) && (currentDivision.length() == 0)) {
			eTransferCacheModel.currentDivision = null;
		}

		eTransferCacheModel.currentDepartment = getCurrentDepartment();

		String currentDepartment = eTransferCacheModel.currentDepartment;

		if ((currentDepartment != null) && (currentDepartment.length() == 0)) {
			eTransferCacheModel.currentDepartment = null;
		}

		eTransferCacheModel.currentFunctionName = getCurrentFunctionName();

		String currentFunctionName = eTransferCacheModel.currentFunctionName;

		if ((currentFunctionName != null) &&
				(currentFunctionName.length() == 0)) {
			eTransferCacheModel.currentFunctionName = null;
		}

		eTransferCacheModel.currentCostCenter = getCurrentCostCenter();

		String currentCostCenter = eTransferCacheModel.currentCostCenter;

		if ((currentCostCenter != null) && (currentCostCenter.length() == 0)) {
			eTransferCacheModel.currentCostCenter = null;
		}

		eTransferCacheModel.currentReportingTo = getCurrentReportingTo();

		String currentReportingTo = eTransferCacheModel.currentReportingTo;

		if ((currentReportingTo != null) && (currentReportingTo.length() == 0)) {
			eTransferCacheModel.currentReportingTo = null;
		}

		eTransferCacheModel.otherAgreementIfAny = getOtherAgreementIfAny();

		String otherAgreementIfAny = eTransferCacheModel.otherAgreementIfAny;

		if ((otherAgreementIfAny != null) &&
				(otherAgreementIfAny.length() == 0)) {
			eTransferCacheModel.otherAgreementIfAny = null;
		}

		eTransferCacheModel.currentOfficeSite = getCurrentOfficeSite();

		String currentOfficeSite = eTransferCacheModel.currentOfficeSite;

		if ((currentOfficeSite != null) && (currentOfficeSite.length() == 0)) {
			eTransferCacheModel.currentOfficeSite = null;
		}

		eTransferCacheModel.currentPositionCode = getCurrentPositionCode();

		String currentPositionCode = eTransferCacheModel.currentPositionCode;

		if ((currentPositionCode != null) &&
				(currentPositionCode.length() == 0)) {
			eTransferCacheModel.currentPositionCode = null;
		}

		eTransferCacheModel.receivingStaffCode = getReceivingStaffCode();

		String receivingStaffCode = eTransferCacheModel.receivingStaffCode;

		if ((receivingStaffCode != null) && (receivingStaffCode.length() == 0)) {
			eTransferCacheModel.receivingStaffCode = null;
		}

		eTransferCacheModel.receivingCompany = getReceivingCompany();

		String receivingCompany = eTransferCacheModel.receivingCompany;

		if ((receivingCompany != null) && (receivingCompany.length() == 0)) {
			eTransferCacheModel.receivingCompany = null;
		}

		eTransferCacheModel.receivingDivision = getReceivingDivision();

		String receivingDivision = eTransferCacheModel.receivingDivision;

		if ((receivingDivision != null) && (receivingDivision.length() == 0)) {
			eTransferCacheModel.receivingDivision = null;
		}

		eTransferCacheModel.receivingDepartment = getReceivingDepartment();

		String receivingDepartment = eTransferCacheModel.receivingDepartment;

		if ((receivingDepartment != null) &&
				(receivingDepartment.length() == 0)) {
			eTransferCacheModel.receivingDepartment = null;
		}

		eTransferCacheModel.newFunctionName = getNewFunctionName();

		String newFunctionName = eTransferCacheModel.newFunctionName;

		if ((newFunctionName != null) && (newFunctionName.length() == 0)) {
			eTransferCacheModel.newFunctionName = null;
		}

		eTransferCacheModel.newCostCenter = getNewCostCenter();

		String newCostCenter = eTransferCacheModel.newCostCenter;

		if ((newCostCenter != null) && (newCostCenter.length() == 0)) {
			eTransferCacheModel.newCostCenter = null;
		}

		eTransferCacheModel.newReportingTo = getNewReportingTo();

		String newReportingTo = eTransferCacheModel.newReportingTo;

		if ((newReportingTo != null) && (newReportingTo.length() == 0)) {
			eTransferCacheModel.newReportingTo = null;
		}

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			eTransferCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			eTransferCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		eTransferCacheModel.newOfficeSite = getNewOfficeSite();

		String newOfficeSite = eTransferCacheModel.newOfficeSite;

		if ((newOfficeSite != null) && (newOfficeSite.length() == 0)) {
			eTransferCacheModel.newOfficeSite = null;
		}

		eTransferCacheModel.sapPositionCode = getSapPositionCode();

		String sapPositionCode = eTransferCacheModel.sapPositionCode;

		if ((sapPositionCode != null) && (sapPositionCode.length() == 0)) {
			eTransferCacheModel.sapPositionCode = null;
		}

		eTransferCacheModel.replacement = getReplacement();

		String replacement = eTransferCacheModel.replacement;

		if ((replacement != null) && (replacement.length() == 0)) {
			eTransferCacheModel.replacement = null;
		}

		eTransferCacheModel.functionGrade = getFunctionGrade();

		String functionGrade = eTransferCacheModel.functionGrade;

		if ((functionGrade != null) && (functionGrade.length() == 0)) {
			eTransferCacheModel.functionGrade = null;
		}

		eTransferCacheModel.budgetTypeOfPosition = getBudgetTypeOfPosition();

		eTransferCacheModel.chinaSixty = getChinaSixty();

		eTransferCacheModel.targetPDSupervisor = getTargetPDSupervisor();

		eTransferCacheModel.processType = getProcessType();

		String processType = eTransferCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			eTransferCacheModel.processType = null;
		}

		eTransferCacheModel.subProcessType = getSubProcessType();

		String subProcessType = eTransferCacheModel.subProcessType;

		if ((subProcessType != null) && (subProcessType.length() == 0)) {
			eTransferCacheModel.subProcessType = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			eTransferCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			eTransferCacheModel.submittedDate = Long.MIN_VALUE;
		}

		eTransferCacheModel.comments = getComments();

		String comments = eTransferCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			eTransferCacheModel.comments = null;
		}

		eTransferCacheModel.status = getStatus();

		eTransferCacheModel.statusByUserId = getStatusByUserId();

		eTransferCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = eTransferCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			eTransferCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			eTransferCacheModel.statusDate = statusDate.getTime();
		}
		else {
			eTransferCacheModel.statusDate = Long.MIN_VALUE;
		}

		return eTransferCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(93);

		sb.append("{eTransferId=");
		sb.append(getETransferId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", staffName=");
		sb.append(getStaffName());
		sb.append(", currentStaffCode=");
		sb.append(getCurrentStaffCode());
		sb.append(", contractType=");
		sb.append(getContractType());
		sb.append(", newStaffCode=");
		sb.append(getNewStaffCode());
		sb.append(", PassedLL=");
		sb.append(getPassedLL());
		sb.append(", AttendedSLT=");
		sb.append(getAttendedSLT());
		sb.append(", currentCompany=");
		sb.append(getCurrentCompany());
		sb.append(", currentDivision=");
		sb.append(getCurrentDivision());
		sb.append(", currentDepartment=");
		sb.append(getCurrentDepartment());
		sb.append(", currentFunctionName=");
		sb.append(getCurrentFunctionName());
		sb.append(", currentCostCenter=");
		sb.append(getCurrentCostCenter());
		sb.append(", currentReportingTo=");
		sb.append(getCurrentReportingTo());
		sb.append(", otherAgreementIfAny=");
		sb.append(getOtherAgreementIfAny());
		sb.append(", currentOfficeSite=");
		sb.append(getCurrentOfficeSite());
		sb.append(", currentPositionCode=");
		sb.append(getCurrentPositionCode());
		sb.append(", receivingStaffCode=");
		sb.append(getReceivingStaffCode());
		sb.append(", receivingCompany=");
		sb.append(getReceivingCompany());
		sb.append(", receivingDivision=");
		sb.append(getReceivingDivision());
		sb.append(", receivingDepartment=");
		sb.append(getReceivingDepartment());
		sb.append(", newFunctionName=");
		sb.append(getNewFunctionName());
		sb.append(", newCostCenter=");
		sb.append(getNewCostCenter());
		sb.append(", newReportingTo=");
		sb.append(getNewReportingTo());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", newOfficeSite=");
		sb.append(getNewOfficeSite());
		sb.append(", sapPositionCode=");
		sb.append(getSapPositionCode());
		sb.append(", replacement=");
		sb.append(getReplacement());
		sb.append(", functionGrade=");
		sb.append(getFunctionGrade());
		sb.append(", budgetTypeOfPosition=");
		sb.append(getBudgetTypeOfPosition());
		sb.append(", chinaSixty=");
		sb.append(getChinaSixty());
		sb.append(", targetPDSupervisor=");
		sb.append(getTargetPDSupervisor());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", subProcessType=");
		sb.append(getSubProcessType());
		sb.append(", submittedDate=");
		sb.append(getSubmittedDate());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(142);

		sb.append("<model><model-name>");
		sb.append("com.e.transfer.model.ETransfer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eTransferId</column-name><column-value><![CDATA[");
		sb.append(getETransferId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffName</column-name><column-value><![CDATA[");
		sb.append(getStaffName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentStaffCode</column-name><column-value><![CDATA[");
		sb.append(getCurrentStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractType</column-name><column-value><![CDATA[");
		sb.append(getContractType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newStaffCode</column-name><column-value><![CDATA[");
		sb.append(getNewStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PassedLL</column-name><column-value><![CDATA[");
		sb.append(getPassedLL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>AttendedSLT</column-name><column-value><![CDATA[");
		sb.append(getAttendedSLT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCompany</column-name><column-value><![CDATA[");
		sb.append(getCurrentCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDivision</column-name><column-value><![CDATA[");
		sb.append(getCurrentDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentDepartment</column-name><column-value><![CDATA[");
		sb.append(getCurrentDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentFunctionName</column-name><column-value><![CDATA[");
		sb.append(getCurrentFunctionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCostCenter</column-name><column-value><![CDATA[");
		sb.append(getCurrentCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentReportingTo</column-name><column-value><![CDATA[");
		sb.append(getCurrentReportingTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherAgreementIfAny</column-name><column-value><![CDATA[");
		sb.append(getOtherAgreementIfAny());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentOfficeSite</column-name><column-value><![CDATA[");
		sb.append(getCurrentOfficeSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPositionCode</column-name><column-value><![CDATA[");
		sb.append(getCurrentPositionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivingStaffCode</column-name><column-value><![CDATA[");
		sb.append(getReceivingStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivingCompany</column-name><column-value><![CDATA[");
		sb.append(getReceivingCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivingDivision</column-name><column-value><![CDATA[");
		sb.append(getReceivingDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivingDepartment</column-name><column-value><![CDATA[");
		sb.append(getReceivingDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newFunctionName</column-name><column-value><![CDATA[");
		sb.append(getNewFunctionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newCostCenter</column-name><column-value><![CDATA[");
		sb.append(getNewCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newReportingTo</column-name><column-value><![CDATA[");
		sb.append(getNewReportingTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newOfficeSite</column-name><column-value><![CDATA[");
		sb.append(getNewOfficeSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sapPositionCode</column-name><column-value><![CDATA[");
		sb.append(getSapPositionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replacement</column-name><column-value><![CDATA[");
		sb.append(getReplacement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionGrade</column-name><column-value><![CDATA[");
		sb.append(getFunctionGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budgetTypeOfPosition</column-name><column-value><![CDATA[");
		sb.append(getBudgetTypeOfPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chinaSixty</column-name><column-value><![CDATA[");
		sb.append(getChinaSixty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetPDSupervisor</column-name><column-value><![CDATA[");
		sb.append(getTargetPDSupervisor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subProcessType</column-name><column-value><![CDATA[");
		sb.append(getSubProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedDate</column-name><column-value><![CDATA[");
		sb.append(getSubmittedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ETransfer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ETransfer.class
		};
	private long _eTransferId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _companyId;
	private String _ticketNo;
	private String _staffName;
	private String _currentStaffCode;
	private String _contractType;
	private String _newStaffCode;
	private int _PassedLL;
	private int _AttendedSLT;
	private String _currentCompany;
	private String _currentDivision;
	private String _currentDepartment;
	private String _currentFunctionName;
	private String _currentCostCenter;
	private String _currentReportingTo;
	private String _otherAgreementIfAny;
	private String _currentOfficeSite;
	private String _currentPositionCode;
	private String _receivingStaffCode;
	private String _receivingCompany;
	private String _receivingDivision;
	private String _receivingDepartment;
	private String _newFunctionName;
	private String _newCostCenter;
	private String _newReportingTo;
	private Date _effectiveDate;
	private String _newOfficeSite;
	private String _sapPositionCode;
	private String _replacement;
	private String _functionGrade;
	private int _budgetTypeOfPosition;
	private int _chinaSixty;
	private int _targetPDSupervisor;
	private String _processType;
	private String _subProcessType;
	private Date _submittedDate;
	private String _comments;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private ETransfer _escapedModel;
}