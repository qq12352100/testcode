/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.seatoffice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.seatoffice.model.SeatOffice;
import com.seatoffice.model.SeatOfficeModel;
import com.seatoffice.model.SeatOfficeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SeatOffice service. Represents a row in the &quot;vgcapon_SeatOffice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.seatoffice.model.SeatOfficeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SeatOfficeImpl}.
 * </p>
 *
 * @author Alice.zou
 * @see SeatOfficeImpl
 * @see com.seatoffice.model.SeatOffice
 * @see com.seatoffice.model.SeatOfficeModel
 * @generated
 */
@JSON(strict = true)
public class SeatOfficeModelImpl extends BaseModelImpl<SeatOffice>
	implements SeatOfficeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a seat office model instance should use the {@link com.seatoffice.model.SeatOffice} interface instead.
	 */
	public static final String TABLE_NAME = "vgcapon_SeatOffice";
	public static final Object[][] TABLE_COLUMNS = {
			{ "seatId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "ticketNo", Types.VARCHAR },
			{ "staffName", Types.VARCHAR },
			{ "staffCode", Types.BIGINT },
			{ "companyName", Types.VARCHAR },
			{ "division", Types.VARCHAR },
			{ "department", Types.VARCHAR },
			{ "costCenter", Types.VARCHAR },
			{ "officePhone", Types.VARCHAR },
			{ "mobilePhone", Types.VARCHAR },
			{ "officeSite", Types.VARCHAR },
			{ "currentCategory", Types.BIGINT },
			{ "currentSeatNo", Types.VARCHAR },
			{ "movingDate", Types.TIMESTAMP },
			{ "expectedSeatNo", Types.VARCHAR },
			{ "reasonForChange", Types.VARCHAR },
			{ "officeKey", Types.BOOLEAN },
			{ "plant", Types.BOOLEAN },
			{ "telephoneAndExtNo", Types.BOOLEAN },
			{ "namePlate", Types.BOOLEAN },
			{ "cabinet", Types.BOOLEAN },
			{ "isOnBehalfOf", Types.BOOLEAN },
			{ "nowCategory", Types.BIGINT },
			{ "newSeatNo", Types.VARCHAR },
			{ "workspaceId", Types.BIGINT },
			{ "seatStatus", Types.VARCHAR },
			{ "sg", Types.VARCHAR },
			{ "leadingMark", Types.VARCHAR },
			{ "positionFlag", Types.VARCHAR },
			{ "isApplicantAgent", Types.BOOLEAN },
			{ "isApproverAgent", Types.BOOLEAN },
			{ "candidateName", Types.VARCHAR },
			{ "desiredStartingDate", Types.TIMESTAMP },
			{ "comments", Types.VARCHAR },
			{ "contractType", Types.VARCHAR },
			{ "processType", Types.VARCHAR },
			{ "subProcessType", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vgcapon_SeatOffice (seatId LONG not null primary key,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyId LONG,ticketNo VARCHAR(75) null,staffName VARCHAR(75) null,staffCode LONG,companyName VARCHAR(75) null,division VARCHAR(75) null,department VARCHAR(75) null,costCenter VARCHAR(75) null,officePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,officeSite VARCHAR(75) null,currentCategory LONG,currentSeatNo VARCHAR(75) null,movingDate DATE null,expectedSeatNo VARCHAR(75) null,reasonForChange VARCHAR(250) null,officeKey BOOLEAN,plant BOOLEAN,telephoneAndExtNo BOOLEAN,namePlate BOOLEAN,cabinet BOOLEAN,isOnBehalfOf BOOLEAN,nowCategory LONG,newSeatNo VARCHAR(75) null,workspaceId LONG,seatStatus VARCHAR(75) null,sg VARCHAR(75) null,leadingMark VARCHAR(75) null,positionFlag VARCHAR(75) null,isApplicantAgent BOOLEAN,isApproverAgent BOOLEAN,candidateName VARCHAR(75) null,desiredStartingDate DATE null,comments VARCHAR(250) null,contractType VARCHAR(75) null,processType VARCHAR(75) null,subProcessType VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vgcapon_SeatOffice";
	public static final String ORDER_BY_JPQL = " ORDER BY seatOffice.seatId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vgcapon_SeatOffice.seatId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.seatoffice.model.SeatOffice"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.seatoffice.model.SeatOffice"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.seatoffice.model.SeatOffice"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long SEATID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SeatOffice toModel(SeatOfficeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SeatOffice model = new SeatOfficeImpl();

		model.setSeatId(soapModel.getSeatId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setTicketNo(soapModel.getTicketNo());
		model.setStaffName(soapModel.getStaffName());
		model.setStaffCode(soapModel.getStaffCode());
		model.setCompanyName(soapModel.getCompanyName());
		model.setDivision(soapModel.getDivision());
		model.setDepartment(soapModel.getDepartment());
		model.setCostCenter(soapModel.getCostCenter());
		model.setOfficePhone(soapModel.getOfficePhone());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setOfficeSite(soapModel.getOfficeSite());
		model.setCurrentCategory(soapModel.getCurrentCategory());
		model.setCurrentSeatNo(soapModel.getCurrentSeatNo());
		model.setMovingDate(soapModel.getMovingDate());
		model.setExpectedSeatNo(soapModel.getExpectedSeatNo());
		model.setReasonForChange(soapModel.getReasonForChange());
		model.setOfficeKey(soapModel.getOfficeKey());
		model.setPlant(soapModel.getPlant());
		model.setTelephoneAndExtNo(soapModel.getTelephoneAndExtNo());
		model.setNamePlate(soapModel.getNamePlate());
		model.setCabinet(soapModel.getCabinet());
		model.setIsOnBehalfOf(soapModel.getIsOnBehalfOf());
		model.setNowCategory(soapModel.getNowCategory());
		model.setNewSeatNo(soapModel.getNewSeatNo());
		model.setWorkspaceId(soapModel.getWorkspaceId());
		model.setSeatStatus(soapModel.getSeatStatus());
		model.setSg(soapModel.getSg());
		model.setLeadingMark(soapModel.getLeadingMark());
		model.setPositionFlag(soapModel.getPositionFlag());
		model.setIsApplicantAgent(soapModel.getIsApplicantAgent());
		model.setIsApproverAgent(soapModel.getIsApproverAgent());
		model.setCandidateName(soapModel.getCandidateName());
		model.setDesiredStartingDate(soapModel.getDesiredStartingDate());
		model.setComments(soapModel.getComments());
		model.setContractType(soapModel.getContractType());
		model.setProcessType(soapModel.getProcessType());
		model.setSubProcessType(soapModel.getSubProcessType());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SeatOffice> toModels(SeatOfficeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SeatOffice> models = new ArrayList<SeatOffice>(soapModels.length);

		for (SeatOfficeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.seatoffice.model.SeatOffice"));

	public SeatOfficeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _seatId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSeatId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _seatId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SeatOffice.class;
	}

	@Override
	public String getModelClassName() {
		return SeatOffice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("seatId", getSeatId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("ticketNo", getTicketNo());
		attributes.put("staffName", getStaffName());
		attributes.put("staffCode", getStaffCode());
		attributes.put("companyName", getCompanyName());
		attributes.put("division", getDivision());
		attributes.put("department", getDepartment());
		attributes.put("costCenter", getCostCenter());
		attributes.put("officePhone", getOfficePhone());
		attributes.put("mobilePhone", getMobilePhone());
		attributes.put("officeSite", getOfficeSite());
		attributes.put("currentCategory", getCurrentCategory());
		attributes.put("currentSeatNo", getCurrentSeatNo());
		attributes.put("movingDate", getMovingDate());
		attributes.put("expectedSeatNo", getExpectedSeatNo());
		attributes.put("reasonForChange", getReasonForChange());
		attributes.put("officeKey", getOfficeKey());
		attributes.put("plant", getPlant());
		attributes.put("telephoneAndExtNo", getTelephoneAndExtNo());
		attributes.put("namePlate", getNamePlate());
		attributes.put("cabinet", getCabinet());
		attributes.put("isOnBehalfOf", getIsOnBehalfOf());
		attributes.put("nowCategory", getNowCategory());
		attributes.put("newSeatNo", getNewSeatNo());
		attributes.put("workspaceId", getWorkspaceId());
		attributes.put("seatStatus", getSeatStatus());
		attributes.put("sg", getSg());
		attributes.put("leadingMark", getLeadingMark());
		attributes.put("positionFlag", getPositionFlag());
		attributes.put("isApplicantAgent", getIsApplicantAgent());
		attributes.put("isApproverAgent", getIsApproverAgent());
		attributes.put("candidateName", getCandidateName());
		attributes.put("desiredStartingDate", getDesiredStartingDate());
		attributes.put("comments", getComments());
		attributes.put("contractType", getContractType());
		attributes.put("processType", getProcessType());
		attributes.put("subProcessType", getSubProcessType());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long seatId = (Long)attributes.get("seatId");

		if (seatId != null) {
			setSeatId(seatId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String ticketNo = (String)attributes.get("ticketNo");

		if (ticketNo != null) {
			setTicketNo(ticketNo);
		}

		String staffName = (String)attributes.get("staffName");

		if (staffName != null) {
			setStaffName(staffName);
		}

		Long staffCode = (Long)attributes.get("staffCode");

		if (staffCode != null) {
			setStaffCode(staffCode);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		String costCenter = (String)attributes.get("costCenter");

		if (costCenter != null) {
			setCostCenter(costCenter);
		}

		String officePhone = (String)attributes.get("officePhone");

		if (officePhone != null) {
			setOfficePhone(officePhone);
		}

		String mobilePhone = (String)attributes.get("mobilePhone");

		if (mobilePhone != null) {
			setMobilePhone(mobilePhone);
		}

		String officeSite = (String)attributes.get("officeSite");

		if (officeSite != null) {
			setOfficeSite(officeSite);
		}

		Long currentCategory = (Long)attributes.get("currentCategory");

		if (currentCategory != null) {
			setCurrentCategory(currentCategory);
		}

		String currentSeatNo = (String)attributes.get("currentSeatNo");

		if (currentSeatNo != null) {
			setCurrentSeatNo(currentSeatNo);
		}

		Date movingDate = (Date)attributes.get("movingDate");

		if (movingDate != null) {
			setMovingDate(movingDate);
		}

		String expectedSeatNo = (String)attributes.get("expectedSeatNo");

		if (expectedSeatNo != null) {
			setExpectedSeatNo(expectedSeatNo);
		}

		String reasonForChange = (String)attributes.get("reasonForChange");

		if (reasonForChange != null) {
			setReasonForChange(reasonForChange);
		}

		Boolean officeKey = (Boolean)attributes.get("officeKey");

		if (officeKey != null) {
			setOfficeKey(officeKey);
		}

		Boolean plant = (Boolean)attributes.get("plant");

		if (plant != null) {
			setPlant(plant);
		}

		Boolean telephoneAndExtNo = (Boolean)attributes.get("telephoneAndExtNo");

		if (telephoneAndExtNo != null) {
			setTelephoneAndExtNo(telephoneAndExtNo);
		}

		Boolean namePlate = (Boolean)attributes.get("namePlate");

		if (namePlate != null) {
			setNamePlate(namePlate);
		}

		Boolean cabinet = (Boolean)attributes.get("cabinet");

		if (cabinet != null) {
			setCabinet(cabinet);
		}

		Boolean isOnBehalfOf = (Boolean)attributes.get("isOnBehalfOf");

		if (isOnBehalfOf != null) {
			setIsOnBehalfOf(isOnBehalfOf);
		}

		Long nowCategory = (Long)attributes.get("nowCategory");

		if (nowCategory != null) {
			setNowCategory(nowCategory);
		}

		String newSeatNo = (String)attributes.get("newSeatNo");

		if (newSeatNo != null) {
			setNewSeatNo(newSeatNo);
		}

		Long workspaceId = (Long)attributes.get("workspaceId");

		if (workspaceId != null) {
			setWorkspaceId(workspaceId);
		}

		String seatStatus = (String)attributes.get("seatStatus");

		if (seatStatus != null) {
			setSeatStatus(seatStatus);
		}

		String sg = (String)attributes.get("sg");

		if (sg != null) {
			setSg(sg);
		}

		String leadingMark = (String)attributes.get("leadingMark");

		if (leadingMark != null) {
			setLeadingMark(leadingMark);
		}

		String positionFlag = (String)attributes.get("positionFlag");

		if (positionFlag != null) {
			setPositionFlag(positionFlag);
		}

		Boolean isApplicantAgent = (Boolean)attributes.get("isApplicantAgent");

		if (isApplicantAgent != null) {
			setIsApplicantAgent(isApplicantAgent);
		}

		Boolean isApproverAgent = (Boolean)attributes.get("isApproverAgent");

		if (isApproverAgent != null) {
			setIsApproverAgent(isApproverAgent);
		}

		String candidateName = (String)attributes.get("candidateName");

		if (candidateName != null) {
			setCandidateName(candidateName);
		}

		Date desiredStartingDate = (Date)attributes.get("desiredStartingDate");

		if (desiredStartingDate != null) {
			setDesiredStartingDate(desiredStartingDate);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String contractType = (String)attributes.get("contractType");

		if (contractType != null) {
			setContractType(contractType);
		}

		String processType = (String)attributes.get("processType");

		if (processType != null) {
			setProcessType(processType);
		}

		String subProcessType = (String)attributes.get("subProcessType");

		if (subProcessType != null) {
			setSubProcessType(subProcessType);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public long getSeatId() {
		return _seatId;
	}

	@Override
	public void setSeatId(long seatId) {
		_columnBitmask = -1L;

		_seatId = seatId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getTicketNo() {
		if (_ticketNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketNo;
		}
	}

	@Override
	public void setTicketNo(String ticketNo) {
		_ticketNo = ticketNo;
	}

	@JSON
	@Override
	public String getStaffName() {
		if (_staffName == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffName;
		}
	}

	@Override
	public void setStaffName(String staffName) {
		_staffName = staffName;
	}

	@JSON
	@Override
	public long getStaffCode() {
		return _staffCode;
	}

	@Override
	public void setStaffCode(long staffCode) {
		_staffCode = staffCode;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	@Override
	public String getCostCenter() {
		if (_costCenter == null) {
			return StringPool.BLANK;
		}
		else {
			return _costCenter;
		}
	}

	@Override
	public void setCostCenter(String costCenter) {
		_costCenter = costCenter;
	}

	@JSON
	@Override
	public String getOfficePhone() {
		if (_officePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _officePhone;
		}
	}

	@Override
	public void setOfficePhone(String officePhone) {
		_officePhone = officePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getOfficeSite() {
		if (_officeSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _officeSite;
		}
	}

	@Override
	public void setOfficeSite(String officeSite) {
		_officeSite = officeSite;
	}

	@JSON
	@Override
	public long getCurrentCategory() {
		return _currentCategory;
	}

	@Override
	public void setCurrentCategory(long currentCategory) {
		_currentCategory = currentCategory;
	}

	@JSON
	@Override
	public String getCurrentSeatNo() {
		if (_currentSeatNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentSeatNo;
		}
	}

	@Override
	public void setCurrentSeatNo(String currentSeatNo) {
		_currentSeatNo = currentSeatNo;
	}

	@JSON
	@Override
	public Date getMovingDate() {
		return _movingDate;
	}

	@Override
	public void setMovingDate(Date movingDate) {
		_movingDate = movingDate;
	}

	@JSON
	@Override
	public String getExpectedSeatNo() {
		if (_expectedSeatNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _expectedSeatNo;
		}
	}

	@Override
	public void setExpectedSeatNo(String expectedSeatNo) {
		_expectedSeatNo = expectedSeatNo;
	}

	@JSON
	@Override
	public String getReasonForChange() {
		if (_reasonForChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonForChange;
		}
	}

	@Override
	public void setReasonForChange(String reasonForChange) {
		_reasonForChange = reasonForChange;
	}

	@JSON
	@Override
	public boolean getOfficeKey() {
		return _officeKey;
	}

	@Override
	public boolean isOfficeKey() {
		return _officeKey;
	}

	@Override
	public void setOfficeKey(boolean officeKey) {
		_officeKey = officeKey;
	}

	@JSON
	@Override
	public boolean getPlant() {
		return _plant;
	}

	@Override
	public boolean isPlant() {
		return _plant;
	}

	@Override
	public void setPlant(boolean plant) {
		_plant = plant;
	}

	@JSON
	@Override
	public boolean getTelephoneAndExtNo() {
		return _telephoneAndExtNo;
	}

	@Override
	public boolean isTelephoneAndExtNo() {
		return _telephoneAndExtNo;
	}

	@Override
	public void setTelephoneAndExtNo(boolean telephoneAndExtNo) {
		_telephoneAndExtNo = telephoneAndExtNo;
	}

	@JSON
	@Override
	public boolean getNamePlate() {
		return _namePlate;
	}

	@Override
	public boolean isNamePlate() {
		return _namePlate;
	}

	@Override
	public void setNamePlate(boolean namePlate) {
		_namePlate = namePlate;
	}

	@JSON
	@Override
	public boolean getCabinet() {
		return _cabinet;
	}

	@Override
	public boolean isCabinet() {
		return _cabinet;
	}

	@Override
	public void setCabinet(boolean cabinet) {
		_cabinet = cabinet;
	}

	@JSON
	@Override
	public boolean getIsOnBehalfOf() {
		return _isOnBehalfOf;
	}

	@Override
	public boolean isIsOnBehalfOf() {
		return _isOnBehalfOf;
	}

	@Override
	public void setIsOnBehalfOf(boolean isOnBehalfOf) {
		_isOnBehalfOf = isOnBehalfOf;
	}

	@JSON
	@Override
	public long getNowCategory() {
		return _nowCategory;
	}

	@Override
	public void setNowCategory(long nowCategory) {
		_nowCategory = nowCategory;
	}

	@JSON
	@Override
	public String getNewSeatNo() {
		if (_newSeatNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _newSeatNo;
		}
	}

	@Override
	public void setNewSeatNo(String newSeatNo) {
		_newSeatNo = newSeatNo;
	}

	@JSON
	@Override
	public long getWorkspaceId() {
		return _workspaceId;
	}

	@Override
	public void setWorkspaceId(long workspaceId) {
		_workspaceId = workspaceId;
	}

	@JSON
	@Override
	public String getSeatStatus() {
		if (_seatStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _seatStatus;
		}
	}

	@Override
	public void setSeatStatus(String seatStatus) {
		_seatStatus = seatStatus;
	}

	@JSON
	@Override
	public String getSg() {
		if (_sg == null) {
			return StringPool.BLANK;
		}
		else {
			return _sg;
		}
	}

	@Override
	public void setSg(String sg) {
		_sg = sg;
	}

	@JSON
	@Override
	public String getLeadingMark() {
		if (_leadingMark == null) {
			return StringPool.BLANK;
		}
		else {
			return _leadingMark;
		}
	}

	@Override
	public void setLeadingMark(String leadingMark) {
		_leadingMark = leadingMark;
	}

	@JSON
	@Override
	public String getPositionFlag() {
		if (_positionFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionFlag;
		}
	}

	@Override
	public void setPositionFlag(String positionFlag) {
		_positionFlag = positionFlag;
	}

	@JSON
	@Override
	public boolean getIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public boolean isIsApplicantAgent() {
		return _isApplicantAgent;
	}

	@Override
	public void setIsApplicantAgent(boolean isApplicantAgent) {
		_isApplicantAgent = isApplicantAgent;
	}

	@JSON
	@Override
	public boolean getIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public boolean isIsApproverAgent() {
		return _isApproverAgent;
	}

	@Override
	public void setIsApproverAgent(boolean isApproverAgent) {
		_isApproverAgent = isApproverAgent;
	}

	@JSON
	@Override
	public String getCandidateName() {
		if (_candidateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _candidateName;
		}
	}

	@Override
	public void setCandidateName(String candidateName) {
		_candidateName = candidateName;
	}

	@JSON
	@Override
	public Date getDesiredStartingDate() {
		return _desiredStartingDate;
	}

	@Override
	public void setDesiredStartingDate(Date desiredStartingDate) {
		_desiredStartingDate = desiredStartingDate;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getContractType() {
		if (_contractType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractType;
		}
	}

	@Override
	public void setContractType(String contractType) {
		_contractType = contractType;
	}

	@JSON
	@Override
	public String getProcessType() {
		if (_processType == null) {
			return StringPool.BLANK;
		}
		else {
			return _processType;
		}
	}

	@Override
	public void setProcessType(String processType) {
		_processType = processType;
	}

	@JSON
	@Override
	public String getSubProcessType() {
		if (_subProcessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subProcessType;
		}
	}

	@Override
	public void setSubProcessType(String subProcessType) {
		_subProcessType = subProcessType;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SeatOffice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SeatOffice toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SeatOffice)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SeatOfficeImpl seatOfficeImpl = new SeatOfficeImpl();

		seatOfficeImpl.setSeatId(getSeatId());
		seatOfficeImpl.setGroupId(getGroupId());
		seatOfficeImpl.setUserId(getUserId());
		seatOfficeImpl.setUserName(getUserName());
		seatOfficeImpl.setCreateDate(getCreateDate());
		seatOfficeImpl.setModifiedDate(getModifiedDate());
		seatOfficeImpl.setCompanyId(getCompanyId());
		seatOfficeImpl.setTicketNo(getTicketNo());
		seatOfficeImpl.setStaffName(getStaffName());
		seatOfficeImpl.setStaffCode(getStaffCode());
		seatOfficeImpl.setCompanyName(getCompanyName());
		seatOfficeImpl.setDivision(getDivision());
		seatOfficeImpl.setDepartment(getDepartment());
		seatOfficeImpl.setCostCenter(getCostCenter());
		seatOfficeImpl.setOfficePhone(getOfficePhone());
		seatOfficeImpl.setMobilePhone(getMobilePhone());
		seatOfficeImpl.setOfficeSite(getOfficeSite());
		seatOfficeImpl.setCurrentCategory(getCurrentCategory());
		seatOfficeImpl.setCurrentSeatNo(getCurrentSeatNo());
		seatOfficeImpl.setMovingDate(getMovingDate());
		seatOfficeImpl.setExpectedSeatNo(getExpectedSeatNo());
		seatOfficeImpl.setReasonForChange(getReasonForChange());
		seatOfficeImpl.setOfficeKey(getOfficeKey());
		seatOfficeImpl.setPlant(getPlant());
		seatOfficeImpl.setTelephoneAndExtNo(getTelephoneAndExtNo());
		seatOfficeImpl.setNamePlate(getNamePlate());
		seatOfficeImpl.setCabinet(getCabinet());
		seatOfficeImpl.setIsOnBehalfOf(getIsOnBehalfOf());
		seatOfficeImpl.setNowCategory(getNowCategory());
		seatOfficeImpl.setNewSeatNo(getNewSeatNo());
		seatOfficeImpl.setWorkspaceId(getWorkspaceId());
		seatOfficeImpl.setSeatStatus(getSeatStatus());
		seatOfficeImpl.setSg(getSg());
		seatOfficeImpl.setLeadingMark(getLeadingMark());
		seatOfficeImpl.setPositionFlag(getPositionFlag());
		seatOfficeImpl.setIsApplicantAgent(getIsApplicantAgent());
		seatOfficeImpl.setIsApproverAgent(getIsApproverAgent());
		seatOfficeImpl.setCandidateName(getCandidateName());
		seatOfficeImpl.setDesiredStartingDate(getDesiredStartingDate());
		seatOfficeImpl.setComments(getComments());
		seatOfficeImpl.setContractType(getContractType());
		seatOfficeImpl.setProcessType(getProcessType());
		seatOfficeImpl.setSubProcessType(getSubProcessType());
		seatOfficeImpl.setStatus(getStatus());
		seatOfficeImpl.setStatusByUserId(getStatusByUserId());
		seatOfficeImpl.setStatusByUserName(getStatusByUserName());
		seatOfficeImpl.setStatusDate(getStatusDate());

		seatOfficeImpl.resetOriginalValues();

		return seatOfficeImpl;
	}

	@Override
	public int compareTo(SeatOffice seatOffice) {
		int value = 0;

		if (getSeatId() < seatOffice.getSeatId()) {
			value = -1;
		}
		else if (getSeatId() > seatOffice.getSeatId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SeatOffice)) {
			return false;
		}

		SeatOffice seatOffice = (SeatOffice)obj;

		long primaryKey = seatOffice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SeatOfficeModelImpl seatOfficeModelImpl = this;

		seatOfficeModelImpl._originalUserId = seatOfficeModelImpl._userId;

		seatOfficeModelImpl._setOriginalUserId = false;

		seatOfficeModelImpl._originalStatus = seatOfficeModelImpl._status;

		seatOfficeModelImpl._setOriginalStatus = false;

		seatOfficeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SeatOffice> toCacheModel() {
		SeatOfficeCacheModel seatOfficeCacheModel = new SeatOfficeCacheModel();

		seatOfficeCacheModel.seatId = getSeatId();

		seatOfficeCacheModel.groupId = getGroupId();

		seatOfficeCacheModel.userId = getUserId();

		seatOfficeCacheModel.userName = getUserName();

		String userName = seatOfficeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			seatOfficeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			seatOfficeCacheModel.createDate = createDate.getTime();
		}
		else {
			seatOfficeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			seatOfficeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			seatOfficeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		seatOfficeCacheModel.companyId = getCompanyId();

		seatOfficeCacheModel.ticketNo = getTicketNo();

		String ticketNo = seatOfficeCacheModel.ticketNo;

		if ((ticketNo != null) && (ticketNo.length() == 0)) {
			seatOfficeCacheModel.ticketNo = null;
		}

		seatOfficeCacheModel.staffName = getStaffName();

		String staffName = seatOfficeCacheModel.staffName;

		if ((staffName != null) && (staffName.length() == 0)) {
			seatOfficeCacheModel.staffName = null;
		}

		seatOfficeCacheModel.staffCode = getStaffCode();

		seatOfficeCacheModel.companyName = getCompanyName();

		String companyName = seatOfficeCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			seatOfficeCacheModel.companyName = null;
		}

		seatOfficeCacheModel.division = getDivision();

		String division = seatOfficeCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			seatOfficeCacheModel.division = null;
		}

		seatOfficeCacheModel.department = getDepartment();

		String department = seatOfficeCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			seatOfficeCacheModel.department = null;
		}

		seatOfficeCacheModel.costCenter = getCostCenter();

		String costCenter = seatOfficeCacheModel.costCenter;

		if ((costCenter != null) && (costCenter.length() == 0)) {
			seatOfficeCacheModel.costCenter = null;
		}

		seatOfficeCacheModel.officePhone = getOfficePhone();

		String officePhone = seatOfficeCacheModel.officePhone;

		if ((officePhone != null) && (officePhone.length() == 0)) {
			seatOfficeCacheModel.officePhone = null;
		}

		seatOfficeCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = seatOfficeCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			seatOfficeCacheModel.mobilePhone = null;
		}

		seatOfficeCacheModel.officeSite = getOfficeSite();

		String officeSite = seatOfficeCacheModel.officeSite;

		if ((officeSite != null) && (officeSite.length() == 0)) {
			seatOfficeCacheModel.officeSite = null;
		}

		seatOfficeCacheModel.currentCategory = getCurrentCategory();

		seatOfficeCacheModel.currentSeatNo = getCurrentSeatNo();

		String currentSeatNo = seatOfficeCacheModel.currentSeatNo;

		if ((currentSeatNo != null) && (currentSeatNo.length() == 0)) {
			seatOfficeCacheModel.currentSeatNo = null;
		}

		Date movingDate = getMovingDate();

		if (movingDate != null) {
			seatOfficeCacheModel.movingDate = movingDate.getTime();
		}
		else {
			seatOfficeCacheModel.movingDate = Long.MIN_VALUE;
		}

		seatOfficeCacheModel.expectedSeatNo = getExpectedSeatNo();

		String expectedSeatNo = seatOfficeCacheModel.expectedSeatNo;

		if ((expectedSeatNo != null) && (expectedSeatNo.length() == 0)) {
			seatOfficeCacheModel.expectedSeatNo = null;
		}

		seatOfficeCacheModel.reasonForChange = getReasonForChange();

		String reasonForChange = seatOfficeCacheModel.reasonForChange;

		if ((reasonForChange != null) && (reasonForChange.length() == 0)) {
			seatOfficeCacheModel.reasonForChange = null;
		}

		seatOfficeCacheModel.officeKey = getOfficeKey();

		seatOfficeCacheModel.plant = getPlant();

		seatOfficeCacheModel.telephoneAndExtNo = getTelephoneAndExtNo();

		seatOfficeCacheModel.namePlate = getNamePlate();

		seatOfficeCacheModel.cabinet = getCabinet();

		seatOfficeCacheModel.isOnBehalfOf = getIsOnBehalfOf();

		seatOfficeCacheModel.nowCategory = getNowCategory();

		seatOfficeCacheModel.newSeatNo = getNewSeatNo();

		String newSeatNo = seatOfficeCacheModel.newSeatNo;

		if ((newSeatNo != null) && (newSeatNo.length() == 0)) {
			seatOfficeCacheModel.newSeatNo = null;
		}

		seatOfficeCacheModel.workspaceId = getWorkspaceId();

		seatOfficeCacheModel.seatStatus = getSeatStatus();

		String seatStatus = seatOfficeCacheModel.seatStatus;

		if ((seatStatus != null) && (seatStatus.length() == 0)) {
			seatOfficeCacheModel.seatStatus = null;
		}

		seatOfficeCacheModel.sg = getSg();

		String sg = seatOfficeCacheModel.sg;

		if ((sg != null) && (sg.length() == 0)) {
			seatOfficeCacheModel.sg = null;
		}

		seatOfficeCacheModel.leadingMark = getLeadingMark();

		String leadingMark = seatOfficeCacheModel.leadingMark;

		if ((leadingMark != null) && (leadingMark.length() == 0)) {
			seatOfficeCacheModel.leadingMark = null;
		}

		seatOfficeCacheModel.positionFlag = getPositionFlag();

		String positionFlag = seatOfficeCacheModel.positionFlag;

		if ((positionFlag != null) && (positionFlag.length() == 0)) {
			seatOfficeCacheModel.positionFlag = null;
		}

		seatOfficeCacheModel.isApplicantAgent = getIsApplicantAgent();

		seatOfficeCacheModel.isApproverAgent = getIsApproverAgent();

		seatOfficeCacheModel.candidateName = getCandidateName();

		String candidateName = seatOfficeCacheModel.candidateName;

		if ((candidateName != null) && (candidateName.length() == 0)) {
			seatOfficeCacheModel.candidateName = null;
		}

		Date desiredStartingDate = getDesiredStartingDate();

		if (desiredStartingDate != null) {
			seatOfficeCacheModel.desiredStartingDate = desiredStartingDate.getTime();
		}
		else {
			seatOfficeCacheModel.desiredStartingDate = Long.MIN_VALUE;
		}

		seatOfficeCacheModel.comments = getComments();

		String comments = seatOfficeCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			seatOfficeCacheModel.comments = null;
		}

		seatOfficeCacheModel.contractType = getContractType();

		String contractType = seatOfficeCacheModel.contractType;

		if ((contractType != null) && (contractType.length() == 0)) {
			seatOfficeCacheModel.contractType = null;
		}

		seatOfficeCacheModel.processType = getProcessType();

		String processType = seatOfficeCacheModel.processType;

		if ((processType != null) && (processType.length() == 0)) {
			seatOfficeCacheModel.processType = null;
		}

		seatOfficeCacheModel.subProcessType = getSubProcessType();

		String subProcessType = seatOfficeCacheModel.subProcessType;

		if ((subProcessType != null) && (subProcessType.length() == 0)) {
			seatOfficeCacheModel.subProcessType = null;
		}

		seatOfficeCacheModel.status = getStatus();

		seatOfficeCacheModel.statusByUserId = getStatusByUserId();

		seatOfficeCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = seatOfficeCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			seatOfficeCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			seatOfficeCacheModel.statusDate = statusDate.getTime();
		}
		else {
			seatOfficeCacheModel.statusDate = Long.MIN_VALUE;
		}

		return seatOfficeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(95);

		sb.append("{seatId=");
		sb.append(getSeatId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", ticketNo=");
		sb.append(getTicketNo());
		sb.append(", staffName=");
		sb.append(getStaffName());
		sb.append(", staffCode=");
		sb.append(getStaffCode());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", costCenter=");
		sb.append(getCostCenter());
		sb.append(", officePhone=");
		sb.append(getOfficePhone());
		sb.append(", mobilePhone=");
		sb.append(getMobilePhone());
		sb.append(", officeSite=");
		sb.append(getOfficeSite());
		sb.append(", currentCategory=");
		sb.append(getCurrentCategory());
		sb.append(", currentSeatNo=");
		sb.append(getCurrentSeatNo());
		sb.append(", movingDate=");
		sb.append(getMovingDate());
		sb.append(", expectedSeatNo=");
		sb.append(getExpectedSeatNo());
		sb.append(", reasonForChange=");
		sb.append(getReasonForChange());
		sb.append(", officeKey=");
		sb.append(getOfficeKey());
		sb.append(", plant=");
		sb.append(getPlant());
		sb.append(", telephoneAndExtNo=");
		sb.append(getTelephoneAndExtNo());
		sb.append(", namePlate=");
		sb.append(getNamePlate());
		sb.append(", cabinet=");
		sb.append(getCabinet());
		sb.append(", isOnBehalfOf=");
		sb.append(getIsOnBehalfOf());
		sb.append(", nowCategory=");
		sb.append(getNowCategory());
		sb.append(", newSeatNo=");
		sb.append(getNewSeatNo());
		sb.append(", workspaceId=");
		sb.append(getWorkspaceId());
		sb.append(", seatStatus=");
		sb.append(getSeatStatus());
		sb.append(", sg=");
		sb.append(getSg());
		sb.append(", leadingMark=");
		sb.append(getLeadingMark());
		sb.append(", positionFlag=");
		sb.append(getPositionFlag());
		sb.append(", isApplicantAgent=");
		sb.append(getIsApplicantAgent());
		sb.append(", isApproverAgent=");
		sb.append(getIsApproverAgent());
		sb.append(", candidateName=");
		sb.append(getCandidateName());
		sb.append(", desiredStartingDate=");
		sb.append(getDesiredStartingDate());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", contractType=");
		sb.append(getContractType());
		sb.append(", processType=");
		sb.append(getProcessType());
		sb.append(", subProcessType=");
		sb.append(getSubProcessType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(145);

		sb.append("<model><model-name>");
		sb.append("com.seatoffice.model.SeatOffice");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>seatId</column-name><column-value><![CDATA[");
		sb.append(getSeatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNo</column-name><column-value><![CDATA[");
		sb.append(getTicketNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffName</column-name><column-value><![CDATA[");
		sb.append(getStaffName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffCode</column-name><column-value><![CDATA[");
		sb.append(getStaffCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costCenter</column-name><column-value><![CDATA[");
		sb.append(getCostCenter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officePhone</column-name><column-value><![CDATA[");
		sb.append(getOfficePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobilePhone</column-name><column-value><![CDATA[");
		sb.append(getMobilePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officeSite</column-name><column-value><![CDATA[");
		sb.append(getOfficeSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCategory</column-name><column-value><![CDATA[");
		sb.append(getCurrentCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentSeatNo</column-name><column-value><![CDATA[");
		sb.append(getCurrentSeatNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>movingDate</column-name><column-value><![CDATA[");
		sb.append(getMovingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedSeatNo</column-name><column-value><![CDATA[");
		sb.append(getExpectedSeatNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonForChange</column-name><column-value><![CDATA[");
		sb.append(getReasonForChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officeKey</column-name><column-value><![CDATA[");
		sb.append(getOfficeKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>plant</column-name><column-value><![CDATA[");
		sb.append(getPlant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telephoneAndExtNo</column-name><column-value><![CDATA[");
		sb.append(getTelephoneAndExtNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>namePlate</column-name><column-value><![CDATA[");
		sb.append(getNamePlate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cabinet</column-name><column-value><![CDATA[");
		sb.append(getCabinet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isOnBehalfOf</column-name><column-value><![CDATA[");
		sb.append(getIsOnBehalfOf());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nowCategory</column-name><column-value><![CDATA[");
		sb.append(getNowCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newSeatNo</column-name><column-value><![CDATA[");
		sb.append(getNewSeatNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workspaceId</column-name><column-value><![CDATA[");
		sb.append(getWorkspaceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>seatStatus</column-name><column-value><![CDATA[");
		sb.append(getSeatStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sg</column-name><column-value><![CDATA[");
		sb.append(getSg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leadingMark</column-name><column-value><![CDATA[");
		sb.append(getLeadingMark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionFlag</column-name><column-value><![CDATA[");
		sb.append(getPositionFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApplicantAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApplicantAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproverAgent</column-name><column-value><![CDATA[");
		sb.append(getIsApproverAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>candidateName</column-name><column-value><![CDATA[");
		sb.append(getCandidateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desiredStartingDate</column-name><column-value><![CDATA[");
		sb.append(getDesiredStartingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractType</column-name><column-value><![CDATA[");
		sb.append(getContractType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processType</column-name><column-value><![CDATA[");
		sb.append(getProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subProcessType</column-name><column-value><![CDATA[");
		sb.append(getSubProcessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SeatOffice.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SeatOffice.class
		};
	private long _seatId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _companyId;
	private String _ticketNo;
	private String _staffName;
	private long _staffCode;
	private String _companyName;
	private String _division;
	private String _department;
	private String _costCenter;
	private String _officePhone;
	private String _mobilePhone;
	private String _officeSite;
	private long _currentCategory;
	private String _currentSeatNo;
	private Date _movingDate;
	private String _expectedSeatNo;
	private String _reasonForChange;
	private boolean _officeKey;
	private boolean _plant;
	private boolean _telephoneAndExtNo;
	private boolean _namePlate;
	private boolean _cabinet;
	private boolean _isOnBehalfOf;
	private long _nowCategory;
	private String _newSeatNo;
	private long _workspaceId;
	private String _seatStatus;
	private String _sg;
	private String _leadingMark;
	private String _positionFlag;
	private boolean _isApplicantAgent;
	private boolean _isApproverAgent;
	private String _candidateName;
	private Date _desiredStartingDate;
	private String _comments;
	private String _contractType;
	private String _processType;
	private String _subProcessType;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private SeatOffice _escapedModel;
}